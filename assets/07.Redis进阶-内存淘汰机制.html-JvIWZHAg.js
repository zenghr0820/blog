import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,a,o as i}from"./app-Dho6D0p5.js";const r={};function n(o,e){return i(),s("div",null,e[0]||(e[0]=[a(`<h1 id="redis-内存淘汰机制" tabindex="-1"><a class="header-anchor" href="#redis-内存淘汰机制"><span>Redis 内存淘汰机制</span></a></h1><p>Redis的用途非常广泛。作为一个高性能的内存数据库，它经常被用于缓存的业务场景。</p><p>所谓缓存，即在第一次获取到数据的时候，把它暂存在内存中。这样下次需要这个数据的时候，就直接从内存中取，不用再去查询数据库或调用远程接口，这样可以极大地提高应用程序的性能。</p><p>如果缓存中的数据永久存在，那占用的内存就会变得越来越大。而内存是有限的，所以缓存系统需要在需要的时候删除一些不必要的缓存数据以节约内存空间。</p><p>Redis提供了两种机制配合来达到上述目的：<strong>过期策略</strong>和 <strong>内存淘汰机制</strong></p><h2 id="key-过期策略" tabindex="-1"><a class="header-anchor" href="#key-过期策略"><span>Key 过期策略</span></a></h2><p>Redis中大家会对存入的数据设置过期时间，那么这些数据如果过期了，Redis 是怎么样把他们消灭掉的呢？我们一起来探讨一下。下面介绍三种清除策略：</p><h3 id="惰性删除" tabindex="-1"><a class="header-anchor" href="#惰性删除"><span>惰性删除</span></a></h3><p>当访问Key时，才去判断它是否过期，如果过期，直接干掉。这种方式对CPU很友好，但是一个key如果长期不用，一直存在内存里，会造成内存浪费</p><h3 id="定时删除" tabindex="-1"><a class="header-anchor" href="#定时删除"><span>定时删除</span></a></h3><p>设置键的过期时间的同时，创建一个定时器，当到达过期时间点，立即执行对Key的删除操作，这种方式最不友好</p><h3 id="定期删除" tabindex="-1"><a class="header-anchor" href="#定期删除"><span>定期删除</span></a></h3><p>隔一段时间，对数据进行一次检查，删除里面的过期Key，至于要删除多少过期Key，检查多少数据，则由算法决定。</p><p>举个例子方便大家理解：Redis每秒随机取100个数据进行过期检查，删除检查数据中所有已经过期的Key，如果过期的Key占比大于总数的25%，也就是超过25个，再重复上述检查操作</p><blockquote><p>Redis服务器实际使用的是 <strong>定期删除</strong>+<strong>惰性删除</strong> 两种策略：通过配合使用这两种删除策略，可以很好地在合理使用CPU和避免浪费内存之间取得平衡</p></blockquote><h2 id="redis-内存淘汰机制-1" tabindex="-1"><a class="header-anchor" href="#redis-内存淘汰机制-1"><span>Redis 内存淘汰机制</span></a></h2><blockquote><p>Redis内存淘汰机制是指当内存使用达到上限（可通过maxmemory配置，0为不限制，即服务器内存上限），根据一定的算法来决定淘汰掉哪些数据，以保证新数据的存入</p></blockquote><div class="language-sh" data-highlighter="shiki" data-ext="sh" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># maxmemory &lt;bytes&gt; 配置内存阈值</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># maxmemory-policy noeviction</span></span></code></pre></div><p>常见的内存淘汰机制分为四大类：</p><ul><li><strong>LRU：</strong> LRU是Least recently used，最近最少使用的意思，简单的理解就是从数据库中删除最近最少访问的数据，该算法认为，你长期不用的数据，那么被再次访问的概率也就很小了，淘汰的数据为最长时间没有被使用，仅与时间相关</li><li><strong>LFU：</strong> LFU是Least Frequently Used，最不经常使用的意思，简单的理解就是淘汰一段时间内，使用次数最少的数据，这个与频次和时间相关</li><li><strong>TTL：</strong> Redis中，有的数据是设置了过期时间的，而设置了过期时间的这部分数据，就是该算法要解决的对象。如果你快过期了，不好意思，我内存现在不够了，反正你也要退休了，提前送你一程，把你干掉吧</li><li>随机淘汰： 随机移除某个key</li></ul><h3 id="maxmemory-policy-配置选项" tabindex="-1"><a class="header-anchor" href="#maxmemory-policy-配置选项"><span>maxmemory-policy 配置选项</span></a></h3><ul><li><p><strong>volatile-lru：</strong> 找出已经设置过期时间的数据集，将最近最少使用（被访问到）的数据干掉</p></li><li><p><strong>volatile-ttl：</strong> 找出已经设置过期时间的数据集，将即将过期的数据干掉</p></li><li><p><strong>volatile-random：</strong> 找出已经设置过期时间的数据集，进行无差别攻击，随机干掉数据</p></li><li><p><strong>volatile-lfu：</strong> 找出已经设置过期时间的数据集，将一段时间内，使用次数最少的数据干掉</p></li><li><p><strong>allkeys-lru：</strong> 与第1个差不多，数据集从设置过期时间数据变为全体数据</p></li><li><p><strong>allkeys-lfu：</strong> 与第4个差不多，数据集从设置过期时间数据变为全体数据</p></li><li><p><strong>allkeys-random：</strong> 与第3个差不多，数据集从设置过期时间数据变为全体数据</p></li><li><p><strong>no-enviction：</strong> 什么都不干，报错，告诉你内存不足，这样的好处是可以保证数据不丢失，这也是系统默认的淘汰策略</p></li></ul><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2><ul><li><a href="https://juejin.cn/post/6844903953092575246" target="_blank" rel="noopener noreferrer">https://juejin.cn/post/6844903953092575246</a></li><li><a href="https://www.cnblogs.com/maguanyue/p/12090414.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/maguanyue/p/12090414.html</a></li></ul>`,24)]))}const d=t(r,[["render",n]]),h=JSON.parse('{"path":"/database/redis/07.Redis%E8%BF%9B%E9%98%B6-%E5%86%85%E5%AD%98%E6%B7%98%E6%B1%B0%E6%9C%BA%E5%88%B6.html","title":"Redis进阶-内存淘汰机制","lang":"zh-CN","frontmatter":{"title":"Redis进阶-内存淘汰机制","date":"2021-08-02T21:00:00.000Z","re":"2021-08-02-redis-memory","description":"Redis 内存淘汰机制 Redis的用途非常广泛。作为一个高性能的内存数据库，它经常被用于缓存的业务场景。 所谓缓存，即在第一次获取到数据的时候，把它暂存在内存中。这样下次需要这个数据的时候，就直接从内存中取，不用再去查询数据库或调用远程接口，这样可以极大地提高应用程序的性能。 如果缓存中的数据永久存在，那占用的内存就会变得越来越大。而内存是有限的，...","permalink":"/passages/2021-08-02-redis-memory.html","head":[["meta",{"property":"og:url","content":"https://blog.zenghr.cn/passages/2021-08-02-redis-memory.html"}],["meta",{"property":"og:site_name","content":"Zenghr"}],["meta",{"property":"og:title","content":"Redis进阶-内存淘汰机制"}],["meta",{"property":"og:description","content":"Redis 内存淘汰机制 Redis的用途非常广泛。作为一个高性能的内存数据库，它经常被用于缓存的业务场景。 所谓缓存，即在第一次获取到数据的时候，把它暂存在内存中。这样下次需要这个数据的时候，就直接从内存中取，不用再去查询数据库或调用远程接口，这样可以极大地提高应用程序的性能。 如果缓存中的数据永久存在，那占用的内存就会变得越来越大。而内存是有限的，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-07T20:50:33.000Z"}],["meta",{"property":"article:published_time","content":"2021-08-02T21:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-07T20:50:33.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Redis进阶-内存淘汰机制\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-08-02T21:00:00.000Z\\",\\"dateModified\\":\\"2025-04-07T20:50:33.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Zenghr\\"}]}"]]},"git":{"createdTime":1744059033000,"updatedTime":1744059033000,"contributors":[{"name":"zenghr","username":"zenghr","email":"zenghr","commits":1,"url":"https://github.com/zenghr"}]},"readingTime":{"minutes":3.9,"words":1171},"filePathRelative":"database/redis/07.Redis进阶-内存淘汰机制.md","localizedDate":"2021年8月2日","excerpt":"\\n<p>Redis的用途非常广泛。作为一个高性能的内存数据库，它经常被用于缓存的业务场景。</p>\\n<p>所谓缓存，即在第一次获取到数据的时候，把它暂存在内存中。这样下次需要这个数据的时候，就直接从内存中取，不用再去查询数据库或调用远程接口，这样可以极大地提高应用程序的性能。</p>\\n<p>如果缓存中的数据永久存在，那占用的内存就会变得越来越大。而内存是有限的，所以缓存系统需要在需要的时候删除一些不必要的缓存数据以节约内存空间。</p>\\n<p>Redis提供了两种机制配合来达到上述目的：<strong>过期策略</strong>和 <strong>内存淘汰机制</strong></p>\\n<h2>Key 过期策略</h2>","autoDesc":true}');export{d as comp,h as data};
