import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,a as t,b as l,d as h,w as e,r as p,o as k,i as r}from"./app-Dzewmnmq.js";const B={};function d(g,s){const i=p("RouteLink");return k(),n("div",null,[s[1]||(s[1]=t(`<h1 id="多线程理论基础" tabindex="-1"><a class="header-anchor" href="#多线程理论基础"><span>多线程理论基础</span></a></h1><div class="hint-container tip"><p class="hint-container-title">提示</p><p>本文用于理解学习多线程的理论基础以及代码实现</p></div><h2 id="带着bat大厂的面试问题去理解" tabindex="-1"><a class="header-anchor" href="#带着bat大厂的面试问题去理解"><span>带着BAT大厂的面试问题去理解</span></a></h2><ul><li>描述进程和线程的区别</li><li>如何理解并发和并行的区别</li><li>多线程的出现是要解决什么问题？</li><li>线程不安全是指什么？举例说明</li><li>实现线程安全有哪些方法？</li></ul><h2 id="进程的发明" tabindex="-1"><a class="header-anchor" href="#进程的发明"><span>进程的发明</span></a></h2><p>最初的计算机只能执行一些特定的指令，用户输入一个指令，计算机做出一个操作，显然计算机大部分时间都在等待用户的指令，效率低下。</p><p>批处理操作系统：用户将一系列指令写下来，形成一个清单，然后交给计算机去读取并依次执行指令，这样批处理系统就出现了</p><p>多任务操作系统：虽然批处理系统的诞生提高了电脑的处理效率，但是一个操作执行完，才能执行另一个操作，当一个操作需要大量的IO操作，cpu 只能等待IO操作完成才能执行其他操作，很浪费 cpu 的资源。于是人们发明了进程，每个进程对应一定的内存空间，且只能使用自己内存，每个进程之间互不干扰。同时进程也保存了程序的运行状态，当程序暂停时，在下一次切换会根据暂停时保存的状态来恢复，并接着执行。</p><p>可以说 <strong>进程的出现提高了 cpu 的利用率</strong></p><h2 id="并发和并行的概念" tabindex="-1"><a class="header-anchor" href="#并发和并行的概念"><span>并发和并行的概念</span></a></h2><p>并发是能够让操作系统从宏观上看起来同一时间段执行多个任务。 换句话说，<strong>进程让操作体统的并发成</strong><strong>为了可能，至此出现多任务操作系统</strong>。 虽然并发从宏观上看有多个任务在执行，但在事实上，对于单核CPU来说，任意具体时刻都只有一个任 务在占用CPU资源。 操作系统一般通过CPU时间片轮转实现并发</p><ul><li>并发：在一段时间内多个进程轮流使用 cpu，多个进程形成并发</li><li>并行：在同一时刻多个进程使用各自的 cpu ，多个进程形成并行，并行需要多个 cpu 支持</li></ul><h2 id="线程的出现" tabindex="-1"><a class="header-anchor" href="#线程的出现"><span>线程的出现</span></a></h2><p>出现进程后，计算机性能 cpu 得到了巨大的提升，但是人们对实时性有了要求，因为一个进程在一个时间段内只能做一个事情，如果一个进程有多个子任务时，只能逐个得执行这些子任务，很影响效率。</p><p>e.g：当手机在获取网络图片时，此时用户点击了相机，因为 cpu 正在渲染图片，不能响应点击相机的操作，就出现了卡顿现象</p><p>所以人们为了解决实时性，发明了 <strong>线程</strong>，让一个线程执行一个子任务，这样一个进程就包含了多个线程；当用户点击相机时，暂停渲染图片，响应相机操作，响应完成再切换，就满足了对实时性的要求。</p><p><strong>进程让操作系统的并发性成为了可能，而线程让进程的内部并发成为了可能</strong></p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>注意：一个进程包含多个线程，但是这些线程共享进程占有的内存地址空间和资源。进程是操作系统进 行资源分配的基本单位（进程之间互不干扰），而线程是操作系统进行CPU调度的基本单位（线程间互 相切换）</p></div><h2 id="进程和线程的区别" tabindex="-1"><a class="header-anchor" href="#进程和线程的区别"><span>进程和线程的区别</span></a></h2><p><strong>根本区别：进程是操作系统资源分配的基本单位，而线程是CPU调度和执行的基本单位</strong></p><ul><li>开销：进程有独立的内存空间，程序之间切换开销比较大；线程可以看出是轻量级的进程，共享进程的资源，每个线程都有自己独立的栈空间，切换开销小</li><li>内存分配方面：系统在运行的时候会为每个进程分配不同的内存空间；而对线程而言，除了CPU外，系 统不会为线程分配内存（线程所使用的资源来自其所属进程的资源），线程组之间只能共享资源</li><li>包含关系：线程是进程的子集，一个进程可以有很多线程，每条线程并行执行不同的任务</li></ul><h2 id="线程不安全实例" tabindex="-1"><a class="header-anchor" href="#线程不安全实例"><span>线程不安全实例</span></a></h2><p>模拟买票过程，共有 5 张票，多线程模拟卖票的过程，以下代码模拟买票过程，操作结束后输出的数据错乱，有可能出现 票数为负数的结果</p><div class="language-java" data-highlighter="shiki" data-ext="java" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> TicketRunnable</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> implements</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> Runnable</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> count </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;"> 5</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> run</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">        for</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">; i </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;"> 10</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">; i++) {</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">            if</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> (count </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">                count--;</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">                System</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Thread</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">currentThread</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">getName</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;"> &quot;=&gt; &quot;</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> count);</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">            }</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><p><strong>模拟买票</strong></p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> TicketRunnableExample</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#E06C75;--shiki-light-font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">        TicketRunnable</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> tr</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> TicketRunnable</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">        Thread</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> th1</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> Thread</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(tr);</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">        Thread</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> th2</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> Thread</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(tr);</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">        Thread</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> th3</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> Thread</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(tr);</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">        th1</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">start</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">        th2</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">start</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">        th3</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">start</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 输出：</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // Thread-0=&gt; 4</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">		// Thread-0=&gt; 1</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">		// Thread-0=&gt; 0</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">		// Thread-2=&gt; 2</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">		// Thread-1=&gt; 3</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="实现线程安全" tabindex="-1"><a class="header-anchor" href="#实现线程安全"><span>实现线程安全</span></a></h2><h3 id="_1-互斥同步" tabindex="-1"><a class="header-anchor" href="#_1-互斥同步"><span>1. 互斥同步</span></a></h3><ul><li><strong>synchronized：</strong> Java的关键字，同步机制由 Jvm 维护</li><li><strong>ReentrantLock：</strong> Java 并发包中的互斥锁</li></ul><p>如需要进一步了解线程互斥同步可以看：</p>`,30)),l("p",null,[h(i,{to:"/passages/2021-05-04-java-thread-basic.html#%E7%BA%BF%E7%A8%8B%E4%BA%92%E6%96%A5%E5%90%8C%E6%AD%A5"},{default:e(()=>s[0]||(s[0]=[r("Java 并发 - 多线程基础")])),_:1})])])}const y=a(B,[["render",d]]),F=JSON.parse('{"path":"/Java/concurrency/01.Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%90%86%E8%AE%BA.html","title":"Java 多线程","lang":"zh-CN","frontmatter":{"title":"Java 多线程","date":"2021-04-28T10:00:00.000Z","re":"2021-04-28-java-thread-theory","category":["Java"],"description":"多线程理论基础 提示 本文用于理解学习多线程的理论基础以及代码实现 带着BAT大厂的面试问题去理解 描述进程和线程的区别 如何理解并发和并行的区别 多线程的出现是要解决什么问题？ 线程不安全是指什么？举例说明 实现线程安全有哪些方法？ 进程的发明 最初的计算机只能执行一些特定的指令，用户输入一个指令，计算机做出一个操作，显然计算机大部分时间都在等待用户...","permalink":"/passages/2021-04-28-java-thread-theory.html","head":[["meta",{"property":"og:url","content":"https://blog.zenghr.cn/passages/2021-04-28-java-thread-theory.html"}],["meta",{"property":"og:site_name","content":"Zenghr"}],["meta",{"property":"og:title","content":"Java 多线程"}],["meta",{"property":"og:description","content":"多线程理论基础 提示 本文用于理解学习多线程的理论基础以及代码实现 带着BAT大厂的面试问题去理解 描述进程和线程的区别 如何理解并发和并行的区别 多线程的出现是要解决什么问题？ 线程不安全是指什么？举例说明 实现线程安全有哪些方法？ 进程的发明 最初的计算机只能执行一些特定的指令，用户输入一个指令，计算机做出一个操作，显然计算机大部分时间都在等待用户..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-07T17:00:17.000Z"}],["meta",{"property":"article:published_time","content":"2021-04-28T10:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-07T17:00:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java 多线程\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-04-28T10:00:00.000Z\\",\\"dateModified\\":\\"2025-04-07T17:00:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Zenghr\\"}]}"]]},"git":{"createdTime":1744045217000,"updatedTime":1744045217000,"contributors":[{"name":"zenghr","username":"zenghr","email":"zenghr","commits":1,"url":"https://github.com/zenghr"}]},"readingTime":{"minutes":4.64,"words":1391},"filePathRelative":"Java/concurrency/01.Java多线程理论.md","localizedDate":"2021年4月28日","excerpt":"\\n<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">提示</p>\\n<p>本文用于理解学习多线程的理论基础以及代码实现</p>\\n</div>\\n<h2>带着BAT大厂的面试问题去理解</h2>\\n<ul>\\n<li>描述进程和线程的区别</li>\\n<li>如何理解并发和并行的区别</li>\\n<li>多线程的出现是要解决什么问题？</li>\\n<li>线程不安全是指什么？举例说明</li>\\n<li>实现线程安全有哪些方法？</li>\\n</ul>\\n<h2>进程的发明</h2>\\n<p>最初的计算机只能执行一些特定的指令，用户输入一个指令，计算机做出一个操作，显然计算机大部分时间都在等待用户的指令，效率低下。</p>","autoDesc":true}');export{y as comp,F as data};
