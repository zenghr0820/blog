import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as a,o as d,c as n,d as e,e as r,b as i,a as o}from"./app-84ddd078.js";const h={},l=o('<h1 id="redis概念和基础" tabindex="-1"><a class="header-anchor" href="#redis概念和基础" aria-hidden="true">#</a> Redis概念和基础</h1><blockquote><p>Redis是一种支持key-value等多种数据结构的存储系统。可用于缓存，事件发布或订阅，高速队列等场景。支持网络，提供字符串，哈希，列表，队列，集合结构直接存取，基于内存，可持久化。</p></blockquote><h2 id="什么是-redis" tabindex="-1"><a class="header-anchor" href="#什么是-redis" aria-hidden="true">#</a> 什么是 Redis</h2><p>Redis是一款 <strong>内存高速缓存数据库</strong> 。Redis全称为：<strong>Remote Dictionary Server</strong>（远程数据服务），使用C语言编写，Redis是一个key-value存储系统（键值存储系统），支持丰富的数据类型，如：String、list、set、zset、hash。</p><p>Redis是一种支持key-value等多种数据结构的存储系统。可用于缓存，事件发布或订阅，高速队列等场景。支持网络，提供字符串，哈希，列表，队列，集合结构直接存取，基于内存，可持久化。</p><p><strong>Redis 定位是缓存，提高数据读写效率，减轻客户端数据访问压力</strong></p><h2 id="redis-有什么优势" tabindex="-1"><a class="header-anchor" href="#redis-有什么优势" aria-hidden="true">#</a> Redis 有什么优势</h2><ul><li><strong>性能极高</strong> – Redis能读的速度是110000次/s,写的速度是81000次/s 。</li><li><strong>丰富的数据类型</strong> – Redis支持二进制案例的 Strings, Lists, Hashes, Sets 及 Ordered Sets 数据类型操作。</li><li><strong>原子性</strong> – Redis的所有操作都是原子性的，意思就是要么成功执行要么失败完全不执行。单个操作是原子性的。多个操作也支持事务，即原子性，通过 MULTI 和 EXEC 指令包起来。</li><li><strong>丰富的特性</strong> – Redis还支持 publish/subscribe, 通知, key 过期等等特性。</li><li><strong>持久化</strong> - Redis支持RDB, AOF等持久化方式</li></ul><h2 id="redis-的使用场景" tabindex="-1"><a class="header-anchor" href="#redis-的使用场景" aria-hidden="true">#</a> Redis 的使用场景</h2><blockquote><p>平时我们用到 redis 的地方蛮多的，下面就了解的应用场景做个总结</p></blockquote><h3 id="缓存热点数据" tabindex="-1"><a class="header-anchor" href="#缓存热点数据" aria-hidden="true">#</a> 缓存热点数据</h3><p>缓存是Redis最常见的应用场景，因为Redis读写性能优异，作为缓存使用时，一般有两种方式保存数据：</p><ul><li>读取前，先去读Redis，如果没有数据，读取数据库，将数据拉入Redis。</li><li>插入数据时，同时写入Redis</li></ul><h3 id="限时业务" tabindex="-1"><a class="header-anchor" href="#限时业务" aria-hidden="true">#</a> 限时业务</h3><p>redis中可以使用 expire 命令设置一个键的生存时间，到时间后redis会删除它。利用这一特性可以运用在限时的优惠活动信息、手机验证码等业务场景</p><h3 id="点赞、好友等相互关系的存储" tabindex="-1"><a class="header-anchor" href="#点赞、好友等相互关系的存储" aria-hidden="true">#</a> 点赞、好友等相互关系的存储</h3><p>Redis set对外提供的功能与list类似是一个列表的功能，特殊之处在于set是可以自动排重的，当你需要存储一个列表数据，又不希望出现重复数据时，set是一个很好的选择，并且set提供了判断某个成员是否在一个set集合内的重要接口，这个也是list所不能提供的。 又或者在微博应用中，每个用户关注的人存在一个集合中，就很容易实现求两个人的共同好友功能。</p><p>这个在奶茶活动中有运用，就是利用set存储用户之间的点赞关联的，另外在点赞前判断是否点赞过就利用了 sismembe r方法，当时这个接口的响应时间控制在10毫秒内，十分高效</p><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> 参考文章</h2>',19),c={href:"https://zhuanlan.zhihu.com/p/29665317",target:"_blank",rel:"noopener noreferrer"},p={href:"https://www.jianshu.com/p/40dbc78711c8",target:"_blank",rel:"noopener noreferrer"},u={href:"https://www.pdai.tech/md/db/nosql-redis/db-redis-introduce.html",target:"_blank",rel:"noopener noreferrer"};function _(R,b){const s=a("ExternalLinkIcon");return d(),n("div",null,[l,e("ul",null,[e("li",null,[e("p",null,[e("a",c,[r("https://zhuanlan.zhihu.com/p/29665317"),i(s)])])]),e("li",null,[e("p",null,[e("a",p,[r("https://www.jianshu.com/p/40dbc78711c8"),i(s)])])]),e("li",null,[e("p",null,[e("a",u,[r("https://www.pdai.tech/md/db/nosql-redis/db-redis-introduce.html"),i(s)])])])])])}const m=t(h,[["render",_],["__file","01.Redis入门-Redis概念.html.vue"]]);export{m as default};
