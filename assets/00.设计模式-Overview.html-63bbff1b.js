const e=JSON.parse('{"key":"v-116890b4","path":"/dev-guide/design/00.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-Overview.html","title":"设计模式 - Overview","lang":"zh-CN","frontmatter":{"title":"设计模式 - Overview","date":"2021-05-07T00:00:00.000Z","re":"dev-pattern-overview","star":true,"tag":["设计模式"],"category":["设计模式"],"description":"设计模式 - Overview 提示 设计模式（Design Pattern）是前辈们对代码开发经验的总结，是解决特定问题的一系列套路。它不是语法规定，而是一套用来提高代码可复用性、可维护性、可读性、稳健性以及安全性的解决方案 为什么要使用设计模式？ 使用设计模式的最终目的是 \\"高内聚低耦合\\" 代码重用性：相同功能的代码，不多多次编写 代码可读性：编程规范性，便于其他程序员阅读 代码可扩展性：当增加新的功能后，对原来的功能没有影响","permalink":"/passages/dev-pattern-overview.html","head":[["meta",{"property":"og:url","content":"https://blog.zenghr.cn/passages/dev-pattern-overview.html"}],["meta",{"property":"og:site_name","content":"Zenghr"}],["meta",{"property":"og:title","content":"设计模式 - Overview"}],["meta",{"property":"og:description","content":"设计模式 - Overview 提示 设计模式（Design Pattern）是前辈们对代码开发经验的总结，是解决特定问题的一系列套路。它不是语法规定，而是一套用来提高代码可复用性、可维护性、可读性、稳健性以及安全性的解决方案 为什么要使用设计模式？ 使用设计模式的最终目的是 \\"高内聚低耦合\\" 代码重用性：相同功能的代码，不多多次编写 代码可读性：编程规范性，便于其他程序员阅读 代码可扩展性：当增加新的功能后，对原来的功能没有影响"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"Zenghr"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:published_time","content":"2021-05-07T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"设计模式 - Overview\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-05-07T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Zenghr\\"}]}"]]},"headers":[{"level":2,"title":"为什么要使用设计模式？","slug":"为什么要使用设计模式","link":"#为什么要使用设计模式","children":[]},{"level":2,"title":"设计模式的七大原则","slug":"设计模式的七大原则","link":"#设计模式的七大原则","children":[]},{"level":2,"title":"23 种设计模式","slug":"_23-种设计模式","link":"#_23-种设计模式","children":[]},{"level":2,"title":"一、创建型模式","slug":"一、创建型模式","link":"#一、创建型模式","children":[]},{"level":2,"title":"二、结构型模式","slug":"二、结构型模式","link":"#二、结构型模式","children":[]},{"level":2,"title":"三、行为型模式","slug":"三、行为型模式","link":"#三、行为型模式","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{},"readingTime":{"minutes":2.69,"words":807},"filePathRelative":"dev-guide/design/00.设计模式-Overview.md","localizedDate":"2021年5月7日","excerpt":"<h1> 设计模式 - Overview</h1>\\n<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">提示</p>\\n<p>设计模式（Design Pattern）是前辈们对代码开发经验的总结，是解决特定问题的一系列套路。它不是语法规定，而是一套用来提高代码可复用性、可维护性、可读性、稳健性以及安全性的解决方案</p>\\n</div>\\n<h2> 为什么要使用设计模式？</h2>\\n<p>使用设计模式的最终目的是 <strong>\\"高内聚低耦合\\"</strong></p>\\n<ul>\\n<li>代码重用性：相同功能的代码，不多多次编写</li>\\n<li>代码可读性：编程规范性，便于其他程序员阅读</li>\\n<li>代码可扩展性：当增加新的功能后，对原来的功能没有影响</li>\\n</ul>","autoDesc":true}');export{e as data};
