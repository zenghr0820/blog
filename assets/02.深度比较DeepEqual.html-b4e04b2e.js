const n=JSON.parse('{"key":"v-d708c00a","path":"/golang/basic/02.%E6%B7%B1%E5%BA%A6%E6%AF%94%E8%BE%83DeepEqual.html","title":"深度比较-DeepEqual","lang":"zh-CN","frontmatter":{"title":"深度比较-DeepEqual","date":"2022-03-10T15:14:14.000Z","re":"2022-03-10-golang-reflect-deepEqual","category":["golang"],"description":"深度比较-DeepEqual 当我们复杂一个对象时，这个对象可以是内建数据类型，数组，结构体，map……我们在复制结构体的时候，当我们需要比较两个结构体中的数据是否相同时，我们需要使用深度比较，而不是只是简单地做浅度比较。这里需要使用到反射 reflect.DeepEqual() ，下面是几个示例 import ( \\"fmt\\" \\"reflect\\" ) type data struct { } func main() { v1 := data{} v2 := data{} fmt.Println(\\"v1 == v2:\\",reflect.DeepEqual(v1,v2)) //prints: v1 == v2: true m1 := map[string]string{\\"one\\": \\"a\\",\\"two\\": \\"b\\"} m2 := map[string]string{\\"two\\": \\"b\\", \\"one\\": \\"a\\"} fmt.Println(\\"m1 == m2:\\",reflect.DeepEqual(m1, m2)) //prints: m1 == m2: true s1 := []int{1, 2, 3} s2 := []int{1, 2, 3} fmt.Println(\\"s1 == s2:\\",reflect.DeepEqual(s1, s2)) //prints: s1 == s2: true }","permalink":"/golang/basic/2022-03-10-golang-reflect-deepEqual.html","head":[["meta",{"property":"og:url","content":"https://blog.zenghr.cn/golang/basic/2022-03-10-golang-reflect-deepEqual.html"}],["meta",{"property":"og:site_name","content":"Zenghr"}],["meta",{"property":"og:title","content":"深度比较-DeepEqual"}],["meta",{"property":"og:description","content":"深度比较-DeepEqual 当我们复杂一个对象时，这个对象可以是内建数据类型，数组，结构体，map……我们在复制结构体的时候，当我们需要比较两个结构体中的数据是否相同时，我们需要使用深度比较，而不是只是简单地做浅度比较。这里需要使用到反射 reflect.DeepEqual() ，下面是几个示例 import ( \\"fmt\\" \\"reflect\\" ) type data struct { } func main() { v1 := data{} v2 := data{} fmt.Println(\\"v1 == v2:\\",reflect.DeepEqual(v1,v2)) //prints: v1 == v2: true m1 := map[string]string{\\"one\\": \\"a\\",\\"two\\": \\"b\\"} m2 := map[string]string{\\"two\\": \\"b\\", \\"one\\": \\"a\\"} fmt.Println(\\"m1 == m2:\\",reflect.DeepEqual(m1, m2)) //prints: m1 == m2: true s1 := []int{1, 2, 3} s2 := []int{1, 2, 3} fmt.Println(\\"s1 == s2:\\",reflect.DeepEqual(s1, s2)) //prints: s1 == s2: true }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"Zenghr"}],["meta",{"property":"article:published_time","content":"2022-03-10T15:14:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"深度比较-DeepEqual\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-03-10T15:14:14.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Zenghr\\"}]}"]]},"headers":[{"level":2,"title":"深度比较-DeepEqual","slug":"深度比较-deepequal","link":"#深度比较-deepequal","children":[]}],"git":{},"readingTime":{"minutes":0.66,"words":197},"filePathRelative":"golang/basic/02.深度比较DeepEqual.md","localizedDate":"2022年3月10日","excerpt":"<h2> 深度比较-DeepEqual</h2>\\n<p>当我们复杂一个对象时，这个对象可以是内建数据类型，数组，结构体，map……我们在复制结构体的时候，当我们需要比较两个结构体中的数据是否相同时，我们需要使用深度比较，而不是只是简单地做浅度比较。这里需要使用到反射 <code>reflect.DeepEqual()</code> ，下面是几个示例</p>\\n<div class=\\"language-go line-numbers-mode\\" data-ext=\\"go\\"><pre class=\\"language-go\\"><code><span class=\\"token keyword\\">import</span> <span class=\\"token punctuation\\">(</span>\\n    <span class=\\"token string\\">\\"fmt\\"</span>\\n    <span class=\\"token string\\">\\"reflect\\"</span>\\n<span class=\\"token punctuation\\">)</span>\\n\\n<span class=\\"token keyword\\">type</span> data <span class=\\"token keyword\\">struct</span> <span class=\\"token punctuation\\">{</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">func</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n\\n    v1 <span class=\\"token operator\\">:=</span> data<span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>\\n    v2 <span class=\\"token operator\\">:=</span> data<span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>\\n    fmt<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"v1 == v2:\\"</span><span class=\\"token punctuation\\">,</span>reflect<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">DeepEqual</span><span class=\\"token punctuation\\">(</span>v1<span class=\\"token punctuation\\">,</span>v2<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token comment\\">//prints: v1 == v2: true</span>\\n\\n    m1 <span class=\\"token operator\\">:=</span> <span class=\\"token keyword\\">map</span><span class=\\"token punctuation\\">[</span><span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">]</span><span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">{</span><span class=\\"token string\\">\\"one\\"</span><span class=\\"token punctuation\\">:</span> <span class=\\"token string\\">\\"a\\"</span><span class=\\"token punctuation\\">,</span><span class=\\"token string\\">\\"two\\"</span><span class=\\"token punctuation\\">:</span> <span class=\\"token string\\">\\"b\\"</span><span class=\\"token punctuation\\">}</span>\\n    m2 <span class=\\"token operator\\">:=</span> <span class=\\"token keyword\\">map</span><span class=\\"token punctuation\\">[</span><span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">]</span><span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">{</span><span class=\\"token string\\">\\"two\\"</span><span class=\\"token punctuation\\">:</span> <span class=\\"token string\\">\\"b\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"one\\"</span><span class=\\"token punctuation\\">:</span> <span class=\\"token string\\">\\"a\\"</span><span class=\\"token punctuation\\">}</span>\\n    fmt<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"m1 == m2:\\"</span><span class=\\"token punctuation\\">,</span>reflect<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">DeepEqual</span><span class=\\"token punctuation\\">(</span>m1<span class=\\"token punctuation\\">,</span> m2<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token comment\\">//prints: m1 == m2: true</span>\\n\\n    s1 <span class=\\"token operator\\">:=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token builtin\\">int</span><span class=\\"token punctuation\\">{</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">3</span><span class=\\"token punctuation\\">}</span>\\n    s2 <span class=\\"token operator\\">:=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token builtin\\">int</span><span class=\\"token punctuation\\">{</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">3</span><span class=\\"token punctuation\\">}</span>\\n    fmt<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"s1 == s2:\\"</span><span class=\\"token punctuation\\">,</span>reflect<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">DeepEqual</span><span class=\\"token punctuation\\">(</span>s1<span class=\\"token punctuation\\">,</span> s2<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token comment\\">//prints: s1 == s2: true</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
