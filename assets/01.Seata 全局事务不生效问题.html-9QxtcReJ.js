import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as t,o as n}from"./app-BnToYpnS.js";const l={};function e(h,i){return n(),a("div",null,i[0]||(i[0]=[t(`<h1 id="seata-全局事务不生效问题" tabindex="-1"><a class="header-anchor" href="#seata-全局事务不生效问题"><span>Seata 全局事务不生效问题</span></a></h1><div class="hint-container tip"><p class="hint-container-title">提示</p><p>记录工作中遇到到 Seata 全局事务不回滚的问题</p></div><h2 id="开发环境" tabindex="-1"><a class="header-anchor" href="#开发环境"><span>开发环境</span></a></h2><ul><li><strong>Spring Boot</strong></li><li><strong>Seata</strong> 分布式事务解决方案</li></ul><h2 id="实际场景" tabindex="-1"><a class="header-anchor" href="#实际场景"><span>实际场景</span></a></h2><p>在工作中遇到需要调用其他服务接口，由于项目结构问题，没有使用其他的框架去调用接口，而是自己写 HTTP 请求接口调用</p><p>在事务发起方贴上注解 <strong>@GlobalTransactional</strong> 启动 Seata 全局事务，发生错误后事务回滚</p><p>但是在测试时发现出现异常时 被调用的服务并没有回滚事务</p><h2 id="问题解决" tabindex="-1"><a class="header-anchor" href="#问题解决"><span>问题解决</span></a></h2><p>通过查看日志发现被调用服务并没有启动全局事务，百思不得其解，一开始以为是因为配置了全局异常拦截器导致 Seata 并没有捕获到异常也就没有回滚事务，一顿折腾才发现不是这个原因</p><p>后面想到跨服务调用的事务传播是通过 传递事务 ID来开启的，那么会不会是事务 ID 没有传过来</p><blockquote><p>跨服务调用场景下的事务传播，本质上就是把 XID 通过服务调用传递到服务提供方，并绑定到 RootContext 中</p></blockquote><p>因为我是自己封装 HTTP 请求调用，所以只需要把 XID 放到请求中，那么事务就可以启动了</p><div class="language-java" data-highlighter="shiki" data-ext="java" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 添加事务 ID</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">headers</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">add</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">RootContext</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">KEY_XID</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">RootContext</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">getXID</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">());</span></span></code></pre></div><p>后面也是去了解了一下 <strong>SeataHandlerInterceptor</strong> 中的源码，就可以发现拦截器也是直接获取请求中的 XID，所以说理论上只要把事务 ID 提供出来，Seata 可以支持任意的微服务框架</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> SeataHandlerInterceptor</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> implements</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> HandlerInterceptor</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">	private</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> final</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> Logger</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> log </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> LoggerFactory</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">getLogger</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">SeataHandlerInterceptor</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">	@</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">	public</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> boolean</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> preHandle</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">HttpServletRequest</span><span style="--shiki-light:#E06C75;--shiki-light-font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> request</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">HttpServletResponse</span><span style="--shiki-light:#E06C75;--shiki-light-font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> response</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Object</span><span style="--shiki-light:#E06C75;--shiki-light-font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> handler</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">		</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">        String</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> xid</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> RootContext</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">getXID</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 这里获取 请求中事务 ID</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">		String</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> rpcXid</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> request</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">getHeader</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">RootContext</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">KEY_XID</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">		if</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">log</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">isDebugEnabled</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">()) {</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">			log</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">debug</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">&quot;xid in RootContext {} xid in RpcContext {}&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">, xid, rpcXid);</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">		if</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">StringUtils</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">isBlank</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(xid) </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">&amp;&amp;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> rpcXid </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">!=</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            // 如果事务ID为空 直接绑定</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">			RootContext</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">bind</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(rpcXid);</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">			if</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">log</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">isDebugEnabled</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">()) {</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">				log</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">debug</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">&quot;bind {} to RootContext&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">, rpcXid);</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">			}</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">		}</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">		return</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">	}</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,16)]))}const B=s(l,[["render",e]]),r=JSON.parse('{"path":"/Java/micro/01.Seata%20%E5%85%A8%E5%B1%80%E4%BA%8B%E5%8A%A1%E4%B8%8D%E7%94%9F%E6%95%88%E9%97%AE%E9%A2%98.html","title":"Seata 全局事务不生效问题","lang":"zh-CN","frontmatter":{"title":"Seata 全局事务不生效问题","date":"2022-03-19T10:00:00.000Z","re":"seata-transaction-error","star":true,"tag":["Java"],"category":["Java"],"description":"Seata 全局事务不生效问题 提示 记录工作中遇到到 Seata 全局事务不回滚的问题 开发环境 Spring Boot Seata 分布式事务解决方案 实际场景 在工作中遇到需要调用其他服务接口，由于项目结构问题，没有使用其他的框架去调用接口，而是自己写 HTTP 请求接口调用 在事务发起方贴上注解 @GlobalTransactional 启动 ...","permalink":"/Java/micro/seata-transaction-error.html","head":[["meta",{"property":"og:url","content":"https://blog.zenghr.cn/Java/micro/seata-transaction-error.html"}],["meta",{"property":"og:site_name","content":"Zenghr"}],["meta",{"property":"og:title","content":"Seata 全局事务不生效问题"}],["meta",{"property":"og:description","content":"Seata 全局事务不生效问题 提示 记录工作中遇到到 Seata 全局事务不回滚的问题 开发环境 Spring Boot Seata 分布式事务解决方案 实际场景 在工作中遇到需要调用其他服务接口，由于项目结构问题，没有使用其他的框架去调用接口，而是自己写 HTTP 请求接口调用 在事务发起方贴上注解 @GlobalTransactional 启动 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-06T19:24:24.000Z"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:published_time","content":"2022-03-19T10:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-05-06T19:24:24.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Seata 全局事务不生效问题\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-03-19T10:00:00.000Z\\",\\"dateModified\\":\\"2025-05-06T19:24:24.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Zenghr\\"}]}"]]},"git":{"createdTime":1746559464000,"updatedTime":1746559464000,"contributors":[{"name":"zenghr","username":"zenghr","email":"zenghr","commits":1,"url":"https://github.com/zenghr"}]},"readingTime":{"minutes":1.77,"words":531},"filePathRelative":"Java/micro/01.Seata 全局事务不生效问题.md","localizedDate":"2022年3月19日","excerpt":"\\n<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">提示</p>\\n<p>记录工作中遇到到 Seata 全局事务不回滚的问题</p>\\n</div>\\n<h2>开发环境</h2>\\n<ul>\\n<li><strong>Spring Boot</strong></li>\\n<li><strong>Seata</strong> 分布式事务解决方案</li>\\n</ul>\\n<h2>实际场景</h2>\\n<p>在工作中遇到需要调用其他服务接口，由于项目结构问题，没有使用其他的框架去调用接口，而是自己写 HTTP 请求接口调用</p>\\n<p>在事务发起方贴上注解 <strong>@GlobalTransactional</strong> 启动 Seata 全局事务，发生错误后事务回滚</p>","autoDesc":true}');export{B as comp,r as data};
