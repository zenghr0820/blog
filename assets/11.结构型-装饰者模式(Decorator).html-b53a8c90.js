import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o as c,c as l,d as n,e as a,b as s,w as i,a as r}from"./app-d7df2002.js";const u={},d=r(`<h1 id="装饰-decorator" tabindex="-1"><a class="header-anchor" href="#装饰-decorator" aria-hidden="true">#</a> 装饰(Decorator)</h1><div class="hint-container tip"><p class="hint-container-title">提示</p><p>指在不改变现有对象结构的情况下，动态地给该对象增加一些职责（即增加其额外功能）的模式</p></div><h2 id="装饰器模式介绍" tabindex="-1"><a class="header-anchor" href="#装饰器模式介绍" aria-hidden="true">#</a> 装饰器模式介绍</h2><p>装饰器器的核心就是在 <strong>不改变原有类</strong> 的基础上给类新增功能</p><p>通常情况下，扩展一个类的功能会使用继承方式来实现。但继承具有静态特征，耦合度高，并且随着扩展功能的增多，子类会过多等问题。但是使用装饰器模式会是另外一种思路更为灵活，可以避免继承导致的子类过多</p><h2 id="装饰器的结构" tabindex="-1"><a class="header-anchor" href="#装饰器的结构" aria-hidden="true">#</a> 装饰器的结构</h2><p>装饰器器主要解决的是直接继承下因功能的不断横向扩展导致子类膨胀的问题，而使用装饰器模式后就会比直接继承显得更加灵活同时这样也就不再需要考虑子类的维护。</p><p>这种设计模式创建了一个装饰类，用来包装原有的类，并在保持类方法签名完整性的前提下，提供了额外的功能</p><p>装饰器模式主要包含以下角色：</p><ol><li>抽象构件（Component）角色：定义一个 抽象接口 以规范准备接收附加责任的对象。</li><li>具体构件（ConcreteComponent）角色：实现抽象构件，通过装饰角色为其添加一些职责。</li><li>抽象装饰（Decorator）角色：继承抽象构件，并包含具体构件的实例，可以通过其子类扩展具体构件的功能。</li><li>具体装饰（ConcreteDecorator）角色：实现抽象装饰的相关方法，并给具体构件对象添加附加的责任。</li></ol><figure><img src="https://media.zenghr.cn/blog/img/20210507/44cmIa2m9SQd.png?imageslim" alt="mark" tabindex="0" loading="lazy"><figcaption>mark</figcaption></figure><h2 id="装饰器的案例模拟" tabindex="-1"><a class="header-anchor" href="#装饰器的案例模拟" aria-hidden="true">#</a> 装饰器的案例模拟</h2><p>奶茶店中有各种各样的奶茶，珍珠奶茶、蓝莓奶茶，用户在购买时，店员会问是否要加 布丁、加糖、珍珠等配料，不同的奶茶配不同的材料，价格也不一致，使用装饰器模式设计实现。</p><p><strong>定义抽象构件角色（Component）- 奶茶（MilkTea）</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MilkTea</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 获取最终价格
     *
     * <span class="token keyword">@return</span> 返回价格
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">double</span> <span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>定义具体构件（ConcreteComponent）角色 - 珍珠奶茶(PearlTea)</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 珍珠奶茶</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PearlTea</span> <span class="token keyword">implements</span> <span class="token class-name">MilkTea</span><span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">20.0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>蓝莓奶茶(BlueberryTea)</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BlueberryTea</span> <span class="token keyword">implements</span> <span class="token class-name">MilkTea</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">10.0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>定义抽象装饰（Decorator）角色 - 配料(Decorator)</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">BatchingDecorator</span> <span class="token keyword">implements</span> <span class="token class-name">MilkTea</span> <span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token class-name">MilkTea</span> milkTea<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>具体装饰者 - 布丁(Pudding)</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PuddingDecorator</span> <span class="token keyword">extends</span> <span class="token class-name">BatchingDecorator</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">PuddingDecorator</span><span class="token punctuation">(</span><span class="token class-name">MilkTea</span> milkTea<span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token keyword">this</span><span class="token punctuation">.</span>milkTea <span class="token operator">=</span> milkTea<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">5.0</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>milkTea<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>具体装饰者 - 糖(Sugar)</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SugarDecorator</span> <span class="token keyword">extends</span> <span class="token class-name">BatchingDecorator</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token class-name">SugarDecorator</span><span class="token punctuation">(</span><span class="token class-name">MilkTea</span> milkTea<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>milkTea <span class="token operator">=</span> milkTea<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">3.0</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>milkTea<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>演示案例</strong></p><p>我们去奶茶店买一杯蓝莓奶茶，加糖+加布丁，请问需要多少钱？</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DecoratorExample</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 蓝莓奶茶</span>
        <span class="token class-name">MilkTea</span> milkTea <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BlueberryTea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 布丁 包装类</span>
        milkTea <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PuddingDecorator</span><span class="token punctuation">(</span>milkTea<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 加糖 包装类</span>
        milkTea <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SugarDecorator</span><span class="token punctuation">(</span>milkTea<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 总价格 蓝莓10.0 + 布丁5.0 + 糖3.0 = 18.0</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>milkTea<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="装饰器模式的应用场景" tabindex="-1"><a class="header-anchor" href="#装饰器模式的应用场景" aria-hidden="true">#</a> 装饰器模式的应用场景</h2><p>装饰器模式通常在以下几种情况使用</p><ul><li>当需要给一个现有类添加附加职责，而又不能采用生成子类的方法进行扩充时。例如，该类被隐藏或者该类是终极类或者采用继承方式会产生大量的子类。</li><li>当需要通过对现有的一组基本功能进行排列组合而产生非常多的功能时，采用继承关系很难实现，而采用装饰器模式却很好实现。</li><li>当对象的功能要求可以动态地添加，也可以再动态地撤销时。</li></ul><p>装饰器模式在 Java 中的最著名的应用莫过于 Java I/O 标准库的设计了。例如：</p><ul><li>InputStream 的子类 FilterInputStream</li><li>OutputStream 的子类 FilterOutputStream</li><li>Reader 的子类 BufferedReader 以及 FilterReader</li><li>还有 Writer 的子类 BufferedWriter、FilterWriter 以及 PrintWriter 等，它们都是抽象装饰类</li></ul>`,33),k=n("h2",{id:"参考资料",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#参考资料","aria-hidden":"true"},"#"),a(" 参考资料")],-1),v={href:"https://www.pdai.tech/md/dev-spec/pattern/12_decorator.html",target:"_blank",rel:"noopener noreferrer"},m={href:"http://c.biancheng.net/view/1366.html",target:"_blank",rel:"noopener noreferrer"};function b(g,h){const p=t("RouterLink"),e=t("ExternalLinkIcon");return c(),l("div",null,[d,n("p",null,[a("如需了解 I/O 类中的装饰器模式，请看👉 "),s(p,{to:"/passages/2021-05-06-java-io-decorator-pattern.html"},{default:i(()=>[a("Java - I/O 装饰器模式")]),_:1})]),k,n("p",null,[n("a",v,[a("结构型 - 装饰(Decorator) - Java 全栈知识体系"),s(e)])]),n("p",null,[n("a",m,[a("装饰器模式详解 - C语言中文网"),s(e)])])])}const _=o(u,[["render",b],["__file","11.结构型-装饰者模式(Decorator).html.vue"]]);export{_ as default};
