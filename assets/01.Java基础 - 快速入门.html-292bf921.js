import{_ as c,r as p,o as l,c as i,d as n,b as a,w as e,e as s,a as u}from"./app-63d4d840.js";const r={},d=n("h1",{id:"java基础-基础知识",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#java基础-基础知识","aria-hidden":"true"},"#"),s(" Java基础 - 基础知识")],-1),k=n("div",{class:"hint-container tip"},[n("p",{class:"hint-container-title"},"提示"),n("p",null,"本文对 Java 基础知识做一个总结，如有总结有错误请提出问题，我好改进。")],-1),v={class:"table-of-contents"},m=u(`<h2 id="java简介" tabindex="-1"><a class="header-anchor" href="#java简介" aria-hidden="true">#</a> Java简介</h2><h3 id="什么是编程" tabindex="-1"><a class="header-anchor" href="#什么是编程" aria-hidden="true">#</a> 什么是编程</h3><p>开始学习Java语言之前，我们先了解一下 <strong>计算机编程</strong> 是什么以及 <strong>Java 语言</strong></p><p>计算机语言是为了实现人与计算机通讯的，为了让计算机实现现实人为比较复杂的工作。</p><p>我们把解决问题的步骤告诉计算机一步一步去做，把这个过程叫做编程。</p><h3 id="java语言" tabindex="-1"><a class="header-anchor" href="#java语言" aria-hidden="true">#</a> Java语言</h3><p>Java诞生于<strong>1995</strong>年，原属于SUN公司，2009年4月20日，美国数据软件巨头甲骨文公司（<strong>Oracle</strong>）<br> 宣布以74亿美元收购SUN公司</p><h3 id="跨平台原理" tabindex="-1"><a class="header-anchor" href="#跨平台原理" aria-hidden="true">#</a> 跨平台原理</h3><blockquote><p>Window 系统只能执行 Window 程序(exe)，Linux 系统只能执行 Linux 系统程序，Mac 系统只能执行 Mac程序，所以一个程序想要在多个平台执行，就有了如下两个跨平台方式</p></blockquote><h4 id="_1、多次编译-到处运行" tabindex="-1"><a class="header-anchor" href="#_1、多次编译-到处运行" aria-hidden="true">#</a> 1、多次编译，到处运行</h4><div class="hint-container tip"><p class="hint-container-title">提示</p><p>每个系统都有一个编译器，使用特定的编译器所编译的程序只能在对应的平台运行，所以每个平台编译一次就实现多次编译，到处运行</p></div><figure><img src="https://media.zenghr.cn/blog/img/20210409212517.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_2、一次编译-到处运行" tabindex="-1"><a class="header-anchor" href="#_2、一次编译-到处运行" aria-hidden="true">#</a> 2、一次编译，到处运行</h4><div class="hint-container tip"><p class="hint-container-title">提示</p><p>Java 所实现的跨平台方式就是，<strong>一次编译，到处运行</strong>，实现原理：Java语言对 Java程序进行了编译操作，编译后生产和平台无关的 - 字节码文件。这个文件 Window、Linux、Mac等系统是不能直接运行的，该文件只能被 JVM 识别运行，JVM 是Java的虚拟机，所以我们想要在哪个系统上运行 Java 程序，就要在哪个系统上安装相应的 Java虚拟机，由虚拟机执行 Java程序，这就是实现了 Java 的跨平台</p></div><figure><img src="https://media.zenghr.cn/blog/img/20210409212615.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="总结java-跨平台原因" tabindex="-1"><a class="header-anchor" href="#总结java-跨平台原因" aria-hidden="true">#</a> 总结Java 跨平台原因:</h4><ul><li>Java文件经过编译后生成和平台无关的 class 文件</li><li>Java虚拟机是不跨平台</li></ul><h3 id="jdk" tabindex="-1"><a class="header-anchor" href="#jdk" aria-hidden="true">#</a> JDK</h3><ul><li><strong>JDK(Java Development Kit):</strong> Java开发工具，包含开发 Java 程序的所有工具，如：<strong>java</strong>，<strong>javac</strong>等，JDK 包含 JRE，所以安装了 JDK 就不用安装 JRE了</li><li><strong>JRE(Java Runtime Environment):</strong> Java 运行环境，JRE 包含 <strong>Java常用的类库</strong>以及<strong>JVM</strong>，一般在只运行程序不需要开发程序的服务器中安装</li><li><strong>JVM(Java Virtual Machine):</strong> Java虚拟机，它是运行所有Java程序的虚拟计算机，JVM不夸平台。</li></ul><h2 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型" aria-hidden="true">#</a> 数据类型</h2><p><strong>八大基本类型:</strong></p><ul><li>boolean/1(bit)</li><li>byte/8</li><li>char/16</li><li>short/16</li><li>int/32</li><li>long/64</li><li>float/32</li><li>double/64</li></ul><h3 id="基本数据类型转换" tabindex="-1"><a class="header-anchor" href="#基本数据类型转换" aria-hidden="true">#</a> 基本数据类型转换</h3><ul><li><strong>自动类型转换：</strong> 隐式类型转换，<code>范围小的数据类型</code> 直接转换为 <code>范围大的数据类型</code></li><li><strong>强制类型转换：</strong> 显示类型转换，<code>范围大的数据类型</code> 直接转换为 <code>范围小的数据类型</code></li><li><strong>自动类型提升：</strong> 在表达式中，最终的结果类型，将会转换为表达式中类型最高的类型</li></ul><h3 id="包装类" tabindex="-1"><a class="header-anchor" href="#包装类" aria-hidden="true">#</a> 包装类</h3><div class="hint-container tip"><p class="hint-container-title">提示</p><p><strong>包装类</strong>就是把基本数据类型封装到一个类中，提供便利的方法，更好的操作基本类型</p></div><p><strong>Integer包装类</strong></p><p><strong>Integer</strong> 内部封装了一个 int 类型的基本数据类型 value，并提供方法对 int 值进行操作，还提供 <strong>String</strong> 与 <strong>int</strong> 之间的转换</p><p><strong>装箱和拆箱概念</strong></p><ul><li>装箱：将基本数据类型转成包装类的过程</li><li>拆箱：将包装类转成基本数据类型的过程</li></ul><p><strong>自动装箱和自动拆箱</strong></p><ul><li>自动装箱：将基本数据类型直接赋值给包装类的过程</li><li>自动拆箱：将包装类直接赋值给基本数据类型的过程</li></ul><h3 id="缓存池" tabindex="-1"><a class="header-anchor" href="#缓存池" aria-hidden="true">#</a> 缓存池</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 缓存池分析</span>
<span class="token class-name">Integer</span> i5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Integer</span> i6 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i5 <span class="token operator">==</span> i6<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>

<span class="token class-name">Integer</span> i7 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Integer</span> i8 <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i7 <span class="token operator">==</span> i8<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>

<span class="token class-name">Integer</span> i9 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Integer</span> i10 <span class="token operator">=</span> <span class="token number">400</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i9 <span class="token operator">==</span> i10<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>new Integer(20)</strong> 与 <strong>Integer.valueOf(20)</strong> 的区别：</p><ul><li><p>new Integer(20) 每次都会新建一个对象</p></li><li><p>Integer.valueOf(20) 会使用缓存中的对象，多次调用会引用同一对象</p></li></ul><p><strong>valueOf</strong> 方法的实现比较简单，先判断值是否在缓存中，存在就使用缓存中的值，不存在就直接 new 新建一个对象</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Integer</span> <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> <span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>low <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;=</span> <span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>high<span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>cache<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>low<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Integer 缓存池中默认大小为 【-128，127】</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">IntegerCache</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> low <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">128</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> high<span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Integer</span> cache<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">static</span> <span class="token punctuation">{</span>
        <span class="token comment">// high value may be configured by property</span>
        <span class="token keyword">int</span> h <span class="token operator">=</span> <span class="token number">127</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> integerCacheHighPropValue <span class="token operator">=</span>
            sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span><span class="token constant">VM</span><span class="token punctuation">.</span><span class="token function">getSavedProperty</span><span class="token punctuation">(</span><span class="token string">&quot;java.lang.Integer.IntegerCache.high&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>integerCacheHighPropValue <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>integerCacheHighPropValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
                i <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// Maximum array size is Integer.MAX_VALUE</span>
                h <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token operator">-</span>low<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span> <span class="token class-name">NumberFormatException</span> nfe<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// If the property cannot be parsed into an int, ignore it.</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        high <span class="token operator">=</span> h<span class="token punctuation">;</span>

        cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">(</span>high <span class="token operator">-</span> low<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> j <span class="token operator">=</span> low<span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> cache<span class="token punctuation">.</span>length<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>
            cache<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// range [-128, 127] must be interned (JLS7 5.1.7)</span>
        <span class="token keyword">assert</span> <span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>high <span class="token operator">&gt;=</span> <span class="token number">127</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">IntegerCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编译器会<strong>在缓冲池范围内的基本类型</strong>自动装箱过程调用 valueOf() 方法，因此多个 Integer 实例使用自动装箱来创建并且值相同，那么就会引用相同的对象。</p><p>基本类型对应的缓冲池如下:</p><ul><li>boolean values true and false</li><li>all byte values</li><li>short values between -128 and 127</li><li>int values between -128 and 127</li><li>char in the range \\u0000 to \\u007F</li></ul><p>在使用这些基本类型对应的包装类型时，就可以直接使用缓冲池中的对象。</p><h3 id="运算符" tabindex="-1"><a class="header-anchor" href="#运算符" aria-hidden="true">#</a> 运算符</h3><p><strong>&amp; 和 &amp;&amp; 的区别</strong></p><p><strong>&amp;：</strong> 与符号，无论 <strong>&amp;</strong> 左边表达式是否为 真， <strong>&amp;</strong> 右边都参与运算</p><p><strong>&amp;&amp;：</strong> 短路与，如果 <strong>&amp;&amp;</strong> 左边表达式为 真，那么 <strong>&amp;&amp;</strong> 右边不参与运算</p><h2 id="jvm内存模型" tabindex="-1"><a class="header-anchor" href="#jvm内存模型" aria-hidden="true">#</a> JVM内存模型</h2><figure><img src="https://media.zenghr.cn/blog/img/20210411/Agn0h5iaux1K.jpg?imageslim" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>JVM 内存结构大概分为：</p><p><strong>方法区(Method Area)</strong></p><ul><li>介绍：<strong>线程共享</strong>的内存区域，用于存储 类信息、常量、静态变量等</li><li>控制参数：<strong>-XX:PermSize</strong> 设置堆的最小空间。<strong>-XX:MaxPermSize</strong> 设置堆的最大空间</li><li>异常：当方法区无法满足内存分配需求时，将会抛出 <strong>OutOfMemoryError</strong> 异常</li></ul><p><strong>堆(Heap)</strong></p><ul><li>介绍：<strong>线程共享</strong>的内存区域，所有的<code>对象实例</code>以及<code>数组</code>都要在堆中分配空间，堆由 <strong>GC</strong> 负责回收管理</li><li>控制参数：<strong>-Xms</strong> 设置堆的最小空间。<strong>-Xmx</strong> 设置堆的最大空间</li><li>异常：如果在堆中没有足够的空间完成实例分配，将会抛出 <strong>OutOfMemoryError</strong> 异常</li></ul><p><strong>虚拟机栈(JVM Stack)</strong></p><ul><li>介绍：<strong>线程私有</strong>的内存区域，也称为 <strong>方法栈区</strong>，当方法执行时，就会创建一个当前方法的 <strong>栈帧(Stack Frame)</strong>，用于存储 <strong>局部变量</strong>、操作数栈、动态链接等信息。每个方法执行结束时，就会清除该栈帧，方法调用执行至结束的过程，称之为<strong>栈帧</strong>的入栈到出栈过程。</li><li>控制参数：<strong>-Xss</strong> 控制每个线程栈的大小</li><li>异常：线程请求的栈深度大于虚拟机所允许的深度时抛出 <strong>StackOverflowError</strong>。 虚拟机栈可以动态扩展，当扩展时无法申请到足够的内存时会抛出 <strong>OutOfMemoryError</strong></li></ul><p><strong>本地方法栈(Native Method Stack)</strong></p><ul><li>介绍：和虚拟机栈作用相似</li><li>区别：本地方法栈是为虚拟机使用 <strong>本地方法</strong> 服务的</li></ul><p><strong>程序计数器</strong></p><ul><li>介绍：当前线程所执行的行号指示器</li></ul><h2 id="数组类型" tabindex="-1"><a class="header-anchor" href="#数组类型" aria-hidden="true">#</a> 数组类型</h2><h3 id="数组的定义" tabindex="-1"><a class="header-anchor" href="#数组的定义" aria-hidden="true">#</a> 数组的定义</h3><div class="hint-container tip"><p class="hint-container-title">提示</p><p>用来表示一组相同类型的变量，数组是 <strong>引用类型</strong>，访问元素 索引超出范围会引发 <strong>越界异常错误</strong></p></div><h3 id="静态初始化" tabindex="-1"><a class="header-anchor" href="#静态初始化" aria-hidden="true">#</a> 静态初始化</h3><p>定义数组的语法：<strong>数据类型[] 变量名 = new 数据类型[]{数据1, 数据二};</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 定义 int 类型的数组</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>操作数组的方法：操作数组元素都是使用 <strong>索引</strong> 来操作，第一个索引都是 <strong>0</strong> 开始</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 访问数组元素</span>
array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>
<span class="token comment">// 修改数组元素</span>
array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>
<span class="token comment">// 获取数组长度使用 length</span>
array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token comment">// 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>语法糖初始化：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 定义 int 类型的数组</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="动态初始化" tabindex="-1"><a class="header-anchor" href="#动态初始化" aria-hidden="true">#</a> 动态初始化</h3><p>动态定义数组的语法：<strong>数据类型[] 变量名 = new 数据类型[数组长度];</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 定义 int 类型的数组</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// 动态设置元素</span>
array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数组初始化内存图分析" tabindex="-1"><a class="header-anchor" href="#数组初始化内存图分析" aria-hidden="true">#</a> 数组初始化内存图分析</h3><p><strong>静态初始化内存分析：</strong></p><p>​ 先在 <strong>栈空间(Stack)</strong> 创建 array 空间，用于存储 引用数组的 <strong>内存地址</strong>，<code>new int[]{1,2,3}</code> <strong>new</strong> 关键字 在 <strong>堆空间(Heap)</strong> 分配空间 ，将空间的地址赋值给 array 变量，分析图如下：</p><img src="https://media.zenghr.cn/blog/img/20210411/0SoYEzXc6UA6.png?imageslim" alt="mark" style="zoom:67%;"><p><strong>数组长度无法改变：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">;</span>
array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>array<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>
array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>array<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如下所示，array 只是储存的内存地址改变了，数组本身的长度怕没有改变，指向的是新的数组<br><img src="https://media.zenghr.cn/blog/img/20210411/J39jE4hMmyzy.png?imageslim" alt="mark" style="zoom:67%;"></p><p><strong>String类型的数组</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;A&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;B&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;C&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;D&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// todo：并没有改变&quot;A&quot;本身，只是 array[0] 指向了 &quot;D&quot; 所在的内存地址</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数组特点" tabindex="-1"><a class="header-anchor" href="#数组特点" aria-hidden="true">#</a> 数组特点</h3><ul><li>数组必须初始化才能使用，并且索引下标不能超过，否则会报错</li><li>数组所有元素初始化为默认值，整型为 0，浮点类型是 0.0，布尔型是 false</li><li>数组一旦创建长度无法改变</li><li>对于储存的是引用类型时，改变元素时怕没有改变原来的数据，只是改变元素引用的值</li></ul><h2 id="object-常用方法" tabindex="-1"><a class="header-anchor" href="#object-常用方法" aria-hidden="true">#</a> Object 常用方法</h2><div class="hint-container tip"><p class="hint-container-title">提示</p><p>Object 类 是在 <strong>java.lang</strong> 包中，所有类都是继承于 Object，称之为 <strong>超类</strong></p></div><h3 id="方法摘要" tabindex="-1"><a class="header-anchor" href="#方法摘要" aria-hidden="true">#</a> 方法摘要</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Object</span> <span class="token punctuation">{</span>
    <span class="token comment">// 创建并返回此对象的一个副本。</span>
    <span class="token keyword">protected</span> <span class="token keyword">native</span> <span class="token class-name">Object</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CloneNotSupportedException</span><span class="token punctuation">;</span>
    <span class="token comment">// 指示其他某个对象是否与此对象“相等”。</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 当垃圾回收器确定不存在对该对象的更多引用时，由对象的垃圾回收器调用此方法。</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span><span class="token punctuation">;</span>
    <span class="token comment">// 返回此 Object 的运行时类。</span>
    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 返回该对象的哈希码值</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 返回该对象的字符串表示</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 唤醒在此对象监视器上等待的单个线程</span>
    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 唤醒在此对象监视器上等待的所有线程</span>
    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 导致当前线程等待</span>
    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">;</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="tostring" tabindex="-1"><a class="header-anchor" href="#tostring" aria-hidden="true">#</a> toString()</h3><p>默认返回格式为：<strong>Cat@4554617c</strong> , @ 前面的是该类运行时的类，后面的是该对象的 哈希码。</p><p>当我们输出打印类的实例对象时，默认会调用 <strong>toString()</strong> 方法输出</p><h4 id="源码分析" tabindex="-1"><a class="header-anchor" href="#源码分析" aria-hidden="true">#</a> 源码分析</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// getClass() 是 Object 的方法，返回运行时类</span>
<span class="token comment">// hashCode() 是 Object 的方法，返回对象的哈希码值</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;@&quot;</span> <span class="token operator">+</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="演示" tabindex="-1"><a class="header-anchor" href="#演示" aria-hidden="true">#</a> 演示</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Cat</span> cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">&quot;招财猫&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cat<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// </span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="equals" tabindex="-1"><a class="header-anchor" href="#equals" aria-hidden="true">#</a> equals()</h3><p><strong>equals</strong> 用于比较其他某个对象是否与此对象“相等”。</p><h4 id="源码分析-1" tabindex="-1"><a class="header-anchor" href="#源码分析-1" aria-hidden="true">#</a> 源码分析</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Object</strong> 实现 <strong>equals</strong> 的方式是用 <strong>==</strong> 比较符，比较两个对象的内存地址是否一致或者是 <strong>哈希码值</strong> 是否一致</p><h4 id="equals-与-的区别" tabindex="-1"><a class="header-anchor" href="#equals-与-的区别" aria-hidden="true">#</a> equals 与 == 的区别：</h4><ul><li><strong>==</strong> 判断两个 <strong><code>值</code></strong> 是否相等，<strong>equals</strong> 判断两个对象是否等价</li><li>对于基本数据类型，使用 <strong>==</strong> 判断两个变量的值是否相等，基本数据类型没用 <strong>equals</strong> 方法</li><li>对于引用数据类型，使用 <strong>==</strong> 判断两个对象的引用地址是否相等，使用 <strong>equals</strong> 判断两个对象是否等价</li></ul><p>所以 Object 源码中比较的是<strong>对象的引用地址</strong>，一般该方式不能满足我们的比较需求，需要重写该方法，重写 <strong>equals</strong> 方法时，我们一般也要重写 Object 的 <strong>hashCode</strong> 方法</p><h4 id="演示-1" tabindex="-1"><a class="header-anchor" href="#演示-1" aria-hidden="true">#</a> 演示</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// 重写 equals，当Cat中 name相等，两个cat对象就是等价的</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> o<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> o<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token class-name">Cat</span> cat <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Cat</span><span class="token punctuation">)</span> o<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> cat<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="hashcode" tabindex="-1"><a class="header-anchor" href="#hashcode" aria-hidden="true">#</a> hashCode()</h3><p><strong>hashCode()</strong> 方法返回 <strong>哈希码值</strong>，<strong>equals()</strong> 是用来判断两个对象是否等价。等价的两个对象的 <strong>哈希码值</strong> 一定相等，但是 哈希码值 相同的两个对象不一定等价。</p><p>所以我们重写 <strong>equals</strong> 方法时，总是一起重写 <strong>hashCode</strong> 方法，保证等价的两个对象的哈希码值也相等。</p><p>如果我们只重写了 <strong>equals</strong> 方法，没有重写 <strong>hashCode</strong> 方法，那么我们新建两个 Cat 对象，存储到 <strong>HashSet</strong> 集合中，我们希望 Cat 的 name 一致，只在集合中添加一个对象，因为没有实现 <strong>hashCode</strong> 方法，所以集合添加了两个对象</p><h4 id="演示代码" tabindex="-1"><a class="header-anchor" href="#演示代码" aria-hidden="true">#</a> 演示代码</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 重写 equals，当Cat中 name相等，两个cat对象就是等价的</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> o<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> o<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token class-name">Cat</span> cat <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Cat</span><span class="token punctuation">)</span> o<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> cat<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Cat</span> c1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">&quot;招财猫&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Cat</span> c2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">&quot;招财猫&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Cat</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2 </span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="clone" tabindex="-1"><a class="header-anchor" href="#clone" aria-hidden="true">#</a> clone()</h3><h4 id="_1-cloneable" tabindex="-1"><a class="header-anchor" href="#_1-cloneable" aria-hidden="true">#</a> 1. cloneable</h4><p>clone() 是 Object 的 protected 方法，它不是 public，一个类不显式去重写 clone()，其它类就不能直接去调用该类实例的 clone() 方法。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Cat</span> c1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">&quot;招财猫&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// c1 c2 = c1.clone(); // &#39;clone()&#39; has protected access in &#39;java.lang.Object&#39;</span>
<span class="token comment">// 会报错提示 这个方法是被保护的</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们必须重写 <strong>clone()</strong> 方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">protected</span> <span class="token class-name">Cat</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CloneNotSupportedException</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">Cat</span><span class="token punctuation">)</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Cat</span> cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token class-name">Cat</span> c2 <span class="token operator">=</span> cat<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">CloneNotSupportedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// java.lang.CloneNotSupportedException</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是调用 重写后的 clone 方法，会抛出 <strong>CloneNotSupportedException</strong> 异常，这是因为 Cat 类没有实现 <strong>Cloneable</strong> 接口。</p><p>clone() 并不是 <strong>Cloneable</strong> 接口定义的方法，<strong>Cloneable</strong> 只是规范，一个类重写了<strong>clone()</strong> 方法，没有实现 <strong>Cloneable</strong> 接口又调用了 clone()，就会抛出异常</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">implements</span> <span class="token class-name">Cloneable</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token class-name">Cat</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CloneNotSupportedException</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">Cat</span><span class="token punctuation">)</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-浅拷贝" tabindex="-1"><a class="header-anchor" href="#_2-浅拷贝" aria-hidden="true">#</a> 2. 浅拷贝</h4><p><strong>浅拷贝的概念以及特性：</strong></p><ul><li>对于<strong>基本数据类型</strong>的成员变量，浅拷贝会直接该成员变量的 <strong>值</strong> 复制一份给新的对象，所以是两份新的不同数据，修改其中一个变量的值，并不会改变另一个变量的值</li><li>对于<strong>引用数据类型</strong>的成员变量，浅拷贝会直接将该变量保存的 <strong>内存地址</strong> 复制一份给新的对象，比如类中有数组成员变量，那么就会将该变量存储的数组地址，给新的对象，所以两个对象的成员变量引用的都是同一个实例，修改其中一个变量的值，另一个变量的值也会跟着改变</li></ul><p><strong>浅拷贝实现</strong></p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>Object中的 clone 方法是浅拷贝</p></div><h4 id="_3-深拷贝" tabindex="-1"><a class="header-anchor" href="#_3-深拷贝" aria-hidden="true">#</a> 3. 深拷贝</h4><p><strong>深拷贝的概念以及特性：</strong></p><ul><li>对于<strong>基本数据类型</strong>的成员变量，和浅拷贝一样</li><li>对于<strong>引用数据类型</strong>的成员变量，需要复制每一个 引用类型的成员变量所 <strong>引用的对象</strong>，就是递归拷贝，直到全部复制，总的来说就是，<strong>对象进行深拷贝要对整个对象图进行拷贝！</strong></li></ul><h4 id="_4-重写-clone-的规则" tabindex="-1"><a class="header-anchor" href="#_4-重写-clone-的规则" aria-hidden="true">#</a> 4. 重写 clone() 的规则</h4><p>由于浅拷贝并不能保证clone出的对象和原对象完全独立，所以在很多时候会导致这样那样的问题，子类覆盖clone一般都是实现<strong>深拷贝</strong>。</p><ul><li>首先调用父类super.clone方法（父类必须实现clone方法），这个方法最终会调用Object中的clone方法完成浅拷贝。</li><li>对类中的引用类型进行单独拷贝。</li><li>检查clone中是否有不完全拷贝，进行额外的复制。</li></ul><h4 id="_5-clone-的代替方案" tabindex="-1"><a class="header-anchor" href="#_5-clone-的代替方案" aria-hidden="true">#</a> 5. clone() 的代替方案</h4><p>使用 clone() 方法来拷贝一个对象即复杂又有风险，它会抛出异常，并且还需要类型转换。Effective Java 书上讲到，最好不要去使用 clone()。</p><p>代替方案：</p><ul><li>拷贝构造函数</li><li>拷贝工厂</li><li><strong>通过对象序列化实现深拷贝</strong></li></ul><h2 id="关键字" tabindex="-1"><a class="header-anchor" href="#关键字" aria-hidden="true">#</a> 关键字</h2><h3 id="this" tabindex="-1"><a class="header-anchor" href="#this" aria-hidden="true">#</a> this</h3><div class="hint-container tip"><p class="hint-container-title">提示</p><p><strong>this</strong> 关键字表示 当前对象本身，可以调用对象的成员变量、成员方法，解决<strong>变量同名引起的二义性</strong>；可以在构造器中调用本类其他的构造器，但是必须是在第一句代码</p></div><h4 id="内存图" tabindex="-1"><a class="header-anchor" href="#内存图" aria-hidden="true">#</a> 内存图</h4><figure><img src="https://media.zenghr.cn/blog/img/20210415/E9SJn0uLMUGq.png?imageslim" alt="mark" tabindex="0" loading="lazy"><figcaption>mark</figcaption></figure><h3 id="super" tabindex="-1"><a class="header-anchor" href="#super" aria-hidden="true">#</a> super</h3><ul><li><strong>super</strong> 关键字表示 当前父类，子类要访问父类成员时一定使用super，调用父类的成员变量、成员方法</li><li><strong>super</strong>只是一个关键字，内部没有引用（地址）</li><li><strong>super</strong> 调用构造方法必须写在子类构造方法的第一句</li><li>如果子类构造方法没有显式调用父类构造方法时，那么jvm会默认调用父类的无参构造super()</li></ul><h3 id="static" tabindex="-1"><a class="header-anchor" href="#static" aria-hidden="true">#</a> static</h3><h4 id="_1-静态变量" tabindex="-1"><a class="header-anchor" href="#_1-静态变量" aria-hidden="true">#</a> 1. 静态变量</h4><ul><li>静态变量：又称为类变量，被 <strong>static</strong> 修饰的变量属于 类，类的所有实例对象都共享该变量，可以直接通过类名访问它；静态变量在内存中只存在一份</li><li>实例变量：每创建一个实例化对象就会产生一个实例变量，实例对象销毁，变量也销毁。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StaticDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> num<span class="token punctuation">;</span> <span class="token comment">// 实例变量</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span> <span class="token comment">// 静态变量</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Non-static field &#39;num&#39; cannot be referenced from a static context</span>
    <span class="token comment">// int num = StaticDemo.num;  </span>
    <span class="token class-name">StaticDemo</span> staticDemo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StaticDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> num <span class="token operator">=</span> staticDemo<span class="token punctuation">.</span>num<span class="token punctuation">;</span>
    <span class="token keyword">int</span> age <span class="token operator">=</span> staticDemo<span class="token punctuation">.</span>age<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-静态方法" tabindex="-1"><a class="header-anchor" href="#_2-静态方法" aria-hidden="true">#</a> 2. 静态方法</h4><p>静态方法在类加载的时候就存在了，它不依赖于任何实例。所以静态方法必须有实现，也就是说它不能是抽象方法(abstract)，并且只能访问所属类的<strong>静态字段</strong>和<strong>静态方法</strong>，方法中不能有 <strong>this</strong> 和 <strong>super</strong> 关键字。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StaticDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> num<span class="token punctuation">;</span> <span class="token comment">// 实例变量</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span> <span class="token comment">// 静态变量</span>
    <span class="token comment">// ...</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Non-static field &#39;num&#39; cannot be referenced from a static context</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token comment">// &#39;StaticDemo.this&#39; cannot be referenced from a static context</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-静态语句块" tabindex="-1"><a class="header-anchor" href="#_3-静态语句块" aria-hidden="true">#</a> 3. 静态语句块</h4><p>静态语句块在类初始化时运行一次。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;我是静态语句块&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">StaticDemo</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StaticDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">StaticDemo</span> s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StaticDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 输出: 我是静态语句块</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-静态内部类" tabindex="-1"><a class="header-anchor" href="#_4-静态内部类" aria-hidden="true">#</a> 4. 静态内部类</h4><p>非静态内部类依赖于外部类的实例，而静态内部类不需要。</p><p>静态内部类不能访问外部类的非静态的变量和方法。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StaticDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> num<span class="token punctuation">;</span> <span class="token comment">// 实例变量</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span> <span class="token comment">// 静态变量</span>
    <span class="token comment">// ...</span>
    <span class="token keyword">class</span> <span class="token class-name">InnerClass</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">StaticInnerClass</span> <span class="token punctuation">{</span>
        <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 不能访问非静态变量和方法</span>
            <span class="token comment">// System.out.println(num);</span>
            <span class="token comment">// run();</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">StaticDemo</span> staticDemo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StaticDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 依靠外部类实例化</span>
    <span class="token class-name">InnerClass</span> innerClass <span class="token operator">=</span> staticDemo<span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">InnerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 不依靠外部类</span>
    <span class="token class-name">StaticInnerClass</span> staticInnerClass <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StaticInnerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-静态导包" tabindex="-1"><a class="header-anchor" href="#_5-静态导包" aria-hidden="true">#</a> 5. 静态导包</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">com<span class="token punctuation">.</span>xxx<span class="token punctuation">.</span></span><span class="token class-name">ClassName</span><span class="token punctuation">.</span><span class="token operator">*</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_6-初始化顺序" tabindex="-1"><a class="header-anchor" href="#_6-初始化顺序" aria-hidden="true">#</a> 6. 初始化顺序</h4><div class="hint-container tip"><p class="hint-container-title">提示</p><p>静态变量和静态语句块优先于实例变量和普通语句块，静态变量和静态语句块的初始化顺序取决于它们在代码中的顺序。</p><p>最后才是构造器初始化</p></div><p>存在继承的情况下，初始化顺序为:</p><ul><li>父类(静态变量、静态语句块)</li><li>子类(静态变量、静态语句块)</li><li>父类(实例变量、普通语句块)</li><li>父类(构造函数)</li><li>子类(实例变量、普通语句块)</li><li>子类(构造函数)</li></ul><h3 id="final" tabindex="-1"><a class="header-anchor" href="#final" aria-hidden="true">#</a> final</h3><div class="hint-container tip"><p class="hint-container-title">提示</p><p><strong>final</strong> 称之为最终的意思，可以修饰类、方法、局部变量、成员变量</p></div><ul><li><strong>final</strong> 修饰类不可以被继承</li><li><strong>final</strong> 修饰的方法不能被子类重写</li><li><strong>final</strong> 修饰的变量，只能初始化一次</li><li><strong>final</strong> 修饰 基本数据类型，表示 值 不能被修改</li><li><strong>final</strong> 修饰 引用数据类型，表示 引用的地址 不能改变</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// final 修饰的类不可以被继承</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FinalExample</span> <span class="token punctuation">{</span>

    <span class="token comment">// final修饰的变量只能初始化一次</span>
    <span class="token comment">// final修饰的引用数据类型 不能改变引用地址</span>
    <span class="token keyword">final</span> <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>

    <span class="token comment">// final 修饰的方法也不能被重写</span>
    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;我是 final print 方法&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="内部类" tabindex="-1"><a class="header-anchor" href="#内部类" aria-hidden="true">#</a> 内部类</h2><h3 id="内部类概念" tabindex="-1"><a class="header-anchor" href="#内部类概念" aria-hidden="true">#</a> 内部类概念</h3><div class="hint-container tip"><p class="hint-container-title">提示</p><p>什么是内部类，把一个类定义在另一个类内部，把里面的类称之为 <strong>内部类</strong> ，把外面的类称为 <strong>外部类</strong></p></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Outer</span> <span class="token punctuation">{</span> <span class="token comment">// 外部类</span>
    <span class="token keyword">class</span> <span class="token class-name">Inner</span> <span class="token punctuation">{</span> <span class="token comment">// 内部类</span>
        
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>内部类可以看作和字段、方法一样是外部类的成员，成员可以用修饰符修饰：</p><ul><li>静态内部类：使用 <strong>static</strong> 修饰的内部类，访问内部类直接用外部类名访问</li><li>实例内部类：没有 static 修饰的内部类，访问内部类需要实例化对象来访问</li><li>方法内部类：定义在方法(局部)的类</li><li>匿名内部类：特殊的局部内部类，适用于只用一次的类</li></ul><p>对于每个内部了，Java编译器都会生产 <strong>class</strong> 文件：</p><ul><li>静态和实例内部类：外部类名$内部类名字</li><li>局部内部类：外部类名$数字内部类名称</li><li>匿名内部类：外部类名$数字</li></ul><h3 id="实例内部类" tabindex="-1"><a class="header-anchor" href="#实例内部类" aria-hidden="true">#</a> 实例内部类</h3><p>一般而言，成员内部类的访问修饰符是默认访问权限（包访问权限），开发时，可以根据需要添加具体<br> 的访问权限</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InnerExample</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token comment">// *特性* 实例内部类：可以直接访问外部类的私有变量</span>
    <span class="token keyword">class</span> <span class="token class-name">Inner1</span><span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="静态内部类" tabindex="-1"><a class="header-anchor" href="#静态内部类" aria-hidden="true">#</a> 静态内部类</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InnerExample</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> staticName<span class="token punctuation">;</span>
    <span class="token comment">// *特性* 静态内部类：可以直接访问类内部的静态私有成员</span>
    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Inner2</span><span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;staticName = &quot;</span> <span class="token operator">+</span> staticName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="方法内部类" tabindex="-1"><a class="header-anchor" href="#方法内部类" aria-hidden="true">#</a> 方法内部类</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InnerExample</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> staticName<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">&quot;局部bl&quot;</span><span class="token punctuation">;</span>
        <span class="token comment">// *特性* 局部内部类：可以直接访问方法内部的变量</span>
        <span class="token keyword">class</span> <span class="token class-name">Inner3</span> <span class="token punctuation">{</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="匿名内部类" tabindex="-1"><a class="header-anchor" href="#匿名内部类" aria-hidden="true">#</a> 匿名内部类</h3><div class="hint-container tip"><p class="hint-container-title">提示</p><p>当一个类只使用一次，就可以声明成匿名内部类；匿名内部类必须有 <strong>实现</strong> 存在</p></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 父类</span>
<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
    <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 接口</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IFly</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 子类匿名内部类</span>
        <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;狗吃屎&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 实现类内部类(使用匿名内部类第二种方法)</span>
        <span class="token class-name">IFly</span> iFly <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IFly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;我会飞...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        iFly<span class="token punctuation">.</span><span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>`,192),b={href:"https://www.pdai.tech/md/java/basic/java-basic-lan-basic.html",target:"_blank",rel:"noopener noreferrer"};function g(h,y){const t=p("router-link"),o=p("ExternalLinkIcon");return l(),i("div",null,[d,k,n("nav",v,[n("ul",null,[n("li",null,[a(t,{to:"#java简介"},{default:e(()=>[s("Java简介")]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#什么是编程"},{default:e(()=>[s("什么是编程")]),_:1})]),n("li",null,[a(t,{to:"#java语言"},{default:e(()=>[s("Java语言")]),_:1})]),n("li",null,[a(t,{to:"#跨平台原理"},{default:e(()=>[s("跨平台原理")]),_:1})]),n("li",null,[a(t,{to:"#jdk"},{default:e(()=>[s("JDK")]),_:1})])])]),n("li",null,[a(t,{to:"#数据类型"},{default:e(()=>[s("数据类型")]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#基本数据类型转换"},{default:e(()=>[s("基本数据类型转换")]),_:1})]),n("li",null,[a(t,{to:"#包装类"},{default:e(()=>[s("包装类")]),_:1})]),n("li",null,[a(t,{to:"#缓存池"},{default:e(()=>[s("缓存池")]),_:1})]),n("li",null,[a(t,{to:"#运算符"},{default:e(()=>[s("运算符")]),_:1})])])]),n("li",null,[a(t,{to:"#jvm内存模型"},{default:e(()=>[s("JVM内存模型")]),_:1})]),n("li",null,[a(t,{to:"#数组类型"},{default:e(()=>[s("数组类型")]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#数组的定义"},{default:e(()=>[s("数组的定义")]),_:1})]),n("li",null,[a(t,{to:"#静态初始化"},{default:e(()=>[s("静态初始化")]),_:1})]),n("li",null,[a(t,{to:"#动态初始化"},{default:e(()=>[s("动态初始化")]),_:1})]),n("li",null,[a(t,{to:"#数组初始化内存图分析"},{default:e(()=>[s("数组初始化内存图分析")]),_:1})]),n("li",null,[a(t,{to:"#数组特点"},{default:e(()=>[s("数组特点")]),_:1})])])]),n("li",null,[a(t,{to:"#object-常用方法"},{default:e(()=>[s("Object 常用方法")]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#方法摘要"},{default:e(()=>[s("方法摘要")]),_:1})]),n("li",null,[a(t,{to:"#tostring"},{default:e(()=>[s("toString()")]),_:1})]),n("li",null,[a(t,{to:"#equals"},{default:e(()=>[s("equals()")]),_:1})]),n("li",null,[a(t,{to:"#hashcode"},{default:e(()=>[s("hashCode()")]),_:1})]),n("li",null,[a(t,{to:"#clone"},{default:e(()=>[s("clone()")]),_:1})])])]),n("li",null,[a(t,{to:"#关键字"},{default:e(()=>[s("关键字")]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#this"},{default:e(()=>[s("this")]),_:1})]),n("li",null,[a(t,{to:"#super"},{default:e(()=>[s("super")]),_:1})]),n("li",null,[a(t,{to:"#static"},{default:e(()=>[s("static")]),_:1})]),n("li",null,[a(t,{to:"#final"},{default:e(()=>[s("final")]),_:1})])])]),n("li",null,[a(t,{to:"#内部类"},{default:e(()=>[s("内部类")]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#内部类概念"},{default:e(()=>[s("内部类概念")]),_:1})]),n("li",null,[a(t,{to:"#实例内部类"},{default:e(()=>[s("实例内部类")]),_:1})]),n("li",null,[a(t,{to:"#静态内部类"},{default:e(()=>[s("静态内部类")]),_:1})]),n("li",null,[a(t,{to:"#方法内部类"},{default:e(()=>[s("方法内部类")]),_:1})]),n("li",null,[a(t,{to:"#匿名内部类"},{default:e(()=>[s("匿名内部类")]),_:1})])])]),n("li",null,[a(t,{to:"#参考资料"},{default:e(()=>[s("参考资料")]),_:1})])])]),m,n("ul",null,[n("li",null,[n("a",b,[s("Java全栈知识体系 - Java基础知识"),a(o)])])])])}const f=c(r,[["render",g],["__file","01.Java基础 - 快速入门.html.vue"]]);export{f as default};
