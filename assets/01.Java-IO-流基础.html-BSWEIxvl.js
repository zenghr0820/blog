import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as p,a,b as s,i as n,d as t,w as r,r as l,o as d}from"./app-Dzewmnmq.js";const g={},B={id:"补充知识点",tabindex:"-1"},C={class:"header-anchor",href:"#补充知识点"};function y(E,i){const h=l("Badge"),k=l("RouteLink");return d(),p("div",null,[i[3]||(i[3]=a(`<h1 id="i-o-流基础知识" tabindex="-1"><a class="header-anchor" href="#i-o-流基础知识"><span>I/O 流基础知识</span></a></h1><div class="hint-container tip"><p class="hint-container-title">提示</p><p>本文旨意掌握 I/O 流的基础知识以及流的基本操作。</p></div><h2 id="file-类" tabindex="-1"><a class="header-anchor" href="#file-类"><span>File 类</span></a></h2><p>File 理解为文件和文件夹（目录），用于表示磁盘中某个文件或文件夹的路径。该类包含了文件的创建、删除、重命名、判断是否存在等方法。只能设置和获取文件本身的信息（文件大小，是否可读），不能设置和获取文件里面的内容。</p><ul><li>Unix: 严格区分大小写，使用 <strong>(/)</strong> 来表示路径分隔符。</li><li>Windows: 默认情况下是不区分大小写的，使用 <strong>(\\)</strong> 来分割目录路径。但是在Java中一个 <strong>(\\)</strong> 表示转义，所以在 Windows 系统中就得使用两个 \\\\</li></ul><p><strong>操作 File 的常用方法</strong></p><ul><li>getName() - 获取文件名</li><li>getParent() - 获取上层路径名称（如果使用的是相对路径没有上层路径，返回 null）</li><li>getParentFile() - 获取上层路径的 File 对象</li><li>getAbsolutePath() - 获取绝对路径</li><li>getAbsoluteFile() - 获取绝对路径的 File 对象</li><li>list() - 获取该目录下的所有文件名</li><li>listFiles() - 获取该目录下的所有文件 File 对象</li><li>exists() - 判断文件是否存在</li><li>createNewFile() - 创建新文件</li><li>isDirectory() - 判断是否是目录</li><li>mkdir() - 创建新目录</li><li>mkdirs() - 创建新目录（补充不存在的上层目录）</li><li>renameTo() - 移动重命名文件</li><li>delete() - 删除文件</li></ul><h2 id="字符编码" tabindex="-1"><a class="header-anchor" href="#字符编码"><span>字符编码</span></a></h2><h3 id="常见的字符集" tabindex="-1"><a class="header-anchor" href="#常见的字符集"><span>常见的字符集</span></a></h3><ul><li><strong>ASCII：占一个字节，只能包含128个符号。不能表示汉字。</strong></li><li><strong>ISO-8859-1：也称之为latin-1，占一个字节，收录西欧语言，不能表示汉字。</strong></li><li>GB2312/GBK/GB18030：占两个字节，支持中文。</li><li>ANSI：占两个字节，在简体中文的操作系统中ANSI 就指的是 GBK。</li><li><strong>UTF-8：是一种针对Unicode的可变长度字符编码，是Unicode的实现方式之一，支持中文。在开</strong><strong>发中建议使用</strong></li></ul><h3 id="编码解码操作" tabindex="-1"><a class="header-anchor" href="#编码解码操作"><span>编码解码操作</span></a></h3><p>数据在网络上传输是以二进制的格式，二进制格式就是 byte 数组，此时需要把信息做编码和解码处理</p><ul><li>编码：把字符串转换为byte数组 String---&gt;byte[]</li><li>解码：把 byte 数组转换为字符串 byte[]---&gt;String</li></ul><p><strong>注意：一定要保证编码和解码的字符集相同，才能正确解码出信息</strong></p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>乱码问题的根本原因就是 编码和解码使用的字符集不是同一种，解决方法 统一编码字符集</p></div><h2 id="四大基流" tabindex="-1"><a class="header-anchor" href="#四大基流"><span>四大基流</span></a></h2><div class="hint-container tip"><p class="hint-container-title">提示</p><p>InputStream/OutputStream 只定义了流的流向和流通道的数据单元，并没有定义源数据源和目的地</p><p>java.io包中的类是按照 源数据源 和 目的地 进行划分的。</p><p>java.io包中的类命名规则：<strong>数据源/目的地 + 数据传输单元</strong> <em>e.g：File + InputStream / File + Reader</em></p></div><p>根据流的不同特性，流的划分是不一样的，一般按照如下情况来考虑:</p><ul><li>按流动方向：分为 输入流 和 输出流</li><li>按数据传输单位：分为 字节流 和 字符流，即每次传递一个字节（byte）或一个字符（char）</li><li>按功能上划分：分为 节点流 和 处理流，节点流功能单一，处理流功能更强</li></ul><table><thead><tr><th style="text-align:center;">流向</th><th style="text-align:center;">字节流</th><th style="text-align:center;">字符流</th></tr></thead><tbody><tr><td style="text-align:center;">输入流</td><td style="text-align:center;">InputStream</td><td style="text-align:center;">Reader</td></tr><tr><td style="text-align:center;">输出流</td><td style="text-align:center;">OutputStream</td><td style="text-align:center;">Writer</td></tr></tbody></table><h2 id="字节输入-字节输出流" tabindex="-1"><a class="header-anchor" href="#字节输入-字节输出流"><span>字节输入/字节输出流</span></a></h2><p><img src="https://media.zenghr.cn/blog/img/20210505/PTuOyaS8Y46e.png?imageslim" alt="mark"></p><h3 id="inputstream-字节输入流" tabindex="-1"><a class="header-anchor" href="#inputstream-字节输入流"><span>InputStream(字节输入流)</span></a></h3><p>InputStream 代表字节输入流的所有类的父类</p><p><strong>常用方法</strong></p><table><thead><tr><th style="text-align:left;">方法</th><th>方法作用</th></tr></thead><tbody><tr><td style="text-align:left;">int read()</td><td>从输入流中读取一个字节数据并返回该字节数据，如果到达流的末尾，则返回 -1</td></tr><tr><td style="text-align:left;">int read(byte[] buff)</td><td>从输入流中读取多个字节数据，并存储在缓冲区数组 buff 中。返回已读取的字节数量，如果已到达流的末尾，则返回 -1</td></tr><tr><td style="text-align:left;">void close()</td><td>关闭此输入流并释放与该流关联的所有系统资源。InputStream 的 close 方法不执行任何操作</td></tr></tbody></table><h3 id="outputstream-字节输出流" tabindex="-1"><a class="header-anchor" href="#outputstream-字节输出流"><span>OutputStream(字节输出流)</span></a></h3><p>OutputStream 代表字节输出流的所有类的父类</p><p><strong>常用方法</strong></p><table><thead><tr><th>方法</th><th>方法作用</th></tr></thead><tbody><tr><td>void write(int b)</td><td>将指定的一个字节数据b写入到输出流中</td></tr><tr><td>void write(byte[] buff)</td><td>把数组buff中所有字节数据写入到输出流中</td></tr><tr><td>void write(byte[] buff, int off, int len)</td><td>把数组buff中从索引 off 开始的 len 个字节写入此输出流中</td></tr><tr><td>void flush()</td><td>刷新缓冲区</td></tr><tr><td>void close()</td><td>关闭此输出流并释放与此流有关的所有系统资源</td></tr></tbody></table><h3 id="文件字节流" tabindex="-1"><a class="header-anchor" href="#文件字节流"><span>文件字节流</span></a></h3><p>根据 IO 包中类的命名规则，当程序操作的源数据是文件时，输入字节流使用 <strong>FileInputStream</strong> 实现类，输出字节流使用 <strong>FileOutputStream</strong> 实现类</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">[] args) {</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 源数据</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">    File</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> srcFile </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> File</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">&quot;E:</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">test</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">test.txt&quot;</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">    File</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> decFile </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> File</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">&quot;test.txt&quot;</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // todo: jdk 1.7 语法，实现了 AutoCloseable 接口会自动关闭</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">    try</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> (</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">        FileInputStream</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> in </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> FileInputStream</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">(srcFile)</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">        FileOutputStream</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> out </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> FileOutputStream</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">(decFile)</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">    ) {</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 循环读取</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">        int</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> len</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">        byte</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">[] buf </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> byte</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">[</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">1024</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">]</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">        while</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> ((len </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> in</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">read</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(buf)</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">) </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">!=</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">            out</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">write</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(buf, </span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">, len);</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">            out</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">flush</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">        }</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">    } </span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">IOException</span><span style="--shiki-light:#E06C75;--shiki-light-font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> e</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">        e</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">printStackTrace</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="字符输入-输出流" tabindex="-1"><a class="header-anchor" href="#字符输入-输出流"><span>字符输入/输出流</span></a></h2><p><img src="https://media.zenghr.cn/blog/img/20210505/HnpYqN6waVjY.png?imageslim" alt="mark"></p><h3 id="reader-字符输入流" tabindex="-1"><a class="header-anchor" href="#reader-字符输入流"><span>Reader(字符输入流)</span></a></h3><p>Reader 表示字符输入流的所有类的超类</p><p><strong>常用方法</strong></p><table><thead><tr><th style="text-align:left;">方法</th><th>方法作用</th></tr></thead><tbody><tr><td style="text-align:left;">int read()</td><td>从输入流中读取一个字节数据并返回该字节数据，如果到达流的末尾，则返回 -1</td></tr><tr><td style="text-align:left;">int read(char[] cbuf)</td><td>从输入流中读取多个字节数据，并存储在缓冲区数组 cbuf 中。返回已读取的字节数量，如果已到达流的末尾，则返回 -1</td></tr><tr><td style="text-align:left;">void close()</td><td>关闭此输入流并释放与该流关联的所有系统资源</td></tr></tbody></table><h3 id="writer-字符输出流" tabindex="-1"><a class="header-anchor" href="#writer-字符输出流"><span>Writer(字符输出流)</span></a></h3><p>Writer 代表字符输出流的所有类的超类</p><p><strong>常用方法</strong></p><table><thead><tr><th>方法</th><th>方法作用</th></tr></thead><tbody><tr><td>void write(int c)</td><td>将指定的一个字符数据 c 写入到输出流中</td></tr><tr><td>void write(char[] cbuf)</td><td>把数组 cbuf 中 cbuf.length 个字符数据写入到输出流中</td></tr><tr><td>void write(char[] cbuf, int off,int len)</td><td>把数组 cbuf 中从索引 off 开始的 len 个字符写入此输出流中</td></tr><tr><td>void write(String str)</td><td>将str字符串数据写入到输出流中</td></tr><tr><td>void close()</td><td>关闭此输入流并释放与该流关联的所有系统资源</td></tr><tr><td>void flush()</td><td>刷新此输出流并强制写出所有缓冲的输出字符</td></tr></tbody></table><h3 id="文件字符流" tabindex="-1"><a class="header-anchor" href="#文件字符流"><span>文件字符流</span></a></h3><ul><li>FileReader - 操作文件的字符输入流</li><li>FileWriter - 操作文件的字符输出流</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">[] args) {</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 源数据</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">    File</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> srcFile </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> File</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">&quot;E:</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">test</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">test.txt&quot;</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">    File</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> decFile </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> File</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">&quot;test.txt&quot;</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // todo: jdk 1.7 语法，实现了 AutoCloseable 接口会自动关闭</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">    try</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> (</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">        FileReader</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> in </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> FileReader</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">(srcFile)</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">        FileWriter</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> out </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> FileWriter</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">(decFile)</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">    ) {</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 循环读取</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">        int</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> len</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">        char</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">[] buf </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> char</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">[</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">1024</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">]</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">        while</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> ((len </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> in</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">read</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(buf)</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">) </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">!=</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">            out</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">write</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(buf, </span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">, len);</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">            out</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">flush</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">        }</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">    } </span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">IOException</span><span style="--shiki-light:#E06C75;--shiki-light-font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> e</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">        e</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">printStackTrace</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,46)),s("h2",B,[s("a",C,[s("span",null,[i[0]||(i[0]=n("补充知识点")),t(h,{text:"New"})])])]),i[4]||(i[4]=a(`<div class="hint-container tip"><p class="hint-container-title">提示</p><p>在文件对象中写入内容的时候，如果该文件对象已经有了其他的内容，这时候我们在使用 write 方法写入数据的时候，会覆盖掉原有的内容，如果想要在原有的内容上追加需要使用构造器 <strong>FileWriter<code>(String fileName, boolean append)</code></strong> ，设置为 <strong>true</strong>，添加数据就会在原有内容的基础上追加</p></div><p><strong>在 JDK 1.7 的新语法中，实现了 AutoCloseable 接口的类会自动帮你关闭资源，语法如下👇</strong></p><div class="language-java" data-highlighter="shiki" data-ext="java" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">try</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> (</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">    FileInputStream</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> in </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> FileInputStream</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">(srcFile)</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">    FileOutputStream</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> out </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> FileOutputStream</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">(decFile)</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // ... 代码块</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">} </span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Exception</span><span style="--shiki-light:#E06C75;--shiki-light-font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> e</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // ..</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">}</span></span></code></pre></div><h2 id="按资源分类i-o流" tabindex="-1"><a class="header-anchor" href="#按资源分类i-o流"><span>按资源分类I/O流</span></a></h2><p><img src="https://media.zenghr.cn/blog/img/20210505/rEusKzmBjKae.png?imageslim" alt="mark"></p><h2 id="缓冲流" tabindex="-1"><a class="header-anchor" href="#缓冲流"><span>缓冲流</span></a></h2><p><strong>节点流</strong>的功能都比较单一，性能较低。</p><p><strong>处理流</strong>，也称之为<strong>包装流</strong>，相对于节点流更高级，这里存在一个设计模式—— <strong>装饰设计模式</strong></p>`,8)),s("p",null,[i[2]||(i[2]=n("如需要进一步了解 装饰者模式 可以看：")),t(k,{to:"/passages/2021-05-07-java.html"},{default:r(()=>i[1]||(i[1]=[n("Java IO - 设计模式(装饰者模式)")])),_:1})]),i[5]||(i[5]=a(`<p>缓冲流内置了一个大小为 8192 的缓冲区，用于减少磁盘的操作，存满 8192 缓冲区才会写入磁盘中，操作数据量比较大的流，建议都用缓冲流，缓冲流根据四大基流都有对应的缓冲流</p><div class="language-java" data-highlighter="shiki" data-ext="java" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">BufferedInputStream </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> BufferedOutputStream </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> BufferedReader </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> BufferedWriter</span></span></code></pre></div><h3 id="字节缓冲流" tabindex="-1"><a class="header-anchor" href="#字节缓冲流"><span>字节缓冲流</span></a></h3><p>字节缓冲流的 API 方法基本和 字节基流的操作一致</p><ul><li>BufferedInputStream</li><li>BufferedOutputStream</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">[] args) {</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 源数据</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">    File</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> srcFile </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> File</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">&quot;E:</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">test</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">test.txt&quot;</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">    File</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> decFile </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> File</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">&quot;test.txt&quot;</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // todo: jdk 1.7 语法，实现了 AutoCloseable 接口会自动关闭</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">    try</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> (</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">        FileInputStream</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> in </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> FileInputStream</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">(srcFile)</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">        FileOutputStream</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> out </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> FileOutputStream</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">(decFile)</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // buff 缓冲区包装类</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">        BufferedInputStream</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> buffIn </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> BufferedInputStream</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">(in)</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">        BufferedOutputStream</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> buffOut </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> BufferedOutputStream</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">(out)</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">    ) {</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 循环读取</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">        int</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> len</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">        byte</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">[] buf </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> byte</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">[</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">1024</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">]</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">        while</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> ((len </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> buffIn</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">read</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(buf)</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">) </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">!=</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">            buffOut</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">write</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(buf, </span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">, len);</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">        }</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">        buffOut</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">flush</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">    } </span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">IOException</span><span style="--shiki-light:#E06C75;--shiki-light-font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> e</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">        e</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">printStackTrace</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="字符缓冲流" tabindex="-1"><a class="header-anchor" href="#字符缓冲流"><span>字符缓冲流</span></a></h3><p><strong>BufferedReader</strong> 继承于 Reader，实现对文本型文件进行高效(一次读取一行)的读取，提供特有的方法 <strong>readLine()</strong> 读取一行</p><p><strong>BufferedWriter</strong> 继承于 Writer，实现对文本型文件进行高效的写入，提供特有的方法 <strong>newLine()</strong> 写入一个换行</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">ublic </span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">static</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">[] args) {</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 源数据</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">    File</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> srcFile </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> File</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">&quot;E:</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">test</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">test.txt&quot;</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">    File</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> decFile </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> File</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">&quot;test.txt&quot;</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // todo: jdk 1.7 语法，实现了 AutoCloseable 接口会自动关闭</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">    try</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> (</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">        FileReader</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> in </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> FileReader</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">(srcFile)</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">        FileWriter</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> out </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> FileWriter</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">(decFile)</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // buff 缓冲区包装类</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">        BufferedReader</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> buffIn </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> BufferedReader</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">(in)</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">        BufferedWriter</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> buffOut </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> BufferedWriter</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">(out)</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">    ) {</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 循环读取每一行</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">        String</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> line</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">        while</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> ((line </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> buffIn</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">readLine</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">) </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">!=</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            // 一行一行写入文件</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">            buffOut</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">write</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(line);</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            // 写入换行</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">            buffOut</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">newLine</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">        }</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 刷新缓冲区</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">        buffOut</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">flush</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">    } </span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">IOException</span><span style="--shiki-light:#E06C75;--shiki-light-font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> e</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">        e</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">printStackTrace</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="serializable-对象序列化" tabindex="-1"><a class="header-anchor" href="#serializable-对象序列化"><span>serializable(对象序列化)</span></a></h2><p><strong>序列化：</strong> 指把 Java 堆内存中的对象数据，通过某种方式把对象数据存储到磁盘文件中或者传递给给网络上传输。序列化在分布式系统在应用非常广泛</p><p><strong>反序列化：</strong> 把磁盘文件中的对象的数据或者把网络节点上的对象数据恢复成 Java 对象的过程</p><p>需要做序列化的对象必须实现序列化接口：<em>java.io.Serializable(这只是标志接口，没有抽象方法)</em></p><p>通过 IO 中的对象流来做序列化和反序列化操作</p><ul><li><strong>ObjectInputStream：</strong> 通过 writeObject 方法操作序列化</li><li><strong>ObjectOutoutStream：</strong> 通过 readObject 方法操作反序列化</li></ul><p><strong>注意：如果字段使用 transient 关键字修饰，该字段不会被序列化</strong></p><div class="language-java" data-highlighter="shiki" data-ext="java" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 实现 serializable 接口</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> User</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> implements</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> Serializable</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> name</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> age</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 不序列化</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> transient</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> password</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	// ... set/get</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><p><strong>序列化操作</strong></p><div class="language-java" data-highlighter="shiki" data-ext="java" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">[] args) throws Exception {</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">    User</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> user </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> User</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">&quot;张三&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;"> 20</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;"> &quot;123456&quot;</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">    FileOutputStream</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> out </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> FileOutputStream</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">&quot;user.dll&quot;</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">    ObjectOutputStream</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> oos </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> ObjectOutputStream</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">(out)</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	// 序列化字节写入文件</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">    oos</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">writeObject</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(user);</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	// 关闭资源</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">    oos</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">flush</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">    oos</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">close</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">}</span></span></code></pre></div><p><strong>反序列化操作</strong></p><div class="language-java" data-highlighter="shiki" data-ext="java" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">[] args) throws Exception {</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 反序列化</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">    FileInputStream</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> in </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> FileInputStream</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">&quot;user.dll&quot;</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">    ObjectInputStream</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> ois </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> ObjectInputStream</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">(in)</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	// 读取文件 反序列化成 java 对象</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">    User</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> user </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> (User) </span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">ois</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">readObject</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">    System</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(user);</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	// 关闭资源</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">    ois</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">close</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">}</span></span></code></pre></div><p><strong>序列化版本问题</strong></p><p>当类实现 <strong>Serializable</strong> 接口后，在编译的时候就会根据字段生成一个缺省的 <strong>serialVersionUID</strong> 值，并在序列化操作时，写到序列化数据文件中</p><p>但随着项目的升级系统的 class 文件也会升级(增加一个字段/删除一个字段)，此时再重新编译，对象的 <strong>serialVersionUID</strong> 值又会改变。那么在反序列化时，JVM会把对象数据数据中的 <strong>serialVersionUID</strong> 与本地字节码中的 <strong>serialVersionUID</strong> 进行比较，如果值不相同（意味着类的版本不同），那么报异常 <strong>InvalidClassException</strong>，即：类版本不对应，不能进行反序列化。如果版本号相同，则可以进行反序列化，如下👇</p><p><img src="https://media.zenghr.cn/blog/img/20210506/4XlByvYy3I9L.png?imageslim" alt="mark"></p><p>为了避免代码版本升级而造成反序列化因版本不兼容而失败的问题，在开发中我们可以故意在类中提供一个固定的 <strong>serialVersionUID</strong> 值</p><div class="language-java" data-highlighter="shiki" data-ext="java" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> User</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> implements</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> Serializable</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">	private</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> final</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> long</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> serialVersionUID </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;"> 1L</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  	// ..</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div>`,28))])}const o=e(g,[["render",y]]),D=JSON.parse('{"path":"/Java/io/01.Java-IO-%E6%B5%81%E5%9F%BA%E7%A1%80.html","title":"Java I/O流基础","lang":"zh-CN","frontmatter":{"title":"Java I/O流基础","date":"2021-05-05T16:00:00.000Z","re":"2021-05-05-java-io-basic","category":["Java"],"description":"I/O 流基础知识 提示 本文旨意掌握 I/O 流的基础知识以及流的基本操作。 File 类 File 理解为文件和文件夹（目录），用于表示磁盘中某个文件或文件夹的路径。该类包含了文件的创建、删除、重命名、判断是否存在等方法。只能设置和获取文件本身的信息（文件大小，是否可读），不能设置和获取文件里面的内容。 Unix: 严格区分大小写，使用 (/) 来...","permalink":"/passages/2021-05-05-java-io-basic.html","head":[["meta",{"property":"og:url","content":"https://blog.zenghr.cn/passages/2021-05-05-java-io-basic.html"}],["meta",{"property":"og:site_name","content":"Zenghr"}],["meta",{"property":"og:title","content":"Java I/O流基础"}],["meta",{"property":"og:description","content":"I/O 流基础知识 提示 本文旨意掌握 I/O 流的基础知识以及流的基本操作。 File 类 File 理解为文件和文件夹（目录），用于表示磁盘中某个文件或文件夹的路径。该类包含了文件的创建、删除、重命名、判断是否存在等方法。只能设置和获取文件本身的信息（文件大小，是否可读），不能设置和获取文件里面的内容。 Unix: 严格区分大小写，使用 (/) 来..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://media.zenghr.cn/blog/img/20210505/PTuOyaS8Y46e.png?imageslim"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-07T17:00:17.000Z"}],["meta",{"property":"article:published_time","content":"2021-05-05T16:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-07T17:00:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java I/O流基础\\",\\"image\\":[\\"https://media.zenghr.cn/blog/img/20210505/PTuOyaS8Y46e.png?imageslim\\",\\"https://media.zenghr.cn/blog/img/20210505/HnpYqN6waVjY.png?imageslim\\",\\"https://media.zenghr.cn/blog/img/20210505/rEusKzmBjKae.png?imageslim\\",\\"https://media.zenghr.cn/blog/img/20210506/4XlByvYy3I9L.png?imageslim\\"],\\"datePublished\\":\\"2021-05-05T16:00:00.000Z\\",\\"dateModified\\":\\"2025-04-07T17:00:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Zenghr\\"}]}"]]},"git":{"createdTime":1744045217000,"updatedTime":1744045217000,"contributors":[{"name":"zenghr","username":"zenghr","email":"zenghr","commits":1,"url":"https://github.com/zenghr"}]},"readingTime":{"minutes":9.79,"words":2938},"filePathRelative":"Java/io/01.Java-IO-流基础.md","localizedDate":"2021年5月5日","excerpt":"\\n<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">提示</p>\\n<p>本文旨意掌握 I/O 流的基础知识以及流的基本操作。</p>\\n</div>\\n<h2>File 类</h2>\\n<p>File 理解为文件和文件夹（目录），用于表示磁盘中某个文件或文件夹的路径。该类包含了文件的创建、删除、重命名、判断是否存在等方法。只能设置和获取文件本身的信息（文件大小，是否可读），不能设置和获取文件里面的内容。</p>\\n<ul>\\n<li>Unix: 严格区分大小写，使用 <strong>(/)</strong> 来表示路径分隔符。</li>\\n<li>Windows: 默认情况下是不区分大小写的，使用 <strong>(\\\\)</strong> 来分割目录路径。但是在Java中一个 <strong>(\\\\)</strong> 表示转义，所以在 Windows 系统中就得使用两个 \\\\\\\\</li>\\n</ul>","autoDesc":true}');export{o as comp,D as data};
