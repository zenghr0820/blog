import{_ as c,D as l,Y as o,Z as p,$ as s,a1 as a,a3 as t,a2 as n,a0 as r}from"./framework-1b75f830.js";const u={},d=s("h1",{id:"创建tls证书和秘钥",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#创建tls证书和秘钥","aria-hidden":"true"},"#"),n(" 创建TLS证书和秘钥")],-1),m=s("p",null,[s("strong",null,"如果您不想看认证授权的解释，请直接看"),n(),s("a",{href:"#%E4%B8%89%E3%80%81%E5%AE%89%E8%A3%85-cfssl"},"安装 CFSSL")],-1),v={class:"table-of-contents"},k=s("h2",{id:"一、理解认证授权",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#一、理解认证授权","aria-hidden":"true"},"#"),n(" 一、理解认证授权")],-1),b={href:"https://github.com/liuyi01/kubernetes-starter/blob/master/docs/3-kubernetes-with-ca.md",target:"_blank",rel:"noopener noreferrer"},g=s("h3",{id:"_1-1-为什么要认证",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_1-1-为什么要认证","aria-hidden":"true"},"#"),n(" 1.1 为什么要认证")],-1),h=s("p",null,"想理解认证，我们得从认证解决什么问题、防止什么问题的发生入手。 防止什么问题呢？是防止有人入侵你的集群，root你的机器后让我们集群依然安全吗？不是吧，root都到手了，那就为所欲为，防不胜防了。 其实网络安全本身就是为了解决在某些假设成立的条件下如何防范的问题。比如一个非常重要的假设就是两个节点或者ip之间的通讯网络是不可信任的，可能会被第三方窃取，也可能会被第三方篡改。就像我们上学时候给心仪的女孩传纸条，传送的过程可能会被别的同学偷看，甚至内容可能会从我喜欢你修改成我不喜欢你了。当然这种假设不是随便想出来的，而是从网络技术现状和实际发生的问题中发现、总结出来的。kubernetes的认证也是从这个问题出发来实现的。",-1),q=s("h3",{id:"_1-2-概念梳理",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_1-2-概念梳理","aria-hidden":"true"},"#"),n(" 1.2 概念梳理")],-1),f=s("p",null,"为了解决上面说的问题，kubernetes并不需要自己想办法，毕竟是网络安全层面的问题，是每个服务都会遇到的问题，业内也有成熟的方案来解决。这里我们一起了解一下业内方案和相关的概念。",-1),_=s("strong",null,"对称加密/非对称加密",-1),x={href:"https://www.zhihu.com/question/33645891/answer/57721969",target:"_blank",rel:"noopener noreferrer"},y=s("strong",null,"SSL/TLS",-1),S={href:"http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html",target:"_blank",rel:"noopener noreferrer"},A=r(`<h3 id="_1-3-什么是授权" tabindex="-1"><a class="header-anchor" href="#_1-3-什么是授权" aria-hidden="true">#</a> 1.3 什么是授权</h3><p>授权的概念就简单多了，就是什么人具有什么样的权限，一般通过角色作为纽带把他们组合在一起。也就是一个角色一边拥有多种权限，一边拥有多个人。这样就把人和权限建立了一个关系。</p><h2 id="二、kubernetes的认证授权" tabindex="-1"><a class="header-anchor" href="#二、kubernetes的认证授权" aria-hidden="true">#</a> 二、kubernetes的认证授权</h2><p>Kubernetes集群的所有操作基本上都是通过kube-apiserver这个组件进行的，它提供HTTP RESTful形式的API供集群内外客户端调用。需要注意的是：认证授权过程只存在HTTPS形式的API中。也就是说，如果客户端使用HTTP连接到kube-apiserver，那么是不会进行认证授权的。所以说，可以这么设置，在集群内部组件间通信使用HTTP，集群外部就使用HTTPS，这样既增加了安全性，也不至于太复杂。 对APIServer的访问要经过的三个步骤，前面两个是认证和授权，第三个是 Admission Control，它也能在一定程度上提高安全性，不过更多是资源管理方面的作用。</p><h3 id="_2-1-kubernetes的认证" tabindex="-1"><a class="header-anchor" href="#_2-1-kubernetes的认证" aria-hidden="true">#</a> 2.1 kubernetes的认证</h3><p>kubernetes提供了多种认证方式，比如客户端证书、静态token、静态密码文件、ServiceAccountTokens等等。你可以同时使用一种或多种认证方式。只要通过任何一个都被认作是认证通过。下面我们就认识几个常见的认证方式。</p><ul><li><strong>客户端证书认证</strong> 客户端证书认证叫作TLS双向认证，也就是服务器客户端互相验证证书的正确性，在都正确的情况下协调通信加密方案。 为了使用这个方案，api-server需要用--client-ca-file选项来开启。</li><li><strong>引导Token</strong> 当我们有非常多的node节点时，手动为每个node节点配置TLS认证比较麻烦，这时就可以用到引导token的认证方式，前提是需要在api-server开启 experimental-bootstrap-token-auth 特性，客户端的token信息与预先定义的token匹配认证通过后，自动为node颁发证书。当然引导token是一种机制，可以用到各种场景中。</li><li><strong>Service Account Tokens 认证</strong> 有些情况下，我们希望在pod内部访问api-server，获取集群的信息，甚至对集群进行改动。针对这种情况，kubernetes提供了一种特殊的认证方式：Service Account。 Service Account 和 pod、service、deployment 一样是 kubernetes 集群中的一种资源，用户也可以创建自己的 Service Account。 ServiceAccount 主要包含了三个内容：namespace、Token 和 CA。namespace 指定了 pod 所在的 namespace，CA 用于验证 apiserver 的证书，token 用作身份验证。它们都通过 mount 的方式保存在 pod 的文件系统中。</li></ul><h3 id="_2-2-kubernetes的授权" tabindex="-1"><a class="header-anchor" href="#_2-2-kubernetes的授权" aria-hidden="true">#</a> 2.2 kubernetes的授权</h3><p>在Kubernetes1.6版本中新增角色访问控制机制（Role-Based Access，RBAC）让集群管理员可以针对特定使用者或服务账号的角色，进行更精确的资源访问控制。在RBAC中，权限与角色相关联，用户通过成为适当角色的成员而得到这些角色的权限。这就极大地简化了权限的管理。在一个组织中，角色是为了完成各种工作而创造，用户则依据它的责任和资格来被指派相应的角色，用户可以很容易地从一个角色被指派到另一个角色。 目前 Kubernetes 中有一系列的鉴权机制，因为Kubernetes社区的投入和偏好，相对于其它鉴权机制而言，RBAC是更好的选择。具体RBAC是如何体现在kubernetes系统中的我们会在后面的部署中逐步的深入了解。</p><h3 id="_2-3-kubernetes的admissioncontrol" tabindex="-1"><a class="header-anchor" href="#_2-3-kubernetes的admissioncontrol" aria-hidden="true">#</a> 2.3 kubernetes的AdmissionControl</h3><p>AdmissionControl - 准入控制本质上为一段准入代码，在对kubernetes api的请求过程中，顺序为：先经过认证 &amp; 授权，然后执行准入操作，最后对目标对象进行操作。这个准入代码在api-server中，而且必须被编译到二进制文件中才能被执行。 在对集群进行请求时，每个准入控制代码都按照一定顺序执行。如果有一个准入控制拒绝了此次请求，那么整个请求的结果将会立即返回，并提示用户相应的error信息。 常用组件（控制代码）如下：</p><ul><li>AlwaysAdmit：允许所有请求</li><li>AlwaysDeny：禁止所有请求，多用于测试环境</li><li>ServiceAccount：它将serviceAccounts实现了自动化，它会辅助serviceAccount做一些事情，比如如果pod没有serviceAccount属性，它会自动添加一个default，并确保pod的serviceAccount始终存在</li><li>LimitRanger：他会观察所有的请求，确保没有违反已经定义好的约束条件，这些条件定义在namespace中LimitRange对象中。如果在kubernetes中使用LimitRange对象，则必须使用这个插件。</li><li>NamespaceExists：它会观察所有的请求，如果请求尝试创建一个不存在的namespace，则这个请求被拒绝。</li></ul><h2 id="三、安装-cfssl" tabindex="-1"><a class="header-anchor" href="#三、安装-cfssl" aria-hidden="true">#</a> 三、安装 CFSSL</h2><p><strong>需要准备的证书：</strong></p><ul><li>ca-key.pem</li><li>ca.pem</li><li>etcd-key.pem</li><li>etcd.pem</li><li>server-key.pem</li><li>server.pem</li><li>admin.pem</li><li>admin-key.pem</li><li>kube-proxy-key.pem</li><li>kube-proxy.pem</li></ul><p><strong>使用证书的组件如下：</strong></p><ul><li>etcd：使用 ca.pem、server-key.pem、server.pem</li><li>kube-apiserver：使用 ca.pem、server-key.pem、server.pem</li><li>kubelet：使用 ca.pem</li><li>kube-proxy：使用 ca.pem、kube-proxy-key.pem、kube-proxy.pem</li><li>kubectl：使用 ca.pem、admin-key.pem、admin.pem</li><li>kube-controller-manager：使用 ca-key.pem、ca.pem</li></ul><p>我们使用CFSSL来制作证书，它是cloudflare开发的一个开源的PKI工具，是一个完备的CA服务系统，可以签署、撤销证书等，覆盖了一个证书的整个生命周期，后面只用到了它的命令行工具。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>注：一般情况下，K8S中证书只需要创建一次，以后在向集群中添加新节点时只要将/etc/kubernetes/ca目录下的证书拷贝到新节点上即可。</p></div><p>cfssl是非常好用的CA工具，我们用它来生成证书和秘钥文件，<strong>直接使用二进制源码包安装：</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#下载</span>
$ <span class="token function">wget</span> <span class="token parameter variable">-q</span> --show-progress --https-only <span class="token parameter variable">--timestamping</span> <span class="token punctuation">\\</span>
  https://pkg.cfssl.org/R1.2/cfssl_linux-amd64 <span class="token punctuation">\\</span>
  https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64
  
<span class="token comment">#修改为可执行权限</span>
$ <span class="token function">chmod</span> +x cfssl_linux-amd64 cfssljson_linux-amd64

<span class="token comment">#移动到bin目录</span>
$ <span class="token function">mv</span> cfssl_linux-amd64 /usr/local/bin/cfssl
$ <span class="token function">mv</span> cfssljson_linux-amd64 /usr/local/bin/cfssljson

<span class="token comment">#验证</span>
$ cfssl version
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="证书位置" tabindex="-1"><a class="header-anchor" href="#证书位置" aria-hidden="true">#</a> 证书位置</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#所有证书相关的东西都放在这, 后面所有的证书都放在该目录下, 你可以自定义</span>
<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /etc/kubernetes/ca
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="四、创建-ca-根证书" tabindex="-1"><a class="header-anchor" href="#四、创建-ca-根证书" aria-hidden="true">#</a> 四、创建 CA (根证书)</h2><h3 id="_4-1-创建-ca-配置文件" tabindex="-1"><a class="header-anchor" href="#_4-1-创建-ca-配置文件" aria-hidden="true">#</a> 4.1 创建 CA 配置文件</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> /etc/kubernetes/ca
<span class="token comment"># 创建如下的ca-config.json文件(* 也可以不执行该命令，直接创建下面👇的文件)</span>
cfssl print-defaults config <span class="token operator">&gt;</span> ca-config.json
<span class="token comment"># 修改 ca-config.json 文件，如下：</span>
<span class="token function">vim</span> ca-config.json
<span class="token comment"># 过期时间设置成了 87600h</span>
<span class="token punctuation">{</span>
  <span class="token string">&quot;signing&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
    <span class="token string">&quot;default&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
      <span class="token string">&quot;expiry&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;87600h&quot;</span>
    <span class="token punctuation">}</span>,
    <span class="token string">&quot;profiles&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
      <span class="token string">&quot;kubernetes&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
        <span class="token string">&quot;usages&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>
            <span class="token string">&quot;signing&quot;</span>,
            <span class="token string">&quot;key encipherment&quot;</span>,
            <span class="token string">&quot;server auth&quot;</span>,
            <span class="token string">&quot;client auth&quot;</span>
        <span class="token punctuation">]</span>,
        <span class="token string">&quot;expiry&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;87600h&quot;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>字段说明</p><ul><li><code>ca-config.json</code>：可以定义多个 profiles，分别指定不同的过期时间、使用场景等参数；后续在签名证书时使用某个 profile；</li><li><code>signing</code>：表示该证书可用于签名其它证书；生成的 ca.pem 证书中 <code>CA=TRUE</code>；</li><li><code>server auth</code>：表示client可以用该 CA 对server提供的证书进行验证；</li><li><code>client auth</code>：表示server可以用该CA对client提供的证书进行验证；</li></ul><h3 id="_4-2-创建-ca-证书签名请求" tabindex="-1"><a class="header-anchor" href="#_4-2-创建-ca-证书签名请求" aria-hidden="true">#</a> 4.2 创建 CA 证书签名请求</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 创建如下的ca-csr.json文件</span>
cfssl print-defaults csr <span class="token operator">&gt;</span> ca-csr.json
<span class="token comment"># 修改 ca-csr.json 文件，如下：</span>
<span class="token function">vim</span> ca-csr.json
<span class="token comment"># ca-csr.josn 文件内容如下</span>
<span class="token punctuation">{</span>
  <span class="token string">&quot;CN&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;kubernetes&quot;</span>,
  <span class="token string">&quot;key&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
    <span class="token string">&quot;algo&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;rsa&quot;</span>,
    <span class="token string">&quot;size&quot;</span><span class="token builtin class-name">:</span> <span class="token number">2048</span>
  <span class="token punctuation">}</span>,
  <span class="token string">&quot;names&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token string">&quot;C&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;CN&quot;</span>,
      <span class="token string">&quot;ST&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;BeiJing&quot;</span>,
      <span class="token string">&quot;L&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;BeiJing&quot;</span>,
      <span class="token string">&quot;O&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;k8s&quot;</span>,
      <span class="token string">&quot;OU&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;System&quot;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>,
    <span class="token string">&quot;ca&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
       <span class="token string">&quot;expiry&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;87600h&quot;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>字段说明</p><ul><li>&quot;CN&quot;：<code>Common Name</code>，kube-apiserver 从证书中提取该字段作为请求的用户名 (User Name)；浏览器使用该字段验证网站是否合法；</li><li>&quot;O&quot;：<code>Organization</code>，kube-apiserver 从证书中提取该字段作为请求用户所属的组 (Group)；</li></ul><h3 id="_4-3-生成-ca-证书和私钥" tabindex="-1"><a class="header-anchor" href="#_4-3-生成-ca-证书和私钥" aria-hidden="true">#</a> 4.3 生成 CA 证书和私钥</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>cfssl gencert <span class="token parameter variable">-initca</span> ca-csr.json <span class="token operator">|</span> cfssljson <span class="token parameter variable">-bare</span> ca
<span class="token comment"># 生成完成后会有以下文件（我们最终想要的就是ca-key.pem和ca.pem，一个秘钥，一个证书）</span>
<span class="token operator">&gt;</span> <span class="token function">ls</span>
<span class="token operator">&gt;</span> ca-config.json  ca.csr  ca-csr.json  ca-key.pem  ca.pem
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="五、创建-etcd-证书" tabindex="-1"><a class="header-anchor" href="#五、创建-etcd-证书" aria-hidden="true">#</a> 五、创建 ETCD 证书</h2><h3 id="_5-1-生成-etcd-证书配置" tabindex="-1"><a class="header-anchor" href="#_5-1-生成-etcd-证书配置" aria-hidden="true">#</a> 5.1 生成 etcd 证书配置</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># etcd证书放在这</span>
<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /etc/kubernetes/ca/etcd
<span class="token builtin class-name">cd</span> /etc/kubernetes/ca/etcd
<span class="token function">vim</span> etcd-csr.json
<span class="token comment"># 文件内容如下</span>
<span class="token punctuation">{</span>
  <span class="token string">&quot;CN&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;etcd&quot;</span>,
  <span class="token string">&quot;hosts&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>
    <span class="token string">&quot;127.0.0.1&quot;</span>,
    <span class="token string">&quot;192.168.10.102&quot;</span>
  <span class="token punctuation">]</span>,
  <span class="token string">&quot;key&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
    <span class="token string">&quot;algo&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;rsa&quot;</span>,
    <span class="token string">&quot;size&quot;</span><span class="token builtin class-name">:</span> <span class="token number">2048</span>
  <span class="token punctuation">}</span>,
  <span class="token string">&quot;names&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token string">&quot;C&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;CN&quot;</span>,
      <span class="token string">&quot;ST&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;Beijing&quot;</span>,
      <span class="token string">&quot;L&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;XS&quot;</span>,
      <span class="token string">&quot;O&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;k8s&quot;</span>,
      <span class="token string">&quot;OU&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;System&quot;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>字段说明</p><ul><li><code>hosts</code>：指定授权使用该证书的 <strong>IP 或域名列表</strong>，如果有部署多个 etcd，那么就需要填入其他 etcd 的 <strong>IP 或域名列表</strong>，我这里只部署一台所以就写一个☝️</li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p>注：上述文件hosts字段中IP为所有etcd节点的集群内部通信IP，一个都不能少！为了方便后期扩容可以多写几个预留的IP。</p></div><h3 id="_5-2-使用根证书-ca-pem-签发etcd证书" tabindex="-1"><a class="header-anchor" href="#_5-2-使用根证书-ca-pem-签发etcd证书" aria-hidden="true">#</a> 5.2 使用根证书(ca.pem)签发etcd证书</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>cfssl gencert <span class="token punctuation">\\</span>
        <span class="token parameter variable">-ca</span><span class="token operator">=</span>/etc/kubernetes/ca/ca.pem <span class="token punctuation">\\</span>
        -ca-key<span class="token operator">=</span>/etc/kubernetes/ca/ca-key.pem <span class="token punctuation">\\</span>
        <span class="token parameter variable">-config</span><span class="token operator">=</span>/etc/kubernetes/ca/ca-config.json <span class="token punctuation">\\</span>
        <span class="token parameter variable">-profile</span><span class="token operator">=</span>kubernetes etcd-csr.json <span class="token operator">|</span> cfssljson <span class="token parameter variable">-bare</span> etcd
   
<span class="token comment"># 跟之前类似生成三个文件etcd.csr是个中间证书请求文件，我们最终要的是etcd-key.pem和etcd.pem</span>
<span class="token operator">&gt;</span> <span class="token function">ls</span>
<span class="token operator">&gt;</span> etcd.csr  etcd-csr.json  etcd-key.pem  etcd.pem
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="六、创建-api-server-证书" tabindex="-1"><a class="header-anchor" href="#六、创建-api-server-证书" aria-hidden="true">#</a> 六、创建 Api-server 证书</h2><ul><li><strong>controller-manager：</strong> 一般与api-server在同一台机器上，所以可以使用非安全端口与api-server通讯，不需要生成证书和私钥</li><li><strong>scheduler：</strong> 一般与apiserver在同一台机器上，所以可以使用非安全端口与apiserver通讯。不需要生成证书和私钥。</li></ul><h3 id="_6-1-生成-api-server-证书配置" tabindex="-1"><a class="header-anchor" href="#_6-1-生成-api-server-证书配置" aria-hidden="true">#</a> 6.1 生成 Api-server 证书配置</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># api-server证书放在这</span>
<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /etc/kubernetes/ca/server
<span class="token builtin class-name">cd</span> /etc/kubernetes/ca/server
<span class="token function">vim</span> server-csr.json
<span class="token comment"># 内容如下</span>
<span class="token punctuation">{</span>
  <span class="token string">&quot;CN&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;kubernetes&quot;</span>,
  <span class="token string">&quot;hosts&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>
    <span class="token string">&quot;127.0.0.1&quot;</span>,
    <span class="token string">&quot;10.0.0.1&quot;</span>,
    <span class="token string">&quot;192.168.10.101&quot;</span>,
    <span class="token string">&quot;192.168.10.102&quot;</span>,
    <span class="token string">&quot;192.168.10.103&quot;</span>,
    <span class="token string">&quot;kubernetes&quot;</span>,
    <span class="token string">&quot;kubernetes.default&quot;</span>,
    <span class="token string">&quot;kubernetes.default.svc&quot;</span>,
    <span class="token string">&quot;kubernetes.default.svc.cluster&quot;</span>,
    <span class="token string">&quot;kubernetes.default.svc.cluster.local&quot;</span>
  <span class="token punctuation">]</span>,
  <span class="token string">&quot;key&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
    <span class="token string">&quot;algo&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;rsa&quot;</span>,
    <span class="token string">&quot;size&quot;</span><span class="token builtin class-name">:</span> <span class="token number">2048</span>
  <span class="token punctuation">}</span>,
  <span class="token string">&quot;names&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token string">&quot;C&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;CN&quot;</span>,
      <span class="token string">&quot;ST&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;Beijing&quot;</span>,
      <span class="token string">&quot;L&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;XS&quot;</span>,
      <span class="token string">&quot;O&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;k8s&quot;</span>,
      <span class="token string">&quot;OU&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;System&quot;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong><code>kubernetes</code> 服务的服务 IP</strong>（一般是 <code>kube-apiserver</code> 指定的 <code>service-cluster-ip-range</code> 网段的第一个IP，如 10.0.0.1）</li></ul><h3 id="_6-2-使用根证书-ca-pem-签发-apiserver-证书" tabindex="-1"><a class="header-anchor" href="#_6-2-使用根证书-ca-pem-签发-apiserver-证书" aria-hidden="true">#</a> 6.2 使用根证书(ca.pem)签发 apiserver 证书</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>cfssl gencert <span class="token punctuation">\\</span>
        <span class="token parameter variable">-ca</span><span class="token operator">=</span>/etc/kubernetes/ca/ca.pem <span class="token punctuation">\\</span>
        -ca-key<span class="token operator">=</span>/etc/kubernetes/ca/ca-key.pem <span class="token punctuation">\\</span>
        <span class="token parameter variable">-config</span><span class="token operator">=</span>/etc/kubernetes/ca/ca-config.json <span class="token punctuation">\\</span>
        <span class="token parameter variable">-profile</span><span class="token operator">=</span>kubernetes server-csr.json <span class="token operator">|</span> cfssljson <span class="token parameter variable">-bare</span> server
        
<span class="token comment"># 跟之前类似生成三个文件server.csr是个中间证书请求文件，我们最终要的是server-key.pem和server.pem</span>
<span class="token operator">&gt;</span> <span class="token function">ls</span>
<span class="token operator">&gt;</span> server-csr.json server.csr server.pem server-key.pem
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="七、创建-admin-证书" tabindex="-1"><a class="header-anchor" href="#七、创建-admin-证书" aria-hidden="true">#</a> 七、创建 Admin 证书</h2><h3 id="_7-1-生成-admin-证书配置" tabindex="-1"><a class="header-anchor" href="#_7-1-生成-admin-证书配置" aria-hidden="true">#</a> 7.1 生成 Admin 证书配置</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># kubectl证书放在这，由于kubectl相当于系统管理员，我们使用admin命名</span>
<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /etc/kubernetes/ca/admin
<span class="token builtin class-name">cd</span> /etc/kubernetes/ca/admin
<span class="token function">vim</span> admin-csr.json
<span class="token comment"># 内容如下</span>
<span class="token punctuation">{</span>
  <span class="token string">&quot;CN&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;admin&quot;</span>,
  <span class="token string">&quot;hosts&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>,
  <span class="token string">&quot;key&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
    <span class="token string">&quot;algo&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;rsa&quot;</span>,
    <span class="token string">&quot;size&quot;</span><span class="token builtin class-name">:</span> <span class="token number">2048</span>
  <span class="token punctuation">}</span>,
  <span class="token string">&quot;names&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token string">&quot;C&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;CN&quot;</span>,
      <span class="token string">&quot;ST&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;BeiJing&quot;</span>,
      <span class="token string">&quot;L&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;BeiJing&quot;</span>,
      <span class="token string">&quot;O&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;system:masters&quot;</span>,
      <span class="token string">&quot;OU&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;System&quot;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-2-使用根证书-ca-pem-签发admin证书" tabindex="-1"><a class="header-anchor" href="#_7-2-使用根证书-ca-pem-签发admin证书" aria-hidden="true">#</a> 7.2 使用根证书(ca.pem)签发admin证书</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>cfssl gencert <span class="token punctuation">\\</span>
        <span class="token parameter variable">-ca</span><span class="token operator">=</span>/etc/kubernetes/ca/ca.pem <span class="token punctuation">\\</span>
        -ca-key<span class="token operator">=</span>/etc/kubernetes/ca/ca-key.pem <span class="token punctuation">\\</span>
        <span class="token parameter variable">-config</span><span class="token operator">=</span>/etc/kubernetes/ca/ca-config.json <span class="token punctuation">\\</span>
        <span class="token parameter variable">-profile</span><span class="token operator">=</span>kubernetes admin-csr.json <span class="token operator">|</span> cfssljson <span class="token parameter variable">-bare</span> admin
        
<span class="token comment"># 我们最终要的是admin-key.pem和admin.pem</span>
<span class="token operator">&gt;</span> <span class="token function">ls</span>
<span class="token operator">&gt;</span> admin.csr  admin-csr.json  admin-key.pem  admin.pem
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="八、创建-kube-proxy-证书" tabindex="-1"><a class="header-anchor" href="#八、创建-kube-proxy-证书" aria-hidden="true">#</a> 八、创建 kube-proxy 证书</h2><h3 id="_8-1-生成-kube-proxy-证书配置" tabindex="-1"><a class="header-anchor" href="#_8-1-生成-kube-proxy-证书配置" aria-hidden="true">#</a> 8.1 生成 kube-proxy 证书配置</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># proxy证书放在这</span>
<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /etc/kubernetes/ca/kube-proxy
<span class="token builtin class-name">cd</span> /etc/kubernetes/ca/kube-proxy
<span class="token function">vim</span> kube-proxy-csr.json
<span class="token comment"># 内容如下</span>
<span class="token punctuation">{</span>
  <span class="token string">&quot;CN&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;system:kube-proxy&quot;</span>,
  <span class="token string">&quot;hosts&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>,
  <span class="token string">&quot;key&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
    <span class="token string">&quot;algo&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;rsa&quot;</span>,
    <span class="token string">&quot;size&quot;</span><span class="token builtin class-name">:</span> <span class="token number">2048</span>
  <span class="token punctuation">}</span>,
  <span class="token string">&quot;names&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token string">&quot;C&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;CN&quot;</span>,
      <span class="token string">&quot;ST&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;Beijing&quot;</span>,
      <span class="token string">&quot;L&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;BeiJing&quot;</span>,
      <span class="token string">&quot;O&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;k8s&quot;</span>,
      <span class="token string">&quot;OU&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;System&quot;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>字段说明：</p><ul><li><p>CN 指定该证书的 User 为 <code>system:kube-proxy</code></p></li><li><p><code>kube-apiserver</code> 预定义的 RoleBinding <code>system:node-proxy</code> 将User <code>system:kube-proxy</code> 与 Role <code>system:node-proxier</code> 绑定，授予了调用 <code>kube-api-server</code> proxy的相关 API 的权限</p></li></ul><h3 id="_8-2-使用根证书-ca-pem-签发proxy证书" tabindex="-1"><a class="header-anchor" href="#_8-2-使用根证书-ca-pem-签发proxy证书" aria-hidden="true">#</a> 8.2 使用根证书(ca.pem)签发proxy证书</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>cfssl gencert <span class="token punctuation">\\</span>
        <span class="token parameter variable">-ca</span><span class="token operator">=</span>/etc/kubernetes/ca/ca.pem <span class="token punctuation">\\</span>
        -ca-key<span class="token operator">=</span>/etc/kubernetes/ca/ca-key.pem <span class="token punctuation">\\</span>
        <span class="token parameter variable">-config</span><span class="token operator">=</span>/etc/kubernetes/ca/ca-config.json <span class="token punctuation">\\</span>
        <span class="token parameter variable">-profile</span><span class="token operator">=</span>kubernetes kube-proxy-csr.json <span class="token operator">|</span> cfssljson <span class="token parameter variable">-bare</span> kube-proxy
        
<span class="token comment"># 我们最终要的是kube-proxy-key.pem和kube-proxy.pem</span>
<span class="token operator">&gt;</span> <span class="token function">ls</span>
<span class="token operator">&gt;</span> kube-proxy.csr  kube-proxy-csr.json  kube-proxy-key.pem  kube-proxy.pem
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="九、分发证书" tabindex="-1"><a class="header-anchor" href="#九、分发证书" aria-hidden="true">#</a> 九、分发证书</h2><p>将生成的证书和秘钥文件（后缀名为<code>.pem</code>）拷贝到所有机器的 <code>/etc/kubernetes/ca</code> 目录下备用；</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 最后查看生成的证书目录</span>
<span class="token operator">&gt;</span> <span class="token function">ls</span> /etc/kubernetes/ca
<span class="token operator">&gt;</span> admin  ca-config.json  ca.csr  ca-csr.json  ca-key.pem  ca.pem  etcd  kube-proxy  apiserver
<span class="token comment"># 分发证书</span>
<span class="token function">scp</span> <span class="token parameter variable">-r</span> /etc/kubernetes/ca root@其他节点ip:/etc/kubernetes/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="十、启用-tls-bootstrapping-机制" tabindex="-1"><a class="header-anchor" href="#十、启用-tls-bootstrapping-机制" aria-hidden="true">#</a> 十、启用 TLS Bootstrapping 机制</h2><p>TLS Bootstraping：Master apiserver启用TLS认证后，Node节点kubelet和kube-proxy要与kube-apiserver进行通信，必须使用CA签发的有效证书才可以，当Node节点很多时，这种客户端证书颁发需要大量工作，同样也会增加集群扩展复杂度。为了简化流程，Kubernetes引入了TLS bootstraping机制来自动颁发客户端证书，kubelet会以一个低权限用户自动向apiserver申请证书，kubelet的证书由apiserver动态签署。所以强烈建议在Node上使用这种方式，目前主要用于kubelet，kube-proxy还是由我们统一颁发一个证书。</p><p><strong>TLS bootstraping 工作流程：</strong></p><img src="https://media.zenghr.cn/blog/img/TLS bootstraping 工作流程.png" alt="TLSbootstraping工作流程" style="zoom:67%;"><h3 id="_10-1-生成token认证文件" tabindex="-1"><a class="header-anchor" href="#_10-1-生成token认证文件" aria-hidden="true">#</a> 10.1 生成token认证文件</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 生成随机token</span>
<span class="token function">head</span> <span class="token parameter variable">-c</span> <span class="token number">16</span> /dev/urandom <span class="token operator">|</span> od <span class="token parameter variable">-An</span> <span class="token parameter variable">-t</span> x <span class="token operator">|</span> <span class="token function">tr</span> <span class="token parameter variable">-d</span> <span class="token string">&#39; &#39;</span>
<span class="token comment"># 按照固定格式写入token.csv，注意替换token内容</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;734883758a7159caba1d9501c22f1408,kubelet-bootstrap,10001,<span class="token entity" title="\\&quot;">\\&quot;</span>system:kubelet-bootstrap<span class="token entity" title="\\&quot;">\\&quot;</span>&quot;</span> <span class="token operator">&gt;</span> /etc/kubernetes/ca/server/token.csv
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,70);function C(j,T){const e=l("router-link"),i=l("ExternalLinkIcon");return o(),p("div",null,[d,m,s("nav",v,[s("ul",null,[s("li",null,[a(e,{to:"#一、理解认证授权"},{default:t(()=>[n("一、理解认证授权")]),_:1}),s("ul",null,[s("li",null,[a(e,{to:"#_1-1-为什么要认证"},{default:t(()=>[n("1.1 为什么要认证")]),_:1})]),s("li",null,[a(e,{to:"#_1-2-概念梳理"},{default:t(()=>[n("1.2 概念梳理")]),_:1})]),s("li",null,[a(e,{to:"#_1-3-什么是授权"},{default:t(()=>[n("1.3 什么是授权")]),_:1})])])]),s("li",null,[a(e,{to:"#二、kubernetes的认证授权"},{default:t(()=>[n("二、kubernetes的认证授权")]),_:1}),s("ul",null,[s("li",null,[a(e,{to:"#_2-1-kubernetes的认证"},{default:t(()=>[n("2.1 kubernetes的认证")]),_:1})]),s("li",null,[a(e,{to:"#_2-2-kubernetes的授权"},{default:t(()=>[n("2.2 kubernetes的授权")]),_:1})]),s("li",null,[a(e,{to:"#_2-3-kubernetes的admissioncontrol"},{default:t(()=>[n("2.3 kubernetes的AdmissionControl")]),_:1})])])]),s("li",null,[a(e,{to:"#三、安装-cfssl"},{default:t(()=>[n("三、安装 CFSSL")]),_:1})]),s("li",null,[a(e,{to:"#证书位置"},{default:t(()=>[n("证书位置")]),_:1})]),s("li",null,[a(e,{to:"#四、创建-ca-根证书"},{default:t(()=>[n("四、创建 CA (根证书)")]),_:1}),s("ul",null,[s("li",null,[a(e,{to:"#_4-1-创建-ca-配置文件"},{default:t(()=>[n("4.1 创建 CA 配置文件")]),_:1})]),s("li",null,[a(e,{to:"#_4-2-创建-ca-证书签名请求"},{default:t(()=>[n("4.2 创建 CA 证书签名请求")]),_:1})]),s("li",null,[a(e,{to:"#_4-3-生成-ca-证书和私钥"},{default:t(()=>[n("4.3 生成 CA 证书和私钥")]),_:1})])])]),s("li",null,[a(e,{to:"#五、创建-etcd-证书"},{default:t(()=>[n("五、创建 ETCD 证书")]),_:1}),s("ul",null,[s("li",null,[a(e,{to:"#_5-1-生成-etcd-证书配置"},{default:t(()=>[n("5.1 生成 etcd 证书配置")]),_:1})]),s("li",null,[a(e,{to:"#_5-2-使用根证书-ca-pem-签发etcd证书"},{default:t(()=>[n("5.2 使用根证书(ca.pem)签发etcd证书")]),_:1})])])]),s("li",null,[a(e,{to:"#六、创建-api-server-证书"},{default:t(()=>[n("六、创建 Api-server 证书")]),_:1}),s("ul",null,[s("li",null,[a(e,{to:"#_6-1-生成-api-server-证书配置"},{default:t(()=>[n("6.1 生成 Api-server 证书配置")]),_:1})]),s("li",null,[a(e,{to:"#_6-2-使用根证书-ca-pem-签发-apiserver-证书"},{default:t(()=>[n("6.2 使用根证书(ca.pem)签发 apiserver 证书")]),_:1})])])]),s("li",null,[a(e,{to:"#七、创建-admin-证书"},{default:t(()=>[n("七、创建 Admin 证书")]),_:1}),s("ul",null,[s("li",null,[a(e,{to:"#_7-1-生成-admin-证书配置"},{default:t(()=>[n("7.1 生成 Admin 证书配置")]),_:1})]),s("li",null,[a(e,{to:"#_7-2-使用根证书-ca-pem-签发admin证书"},{default:t(()=>[n("7.2 使用根证书(ca.pem)签发admin证书")]),_:1})])])]),s("li",null,[a(e,{to:"#八、创建-kube-proxy-证书"},{default:t(()=>[n("八、创建 kube-proxy 证书")]),_:1}),s("ul",null,[s("li",null,[a(e,{to:"#_8-1-生成-kube-proxy-证书配置"},{default:t(()=>[n("8.1 生成 kube-proxy 证书配置")]),_:1})]),s("li",null,[a(e,{to:"#_8-2-使用根证书-ca-pem-签发proxy证书"},{default:t(()=>[n("8.2 使用根证书(ca.pem)签发proxy证书")]),_:1})])])]),s("li",null,[a(e,{to:"#九、分发证书"},{default:t(()=>[n("九、分发证书")]),_:1})]),s("li",null,[a(e,{to:"#十、启用-tls-bootstrapping-机制"},{default:t(()=>[n("十、启用 TLS Bootstrapping 机制")]),_:1}),s("ul",null,[s("li",null,[a(e,{to:"#_10-1-生成token认证文件"},{default:t(()=>[n("10.1 生成token认证文件")]),_:1})])])])])]),k,s("blockquote",null,[s("p",null,[n("该段理解引用 "),s("a",b,[n("kubernetes-with-ca"),a(i)])])]),g,h,q,f,s("ul",null,[s("li",null,[_,n(" 这两个概念属于密码学的东西，对于没接触过的同学不太容易理解。可以参考知乎大神的生动讲解："),s("a",x,[n("《如何用通俗易懂的话来解释非对称加密》"),a(i)])]),s("li",null,[y,n(" 了解了对称加密和非对称加密后，我们就可以了解一下SSL/TLS了。同样，已经有大神总结了非常好的入门文章："),s("a",S,[n("《SSL/TLS协议运行机制的概述》"),a(i)])])]),A])}const N=c(u,[["render",C],["__file","01.创建TLS证书和秘钥.html.vue"]]);export{N as default};
