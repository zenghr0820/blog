import{_ as h}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as k,b as s,a as e,d as n,w as t,r as p,o as B,i as l}from"./app-CZhfuL-4.js";const r={},d={class:"table-of-contents"};function g(y,i){const a=p("router-link");return B(),k("div",null,[i[18]||(i[18]=s("h1",{id:"java基础-面向对象",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#java基础-面向对象"},[s("span",null,"Java基础 - 面向对象")])],-1)),i[19]||(i[19]=s("div",{class:"hint-container tip"},[s("p",{class:"hint-container-title"},"提示"),s("p",null,"本文介绍 Java 面向对象的相关知识")],-1)),s("nav",d,[s("ul",null,[s("li",null,[n(a,{to:"#封装"},{default:t(()=>i[0]||(i[0]=[l("封装")])),_:1}),s("ul",null,[s("li",null,[n(a,{to:"#封装好处"},{default:t(()=>i[1]||(i[1]=[l("封装好处")])),_:1})]),s("li",null,[n(a,{to:"#javabean的三个规范"},{default:t(()=>i[2]||(i[2]=[l("JavaBean的三个规范")])),_:1})])])]),s("li",null,[n(a,{to:"#继承"},{default:t(()=>i[3]||(i[3]=[l("继承")])),_:1}),s("ul",null,[s("li",null,[n(a,{to:"#访问修饰符"},{default:t(()=>i[4]||(i[4]=[l("访问修饰符")])),_:1})]),s("li",null,[n(a,{to:"#_1-什么是抽象类"},{default:t(()=>i[5]||(i[5]=[l("1. 什么是抽象类")])),_:1})]),s("li",null,[n(a,{to:"#_2-什么是接口"},{default:t(()=>i[6]||(i[6]=[l("2. 什么是接口")])),_:1})]),s("li",null,[n(a,{to:"#_3-抽象与接口的区别"},{default:t(()=>i[7]||(i[7]=[l("3. 抽象与接口的区别")])),_:1})]),s("li",null,[n(a,{to:"#_4-何时使用抽象、接口"},{default:t(()=>i[8]||(i[8]=[l("4. 何时使用抽象、接口")])),_:1})])])]),s("li",null,[n(a,{to:"#多态"},{default:t(()=>i[9]||(i[9]=[l("多态")])),_:1}),s("ul",null,[s("li",null,[n(a,{to:"#_1、分类"},{default:t(()=>i[10]||(i[10]=[l("1、分类")])),_:1})]),s("li",null,[n(a,{to:"#_2、必要条件"},{default:t(()=>i[11]||(i[11]=[l("2、必要条件")])),_:1})]),s("li",null,[n(a,{to:"#_3、继承关系"},{default:t(()=>i[12]||(i[12]=[l("3、继承关系")])),_:1})]),s("li",null,[n(a,{to:"#_4、实现关系"},{default:t(()=>i[13]||(i[13]=[l("4、实现关系")])),_:1})]),s("li",null,[n(a,{to:"#_5、多态时方法调用问题"},{default:t(()=>i[14]||(i[14]=[l("5、多态时方法调用问题")])),_:1})]),s("li",null,[n(a,{to:"#_6、多态中的类型转换"},{default:t(()=>i[15]||(i[15]=[l("6、多态中的类型转换")])),_:1})]),s("li",null,[n(a,{to:"#_7、多态总结"},{default:t(()=>i[16]||(i[16]=[l("7、多态总结")])),_:1})])])]),s("li",null,[n(a,{to:"#参考资料"},{default:t(()=>i[17]||(i[17]=[l("参考资料")])),_:1})])])]),i[20]||(i[20]=e(`<h2 id="封装" tabindex="-1"><a class="header-anchor" href="#封装"><span>封装</span></a></h2><h3 id="封装好处" tabindex="-1"><a class="header-anchor" href="#封装好处"><span>封装好处</span></a></h3><ul><li>尽可能的隐藏信息和功能实现细节</li><li>保证数据的安全性，防止随意修改数据</li><li>提高组件的复用性</li></ul><h3 id="javabean的三个规范" tabindex="-1"><a class="header-anchor" href="#javabean的三个规范"><span>JavaBean的三个规范</span></a></h3><ul><li>类名用 <strong>public</strong> 修饰符修饰</li><li>类的成员变量用 <strong>private</strong> 修饰，阻止外部直接调用，并且需要提供一对 <strong>公共访问器(getter,setter)</strong> 给外界使用</li><li>当显示定义了 <strong>有参构造方法</strong> 时需要 提供 <strong>无参构造器</strong>，当你有定义有参构造器时， <strong>JVM</strong> 不会自动帮你分配无参构造器</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 规范1 类名使用 public 修饰符</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> Student</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 规范二 字段使用 private 修饰符 修饰</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> name</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 名字</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> age</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 年龄</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">	</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 规范三 要有无参构造</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> Student</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">        </span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">    </span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> Student</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E06C75;--shiki-light-font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> name</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E06C75;--shiki-light-font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> age</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">        setName</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(name);</span></span>
<span class="line"><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">        setAge</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(age);</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">    </span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 规范四 每个字段要有 get、set</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> getName</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> name;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> setName</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E06C75;--shiki-light-font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> name</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">        this</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">name</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> name;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> getAge</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> age;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> setAge</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E06C75;--shiki-light-font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> age</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">        this</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">age</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> age;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="继承" tabindex="-1"><a class="header-anchor" href="#继承"><span>继承</span></a></h2><h3 id="访问修饰符" tabindex="-1"><a class="header-anchor" href="#访问修饰符"><span>访问修饰符</span></a></h3><p>Java 中有三个访问修饰符 <strong>private</strong>、<strong>protected</strong>、<strong>public</strong>以及一个缺省的修饰符，表示包可见</p><p>可以对类或者类的字段、方法加上访问修饰符，下面的表格表示各个修饰符的范围：</p><table><thead><tr><th style="text-align:center;">访问修饰符</th><th style="text-align:center;">本类</th><th style="text-align:center;">同包子类</th><th style="text-align:center;">同包其他类</th><th style="text-align:center;">不同包子类</th><th style="text-align:center;">不同包其他类</th></tr></thead><tbody><tr><td style="text-align:center;">private</td><td style="text-align:center;">✔</td><td style="text-align:center;">✘</td><td style="text-align:center;">✘</td><td style="text-align:center;">✘</td><td style="text-align:center;">✘</td></tr><tr><td style="text-align:center;">默认</td><td style="text-align:center;">✔</td><td style="text-align:center;">✔</td><td style="text-align:center;">✔</td><td style="text-align:center;">✘</td><td style="text-align:center;">✘</td></tr><tr><td style="text-align:center;">protected</td><td style="text-align:center;">✔</td><td style="text-align:center;">✔</td><td style="text-align:center;">✔</td><td style="text-align:center;">✔</td><td style="text-align:center;">✘</td></tr><tr><td style="text-align:center;">public</td><td style="text-align:center;">✔</td><td style="text-align:center;">✔</td><td style="text-align:center;">✔</td><td style="text-align:center;">✔</td><td style="text-align:center;">✔</td></tr></tbody></table><ul><li><strong>private：</strong> 私有的，该修饰符控制只能本类中使用</li><li><strong>默认(缺省)：</strong> 友好的，访问范围是 本包中可见，也经常称为：包可见</li><li><strong>protected：</strong> 受保护的，访问范围是：本包可见以及继承的子类可见</li><li><strong>public：</strong> 公共的，所有地方都可以访问</li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p><strong><code>2021-04-14</code></strong> 添加 <strong>protected</strong> 补充理解： A是B的子类，B有一个 protected 的方法C， A的对象是否能够直接调用C方法？</p><p><strong>protected</strong> 方法在子类中可用，指的是 <em><strong>子类的代码中可以用，不是子类的对象</strong></em></p><p>具体例子：Object 是所有类的超类，其中 <strong>clone()</strong> 方法是用 protected 修饰的，<strong>clone()</strong> 就只能在子类代码中使用，子类实例化的对象不能使用，除非这个子类和 Object 在同一个包</p></div><h3 id="_1-什么是抽象类" tabindex="-1"><a class="header-anchor" href="#_1-什么是抽象类"><span>1. 什么是抽象类</span></a></h3><ul><li>抽象类就是使用 <strong>abstract</strong> 关键字定义的类</li><li>抽象类不能创建实例</li><li>抽象类中，可以定义抽象方法和普通方法，抽象方法必须定义在抽象类中</li><li>子类继承抽象类必须实现抽象类中的抽象方法，否则子类必须是抽象类</li></ul><blockquote><p>抽象类被创造出来就是为了继承</p><p><strong>抽象类继承方式：在类名后接 <code>extends</code> 关键字，子类只能继承一个父类</strong></p></blockquote><h3 id="_2-什么是接口" tabindex="-1"><a class="header-anchor" href="#_2-什么是接口"><span>2. 什么是接口</span></a></h3><div class="hint-container tip"><p class="hint-container-title">提示</p><p>接口类就是使用 <strong>interface</strong> 关键字定义的一种特殊的抽象类</p><p>接口是一种<strong>约定的规范</strong>，定义了应该有什么功能，本身不实现功能，具体交给实现类实现</p></div><h4 id="接口特性" tabindex="-1"><a class="header-anchor" href="#接口特性"><span>接口特性</span></a></h4><ul><li>接口可以包含变量，成员变量会被<strong>隐式地指定</strong>为 <strong><code>public static final</code></strong> 变量（并且只能是public static final变量，用private修饰会报编译错误）</li><li>接口可以包含方法，方法会被<strong>隐式地指定</strong>为 <strong><code>public abstract</code></strong> 方法且只能是public abstract方法（用其他关键字，比如private、protected、static、 final等修饰会报编译错误），并且接口中所有的方法不能有具体的实现，也就是说，接口中的方法必须都是抽象方法</li><li>一个类可以同时继承多个接口，且需要实现所继承接口的所有方法</li></ul><h4 id="接口实现方式" tabindex="-1"><a class="header-anchor" href="#接口实现方式"><span>接口实现方式</span></a></h4><ul><li>接口类使用 <em><strong>interface</strong></em> 定义</li><li>实现类使用 <em><strong>implements</strong></em> 关键字实现， 并且要在继承关键字 <strong>(extends)</strong> 后面，一个类可以实现多个接口类，使用 <strong>(,)</strong> 隔开就行</li></ul><p><strong>扩展：从Java1.8开始, Java支持在接口中定义有实现的方法：</strong></p><div class="language-java" data-highlighter="shiki" data-ext="java" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> interface</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> IWalkable</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">	public</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> abstract</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> walk</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">();</span><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//抽象方法</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">    default</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> defaultMethod</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(){</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">       System</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">&quot;有默认实现的方法, 属于对象&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">    static</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> defaultMethod</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(){</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">       System</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">&quot;有默认实现的方法, 属于类&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><h3 id="_3-抽象与接口的区别" tabindex="-1"><a class="header-anchor" href="#_3-抽象与接口的区别"><span>3. 抽象与接口的区别</span></a></h3><h4 id="相同点" tabindex="-1"><a class="header-anchor" href="#相同点"><span>相同点</span></a></h4><ol><li>都不能被实例化</li><li>接口的实现类或抽象类的子类都只有实现了<strong>接口或抽象类中的方法</strong>后才能实例化。</li></ol><h4 id="不同点" tabindex="-1"><a class="header-anchor" href="#不同点"><span>不同点</span></a></h4><ol><li>抽象类可以提供成员方法的实现细节，而接口中只能存在 <code>public abstract</code> 方法；</li><li>抽象类中的成员变量可以是各种类型的，而接口中的成员变量只能是 <code>public static final</code> 类型的；</li><li>接口只有定义，<strong>不能有方法的实现，java 1.8中可以定义default方法体</strong>，而抽象类可以有定义与实现，方法可在抽象类中实现。</li><li>接口中不能含有静态代码块，而抽象类可以有静态代码块和静态方法；</li><li>一个类只能继承一个抽象类，而一个类却可以实现多个接口。</li></ol><h3 id="_4-何时使用抽象、接口" tabindex="-1"><a class="header-anchor" href="#_4-何时使用抽象、接口"><span>4. 何时使用抽象、接口</span></a></h3><div class="hint-container tip"><p class="hint-container-title">提示</p><p>抽象类本质就是从 多个类中提取相同行为，更合适定义公共的行为</p><p>接口适合用来定义扩展功能</p></div><ul><li>当需要注重代码的扩展性或者可维护性，优先使用接口，接口和类之间没有任何层次关系</li><li>当需要为一些类提供<strong>公共的方法</strong>时，优先考虑抽象类；提供<strong>扩展功能</strong>使用接口</li></ul><h2 id="多态" tabindex="-1"><a class="header-anchor" href="#多态"><span>多态</span></a></h2><h3 id="_1、分类" tabindex="-1"><a class="header-anchor" href="#_1、分类"><span>1、分类</span></a></h3><p>多态分为编译时和运行时多态</p><ul><li>编译时多态：设计时多态，主要是指 方法的重载</li><li>运行时多态：指程序中定义的对象引用所指向的<strong>具体类型</strong>在运行期间才确定</li></ul><h3 id="_2、必要条件" tabindex="-1"><a class="header-anchor" href="#_2、必要条件"><span>2、必要条件</span></a></h3><ul><li>必须要有继承关系</li><li>必须要重写(实现)，没有继承就没有重写</li><li><strong>父类引用指向子类对象</strong> 或 <strong>子类对象指向父类引用</strong></li></ul><h3 id="_3、继承关系" tabindex="-1"><a class="header-anchor" href="#_3、继承关系"><span>3、继承关系</span></a></h3><div class="language-java" data-highlighter="shiki" data-ext="java" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">父类 变量名 </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> 实现类()</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">变量名</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">方法()</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span></code></pre></div><p><strong>Animal类</strong></p><div class="language-java" data-highlighter="shiki" data-ext="java" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> Animal</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> shut</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">    	System</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">&quot;Animal...shout...&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><p><strong>Cat类</strong></p><div class="language-java" data-highlighter="shiki" data-ext="java" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> Cat</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> extends</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> Animal</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> shut</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">    	System</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">&quot;妙妙妙...&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><p><strong>Dog类</strong></p><div class="language-java" data-highlighter="shiki" data-ext="java" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> Dog</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> extends</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> Animal</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> shut</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">    	System</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">&quot;哇哇哇...&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><p><strong>测试类</strong></p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> AnimalDemo</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#E06C75;--shiki-light-font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">        Animal</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> animal</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 创建Cat对象</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">        animal </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> Cat</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">        animal</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">shut</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 创建Dog对象</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">        animal </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> Dog</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">        animal</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">shut</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 输出结果:</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 妙妙妙...</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 哇哇哇...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>总结</strong></p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>父类引用变量指向于子类对象，调用方法时实际调用的是子类的方法。</p></div><h3 id="_4、实现关系" tabindex="-1"><a class="header-anchor" href="#_4、实现关系"><span>4、实现关系</span></a></h3><div class="language-java" data-highlighter="shiki" data-ext="java" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">接口 变量名 </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> 实现类()</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">变量名</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">方法()</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span></code></pre></div><p><strong>ISwimable 接口</strong></p><div class="language-java" data-highlighter="shiki" data-ext="java" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> interface</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> ISwimable</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">	void</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> swim</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><p><strong>Fish类</strong></p><div class="language-java" data-highlighter="shiki" data-ext="java" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> Fish</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> implements</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> ISwimable</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> swim</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">    	System</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">&quot;游啊游...&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><p><strong>Dog类</strong></p><div class="language-java" data-highlighter="shiki" data-ext="java" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> Dog</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> extends</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> Animal</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> implements</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> ISwimable</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> shut</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">    	System</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">&quot;哇哇哇...&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> swim</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">    	System</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">&quot;狗刨式...&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><p><strong>测试类</strong></p><div class="language-java" data-highlighter="shiki" data-ext="java" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> FishDemo</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#E06C75;--shiki-light-font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 创建Fish对象</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">        ISwimable</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> fish</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> Fish</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">        fish</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">swim</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">        fish </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> Dog</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">();</span><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//Dog也是实现了ISwimable接口的</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">        fish</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">swim</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 输出结果:</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 游啊游...</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 狗刨式...</span></span></code></pre></div><p><strong>总结</strong></p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>接口引用变量指向实现类对象，调用方法时实际调用的是实现类实现接口的方法。</p></div><h3 id="_5、多态时方法调用问题" tabindex="-1"><a class="header-anchor" href="#_5、多态时方法调用问题"><span>5、多态时方法调用问题</span></a></h3><p>在上面的例子中，<strong>Animal</strong> 对象调用 <strong>shut</strong> 方法，是调用 Animal 中的还是 Cat？观察下图👇</p><p><img src="https://media.zenghr.cn/blog/img/20210415/95gUlNIvozu1.png?imageslim" alt="mark"></p><p>调用流程：</p><ul><li>编译时判断 shut 方法是否在父类存在</li><li>不存在，则报错</li><li>找到：运行时再看子类 Cat 中是否有 该方法</li><li>找不到，执行父类的方法</li><li>找到，执行子类的方法</li></ul><h3 id="_6、多态中的类型转换" tabindex="-1"><a class="header-anchor" href="#_6、多态中的类型转换"><span>6、多态中的类型转换</span></a></h3><h4 id="类型转换" tabindex="-1"><a class="header-anchor" href="#类型转换"><span>类型转换</span></a></h4><p><strong>自动类型转换(向上转型)：把子类对象赋给父类变量（多态）</strong></p><div class="language-java" data-highlighter="shiki" data-ext="java" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 父类 &lt;= 子类</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Animal</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> a </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> Dog</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span></code></pre></div><p><strong>强制类型转换(向下转型)：把父类类型对象赋给子类类型变量。</strong></p><div class="language-java" data-highlighter="shiki" data-ext="java" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 子类 &lt;= (子类)父类</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Animal</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> a </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> Dog</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Dog</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> d </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> (Dog) a</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> //正确</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Cat</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> c </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> (Cat) a</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> //错误</span></span></code></pre></div><h4 id="instanceof" tabindex="-1"><a class="header-anchor" href="#instanceof"><span>instanceOf</span></a></h4><p>判断该对象是否是某一个类/接口的实例</p><div class="language-java" data-highlighter="shiki" data-ext="java" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">语法格式：</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">boolean</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> b </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> 对象A  </span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">instanceof</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">  类B</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //判断 A对象是否是 B类的实例？如果是,返回true</span></span></code></pre></div><div class="language-java" data-highlighter="shiki" data-ext="java" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Animal</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> a </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> Dog</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">System</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(a </span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">instanceof</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> Animal);</span><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> //true</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">System</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(a </span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">instanceof</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> Dog);</span><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> //true</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">System</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(a </span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">instanceof</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> Cat);</span><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> //false</span></span></code></pre></div><h3 id="_7、多态总结" tabindex="-1"><a class="header-anchor" href="#_7、多态总结"><span>7、多态总结</span></a></h3><div class="hint-container tip"><p class="hint-container-title">提示</p><p>一句话概括：<strong>多态就是 同一个引用数据类型变量，由于引用的实例不同，执行相同的方法，产生不同的结果</strong></p></div><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2><p><a href="https://www.pdai.tech/md/java/basic/java-basic-oop.html" target="_blank" rel="noopener noreferrer">Java 全栈知识体系 - 面向对象</a></p>`,81))])}const c=h(r,[["render",g]]),A=JSON.parse('{"path":"/Java/basic/02.Java%E5%9F%BA%E7%A1%80%20-%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1.html","title":"Java基础 - 面向对象","lang":"zh-CN","frontmatter":{"title":"Java基础 - 面向对象","date":"2021-04-09T22:00:20.000Z","re":"2021-04-09-java-basic-oop","category":["Java"],"description":"Java基础 - 面向对象 提示 本文介绍 Java 面向对象的相关知识 封装 封装好处 尽可能的隐藏信息和功能实现细节 保证数据的安全性，防止随意修改数据 提高组件的复用性 JavaBean的三个规范 类名用 public 修饰符修饰 类的成员变量用 private 修饰，阻止外部直接调用，并且需要提供一对 公共访问器(getter,setter) ...","permalink":"/passages/2021-04-09-java-basic-oop.html","head":[["meta",{"property":"og:url","content":"https://blog.zenghr.cn/passages/2021-04-09-java-basic-oop.html"}],["meta",{"property":"og:site_name","content":"Zenghr"}],["meta",{"property":"og:title","content":"Java基础 - 面向对象"}],["meta",{"property":"og:description","content":"Java基础 - 面向对象 提示 本文介绍 Java 面向对象的相关知识 封装 封装好处 尽可能的隐藏信息和功能实现细节 保证数据的安全性，防止随意修改数据 提高组件的复用性 JavaBean的三个规范 类名用 public 修饰符修饰 类的成员变量用 private 修饰，阻止外部直接调用，并且需要提供一对 公共访问器(getter,setter) ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://media.zenghr.cn/blog/img/20210415/95gUlNIvozu1.png?imageslim"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-07T18:18:47.000Z"}],["meta",{"property":"article:published_time","content":"2021-04-09T22:00:20.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-07T18:18:47.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java基础 - 面向对象\\",\\"image\\":[\\"https://media.zenghr.cn/blog/img/20210415/95gUlNIvozu1.png?imageslim\\"],\\"datePublished\\":\\"2021-04-09T22:00:20.000Z\\",\\"dateModified\\":\\"2025-04-07T18:18:47.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Zenghr\\"}]}"]]},"git":{"createdTime":1744049927000,"updatedTime":1744049927000,"contributors":[{"name":"zenghr","username":"zenghr","email":"zenghr","commits":1,"url":"https://github.com/zenghr"}]},"readingTime":{"minutes":7.32,"words":2195},"filePathRelative":"Java/basic/02.Java基础 - 面向对象.md","localizedDate":"2021年4月9日","excerpt":"\\n<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">提示</p>\\n<p>本文介绍 Java 面向对象的相关知识</p>\\n</div>\\n\\n<h2>封装</h2>\\n<h3>封装好处</h3>\\n<ul>\\n<li>尽可能的隐藏信息和功能实现细节</li>\\n<li>保证数据的安全性，防止随意修改数据</li>\\n<li>提高组件的复用性</li>\\n</ul>\\n<h3>JavaBean的三个规范</h3>\\n<ul>\\n<li>类名用 <strong>public</strong> 修饰符修饰</li>\\n<li>类的成员变量用 <strong>private</strong> 修饰，阻止外部直接调用，并且需要提供一对 <strong>公共访问器(getter,setter)</strong> 给外界使用</li>\\n<li>当显示定义了 <strong>有参构造方法</strong> 时需要 提供 <strong>无参构造器</strong>，当你有定义有参构造器时， <strong>JVM</strong> 不会自动帮你分配无参构造器</li>\\n</ul>","autoDesc":true}');export{c as comp,A as data};
