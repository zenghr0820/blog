import{_ as c}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as i,c as l,d as n,e as s,b as a,a as e}from"./app-21f1eb4c.js";const u={},d=e('<h1 id="golang-反射机制" tabindex="-1"><a class="header-anchor" href="#golang-反射机制" aria-hidden="true">#</a> golang 反射机制</h1><p>和 Java 语言一样，Go 也实现运行时反射，这为我们提供一种可以在运行时操作任意类型对象的能力。</p><p>在 go 语言中，实现反射能力的是 <code>reflect</code>包，能够让程序操作不同类型的对象。其中，在反射包中有两个非常重要的 <strong>类型</strong>和 <strong>函数</strong>，两个函数分别是：</p><ul><li><strong><code>reflect.TypeOf</code></strong> - 能获取对象的类型的信息</li><li><strong><code>reflect.ValueOf</code></strong> - 能获取对象的数据</li></ul>',4),r={href:"https://golang.org/pkg/reflect/#Type",target:"_blank",rel:"noopener noreferrer"},k=n("strong",null,[n("code",null,"reflect.Type")],-1),v={href:"https://golang.org/pkg/reflect/#Value",target:"_blank",rel:"noopener noreferrer"},m=n("strong",null,[n("code",null,"reflect.Value")],-1),b=n("figure",null,[n("img",{src:"https://media.zenghr.cn/blog/img/20210626/6hzQxX.png",alt:"6hzQxX",tabindex:"0",loading:"lazy"}),n("figcaption",null,"6hzQxX")],-1),f={id:"golang-反射注意",tabindex:"-1"},g=n("a",{class:"header-anchor",href:"#golang-反射注意","aria-hidden":"true"},"#",-1),y=e(`<div class="hint-container tip"><p class="hint-container-title">提示</p><p>golang 反射不能<strong>获取和修改</strong> 私有的属性以及方法</p><p>*<em>ValueOf(<em>ptr)</em></em> 方法传递的参数必须是 <strong>指针类型</strong> 才可以修改字段否则会报错</p></div><h2 id="type-和-typeof" tabindex="-1"><a class="header-anchor" href="#type-和-typeof" aria-hidden="true">#</a> Type 和 TypeOf</h2><p><strong>reflect.Type</strong> 类型是一个接口类型，内部指定了若干方法，通过这些方法我们可以获取到反射类型的各种信息，例如：字段、方法等</p><p>使用 <em><strong>reflect.TypeOf()</strong></em> 函数可以获取将任意值的类型对象 (<code>reflect.Type</code>)，程序通过类型对象可以访问任意值的类型信息</p><h3 id="_1-理解-type-和-种类-kind" tabindex="-1"><a class="header-anchor" href="#_1-理解-type-和-种类-kind" aria-hidden="true">#</a> 1. 理解 Type 和 种类 Kind</h3><p><strong>reflect.Type 是变量的类型，而不是追根溯源的最底层类型</strong></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> MyInt <span class="token builtin">int</span>
reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span>MyInt<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的 reflect.Type 就是 <em><code>MyInt</code></em>，而非 int，如果想获得 int 只能使用<strong>Kind()</strong></p><p>总结：<em><strong>Type 表示的是静态类型，而 kind 表示的是底层真实的类型</strong></em></p><h3 id="_2-获取类型名以及-kind" tabindex="-1"><a class="header-anchor" href="#_2-获取类型名以及-kind" aria-hidden="true">#</a> 2. 获取类型名以及 kind</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
    <span class="token string">&quot;fmt&quot;</span>
    <span class="token string">&quot;reflect&quot;</span>
<span class="token punctuation">)</span>

<span class="token comment">// 定义一个 MyInt 类型</span>
<span class="token keyword">type</span> MyInt <span class="token builtin">int</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 声明一个空结构体</span>
    <span class="token keyword">type</span> cat <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 获取结构体实例的反射类型对象</span>
    typeOfCat <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span>cat<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token comment">// 显示反射类型对象的名称和种类</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>typeOfCat<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> typeOfCat<span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment">// 获取Zero常量的反射类型对象</span>
    typeOfA <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span>Zero<span class="token punctuation">)</span>
    <span class="token comment">// 显示反射类型对象的名称和种类</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>typeOfA<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> typeOfA<span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码输出如下：</p><blockquote><p>cat struct</p><p>MyInt int</p></blockquote><h3 id="_3-type-常用方法" tabindex="-1"><a class="header-anchor" href="#_3-type-常用方法" aria-hidden="true">#</a> 3. Type 常用方法</h3><p>获取与成员相关的方法如下：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><strong>Field</strong>(i int) StructField</td><td>根据索引，返回索引对应的结构体字段的信息。当值不是结构体或索引超界时发生宕机</td></tr><tr><td><strong>NumField</strong>() int</td><td>返回结构体成员字段数量(包含私有字段)</td></tr><tr><td><strong>FieldByName</strong>(name string) (StructField, bool)</td><td>根据给定字符串返回字符串对应的结构体字段的信息。没有找到时 bool 返回 false</td></tr><tr><td>FieldByIndex(index []int) StructField</td><td>多层成员访问时，根据 []int 提供的每个结构体的字段索引，返回字段的信息。没有找到时返回零值</td></tr></tbody></table><p><strong>StructField结构</strong>，这个结构描述结构体的成员信息，通过这个信息可以获取成员与结构体的关系，如偏移、索引、是否为匿名字段、结构体标签（Struct Tag）等</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> StructField <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Name      <span class="token builtin">string</span>    <span class="token comment">// 字段名</span>
	PkgPath   <span class="token builtin">string</span>    <span class="token comment">// 字段路径</span>
	Type      Type      <span class="token comment">// 字段反射类型对象</span>
	Tag       StructTag <span class="token comment">// 字段的结构体标签</span>
	Offset    <span class="token builtin">uintptr</span>   <span class="token comment">// 字段在结构体中的相对偏移</span>
	Index     <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>     <span class="token comment">// Type.FieldByIndex中的返回的索引值</span>
	Anonymous <span class="token builtin">bool</span>      <span class="token comment">// 是否为匿名字段</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-获取成员反射信息" tabindex="-1"><a class="header-anchor" href="#_4-获取成员反射信息" aria-hidden="true">#</a> 4. 获取成员反射信息</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main
<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;fmt&quot;</span>
	<span class="token string">&quot;reflect&quot;</span>
<span class="token punctuation">)</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 声明一个空结构体</span>
	<span class="token keyword">type</span> cat <span class="token keyword">struct</span> <span class="token punctuation">{</span>
		Name <span class="token builtin">string</span>
		<span class="token comment">// 带有结构体tag的字段</span>
		Type <span class="token builtin">int</span> <span class="token string">\`json:&quot;type&quot; id:&quot;100&quot;\`</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// 创建cat的实例</span>
	ins <span class="token operator">:=</span> cat<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;mimi&quot;</span><span class="token punctuation">,</span> Type<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span>
	<span class="token comment">// 获取结构体实例的反射类型对象</span>
	typeOfCat <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span>ins<span class="token punctuation">)</span>
	<span class="token comment">// 遍历结构体所有成员</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> typeOfCat<span class="token punctuation">.</span><span class="token function">NumField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		<span class="token comment">// 获取每个成员的结构体字段类型</span>
		fieldType <span class="token operator">:=</span> typeOfCat<span class="token punctuation">.</span><span class="token function">Field</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
		<span class="token comment">// 输出成员名和tag</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;name: %v  tag: &#39;%v&#39;\\n&quot;</span><span class="token punctuation">,</span> fieldType<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> fieldType<span class="token punctuation">.</span>Tag<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// 通过字段名, 找到字段类型信息</span>
	<span class="token keyword">if</span> catType<span class="token punctuation">,</span> ok <span class="token operator">:=</span> typeOfCat<span class="token punctuation">.</span><span class="token function">FieldByName</span><span class="token punctuation">(</span><span class="token string">&quot;Type&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
		<span class="token comment">// 从tag中取出需要的tag</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>catType<span class="token punctuation">.</span>Tag<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;json&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> catType<span class="token punctuation">.</span>Tag<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-通过类型信息创建实例" tabindex="-1"><a class="header-anchor" href="#_5-通过类型信息创建实例" aria-hidden="true">#</a> 5. 通过类型信息创建实例</h3><p>当已知 reflect.Type 时，可以动态地创建这个类型的实例，实例的类型为指针</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> a <span class="token builtin">int</span>
	<span class="token comment">// 取变量a的反射类型对象</span>
	typeOfA <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
	<span class="token comment">// 根据反射类型对象创建类型实例</span>
	aIns <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>typeOfA<span class="token punctuation">)</span>
	<span class="token comment">// 输出：*int ptr</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>aIns<span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> aIns<span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="value-和-valueof" tabindex="-1"><a class="header-anchor" href="#value-和-valueof" aria-hidden="true">#</a> Value 和 ValueOf</h2><p><strong>reflect.Value</strong> 类型是一个结构体，封装了反射对象的值，内部若干方法，可以通过这些方法来获取和修改对象的值，使用 <strong><code>reflect.ValueOf</code></strong> 函数可以返回 Value 类型，value 类型还可以生成原始类型对象</p><h3 id="_1-生成原始类型的对象" tabindex="-1"><a class="header-anchor" href="#_1-生成原始类型的对象" aria-hidden="true">#</a> 1. 生成原始类型的对象</h3><p>可以通过下面几种方法从反射值对象 reflect.Value 中获取原值</p><table><thead><tr><th>方法名</th><th>说 明</th></tr></thead><tbody><tr><td><strong>Interface</strong>() interface {}</td><td>将值以 interface{} 类型返回，可以通过类型断言转换为指定类型</td></tr><tr><td>Int() int64</td><td>将值以 int 类型返回，所有有符号整型均可以此方式返回</td></tr><tr><td>Uint() uint64</td><td>将值以 uint 类型返回，所有无符号整型均可以此方式返回</td></tr><tr><td>Float() float64</td><td>将值以双精度（float64）类型返回，所有浮点数（float32、float64）均可以此方式返回</td></tr><tr><td>Bool() bool</td><td>将值以 bool 类型返回</td></tr><tr><td>Bytes() []bytes</td><td>将值以字节数组 []bytes 类型返回</td></tr><tr><td>String() string</td><td>将值以字符串类型返回</td></tr></tbody></table><p>代码演示如下👇</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 声明整型变量a并赋初值</span>
    <span class="token keyword">var</span> a <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">1024</span>
    <span class="token comment">// 获取变量a的反射值对象</span>
    valueOfA <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
    <span class="token comment">// 获取interface{}类型的值, 通过类型断言转换</span>
    <span class="token keyword">var</span> getA <span class="token builtin">int</span> <span class="token operator">=</span> valueOfA<span class="token punctuation">.</span><span class="token function">Interface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span>
    <span class="token comment">// 获取64位的值, 强制类型转换为int类型</span>
    <span class="token keyword">var</span> getA2 <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token function">int</span><span class="token punctuation">(</span>valueOfA<span class="token punctuation">.</span><span class="token function">Int</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>getA<span class="token punctuation">,</span> getA2<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-操作结构体成员的值" tabindex="-1"><a class="header-anchor" href="#_2-操作结构体成员的值" aria-hidden="true">#</a> 2. 操作结构体成员的值</h3><p>反射值对象（reflect.Value）提供对结构体访问的方法，通过这些方法可以完成对结构体任意值的访问，方法列表参考 <a href="#_3-type-%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95">Type 常用方法</a></p><p><strong>修改成员的值</strong> 使用 reflect.Value 对包装的值进行修改时，需要遵循一些规则。如果该对象不可寻址或者成员是私有的，则无法修改对象值</p><p><strong>判定是否可以操作的方法有如下👇</strong></p><table><thead><tr><th>方法名</th><th>描 述</th></tr></thead><tbody><tr><td><strong>Elem</strong>() Value</td><td>取值指向的元素值，类似于语言层<code>*</code>操作。当值类型不是指针或接口时发生宕 机，空指针时返回 nil 的 Value</td></tr><tr><td>Addr() Value</td><td>对可寻址的值返回其地址，类似于语言层<code>&amp;</code>操作。当值不可寻址时发生宕机</td></tr><tr><td>CanAddr() bool</td><td>表示值是否可寻址</td></tr><tr><td><strong>CanSet</strong>() bool</td><td>返回值能否被修改。要求值可寻址且是导出的字段</td></tr></tbody></table><p><strong>修改的方法如下👇</strong></p><table><thead><tr><th>Set(x Value)</th><th>将值设置为传入的反射值对象的值</th></tr></thead><tbody><tr><td>Setlnt(x int64)</td><td>使用 int64 设置值。当值的类型不是 int、int8、int16、 int32、int64 时会发生宕机</td></tr><tr><td>SetUint(x uint64)</td><td>使用 uint64 设置值。当值的类型不是 uint、uint8、uint16、uint32、uint64 时会发生宕机</td></tr><tr><td>SetFloat(x float64)</td><td>使用 float64 设置值。当值的类型不是 float32、float64 时会发生宕机</td></tr><tr><td>SetBool(x bool)</td><td>使用 bool 设置值。当值的类型不是 bod 时会发生宕机</td></tr><tr><td>SetBytes(x []byte)</td><td>设置字节数组 []bytes值。当值的类型不是 []byte 时会发生宕机</td></tr><tr><td>SetString(x string)</td><td>设置字符串值。当值的类型不是 string 时会发生宕机</td></tr></tbody></table><p><strong>代码案例如下</strong></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">type</span> dog <span class="token keyword">struct</span> <span class="token punctuation">{</span>
		LegCount <span class="token builtin">int</span>
		age <span class="token builtin">int</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// 获取dog实例地址的反射值对象</span>
	valueOfDog <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>dog<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token comment">// 取出dog实例地址的元素</span>
	valueOfDog <span class="token operator">=</span> valueOfDog<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token comment">// 获取legCount字段的值</span>
	vLegCount <span class="token operator">:=</span> valueOfDog<span class="token punctuation">.</span><span class="token function">FieldByName</span><span class="token punctuation">(</span><span class="token string">&quot;LegCount&quot;</span><span class="token punctuation">)</span>
	vAge <span class="token operator">:=</span> valueOfDog<span class="token punctuation">.</span><span class="token function">FieldByName</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">)</span>
	<span class="token comment">// 尝试设置legCount的值</span>
	vLegCount<span class="token punctuation">.</span><span class="token function">SetInt</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
	<span class="token comment">// 这里会报错</span>
	vAge<span class="token punctuation">.</span><span class="token function">SetInt</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>vLegCount<span class="token punctuation">.</span><span class="token function">Int</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="通过反射调用函数" tabindex="-1"><a class="header-anchor" href="#通过反射调用函数" aria-hidden="true">#</a> 通过反射调用函数</h2><p>如果反射值对象（reflect.Value）中值的类型为函数时，可以通过 reflect.Value 调用该函数，使用反射调用函数时，需要将参数使用反射值对象的切片 []reflect.Value 构造后传入 <strong>Call()</strong> 方法中，调用完成时，函数的返回值通过 []reflect.Value 返回</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main
<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;fmt&quot;</span>
	<span class="token string">&quot;reflect&quot;</span>
<span class="token punctuation">)</span>
<span class="token comment">// 普通函数</span>
<span class="token keyword">func</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> a <span class="token operator">+</span> b
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 将函数包装为反射值对象</span>
	funcValue <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>add<span class="token punctuation">)</span>
	<span class="token comment">// 构造函数参数, 传入两个整型值</span>
	paramList <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>reflect<span class="token punctuation">.</span>Value<span class="token punctuation">{</span>reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
	<span class="token comment">// 反射调用函数</span>
	retList <span class="token operator">:=</span> funcValue<span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span>paramList<span class="token punctuation">)</span>
	<span class="token comment">// 获取第一个返回值, 取整数值</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>retList<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Int</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="通过反射调用对象中的方法" tabindex="-1"><a class="header-anchor" href="#通过反射调用对象中的方法" aria-hidden="true">#</a> 通过反射调用对象中的方法</h2><p>如果反射值对象中具有方法时，可以通过反射调用方法，获取方法如下👇</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><strong>Method</strong>(i int) Value</td><td>根据索引，返回索引对应的方法</td></tr><tr><td><strong>NumMethod</strong>() int</td><td>返回结构体成员方法(包含私有)</td></tr><tr><td><strong>MethodByName</strong>(name string) Value</td><td>根据给定字符串返回字符串对应的结构体方法</td></tr></tbody></table><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;fmt&quot;</span>
	<span class="token string">&quot;reflect&quot;</span>
<span class="token punctuation">)</span>
<span class="token keyword">type</span> Cat <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Name <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Cat<span class="token punctuation">)</span> <span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;呜呜呜...&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	cat <span class="token operator">:=</span> Cat<span class="token punctuation">{</span><span class="token punctuation">}</span>
	valueOf <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cat<span class="token punctuation">)</span>
	showMethod <span class="token operator">:=</span> valueOf<span class="token punctuation">.</span><span class="token function">MethodByName</span><span class="token punctuation">(</span><span class="token string">&quot;Show&quot;</span><span class="token punctuation">)</span>
	showMethod<span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="反射实现-map-转-struct" tabindex="-1"><a class="header-anchor" href="#反射实现-map-转-struct" aria-hidden="true">#</a> 反射实现：map 转 struct</h2><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">Map2Struct</span><span class="token punctuation">(</span>m <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> obj <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	value <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>

	<span class="token comment">// obj 必须是指针且指针指向的必须是 struct</span>
	<span class="token keyword">if</span> value<span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> reflect<span class="token punctuation">.</span>Ptr <span class="token operator">&amp;&amp;</span> value<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> reflect<span class="token punctuation">.</span>Struct <span class="token punctuation">{</span>
		value <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		getMapName <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">{</span>
			<span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> m <span class="token punctuation">{</span>
				<span class="token keyword">if</span> strings<span class="token punctuation">.</span><span class="token function">EqualFold</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
					<span class="token keyword">return</span> v
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span>
			<span class="token keyword">return</span> <span class="token boolean">nil</span>
		<span class="token punctuation">}</span>
		<span class="token comment">// 循环赋值</span>
		<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> value<span class="token punctuation">.</span><span class="token function">NumField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
			<span class="token comment">// 获取字段 type 对象</span>
			field <span class="token operator">:=</span> value<span class="token punctuation">.</span><span class="token function">Field</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
			<span class="token keyword">if</span> <span class="token operator">!</span>field<span class="token punctuation">.</span><span class="token function">CanSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">continue</span>
			<span class="token punctuation">}</span>
			<span class="token comment">// 获取字段名称</span>
			fieldName <span class="token operator">:=</span> value<span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Field</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span>Name
			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;fieldName -&gt; &quot;</span><span class="token punctuation">,</span> fieldName<span class="token punctuation">)</span>
			<span class="token comment">// 获取 map 中的对应的值</span>
			fieldVal <span class="token operator">:=</span> <span class="token function">getMapName</span><span class="token punctuation">(</span>fieldName<span class="token punctuation">)</span>
			<span class="token keyword">if</span> fieldVal <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				field<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>fieldVal<span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;must prt&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="反射实现-struct-转-map" tabindex="-1"><a class="header-anchor" href="#反射实现-struct-转-map" aria-hidden="true">#</a> 反射实现：struct 转 map</h2><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">Struct2Map</span><span class="token punctuation">(</span>obj <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">{</span>
	value <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>

	<span class="token keyword">if</span> value<span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> reflect<span class="token punctuation">.</span>Ptr <span class="token operator">||</span> value<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> reflect<span class="token punctuation">.</span>Struct <span class="token punctuation">{</span>
		<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;must prt&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	value <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	t <span class="token operator">:=</span> value<span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token comment">// 创建 map</span>
	resultMap <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

	<span class="token comment">// 循环获取字段名称以及对应的值</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> value<span class="token punctuation">.</span><span class="token function">NumField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		val <span class="token operator">:=</span> value<span class="token punctuation">.</span><span class="token function">Field</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
		typeName <span class="token operator">:=</span> t<span class="token punctuation">.</span><span class="token function">Field</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
		<span class="token keyword">if</span> <span class="token operator">!</span>val<span class="token punctuation">.</span><span class="token function">CanSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			resultMap<span class="token punctuation">[</span>typeName<span class="token punctuation">.</span>Name<span class="token punctuation">]</span> <span class="token operator">=</span> reflect<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>typeName<span class="token punctuation">.</span>Type<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Interface</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token keyword">continue</span>
		<span class="token punctuation">}</span>
		resultMap<span class="token punctuation">[</span>typeName<span class="token punctuation">.</span>Name<span class="token punctuation">]</span> <span class="token operator">=</span> val<span class="token punctuation">.</span><span class="token function">Interface</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> resultMap
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,50);function h(w,_){const t=p("ExternalLinkIcon"),o=p("Badge");return i(),l("div",null,[d,n("p",null,[s("两个类型是 "),n("a",r,[k,a(t)]),s(" 和 "),n("a",v,[m,a(t)]),s("，它们与函数是一一对应的关系：")]),b,n("h2",f,[g,s(" golang 反射注意"),a(o,{text:"New"})]),y])}const O=c(u,[["render",h],["__file","01.golang基础-反射机制.html.vue"]]);export{O as default};
