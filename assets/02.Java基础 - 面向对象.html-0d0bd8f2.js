const e=JSON.parse('{"key":"v-0b6534c8","path":"/Java/basic/02.Java%E5%9F%BA%E7%A1%80%20-%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1.html","title":"Java基础 - 面向对象","lang":"zh-CN","frontmatter":{"title":"Java基础 - 面向对象","date":"2021-04-09T22:00:20.000Z","re":"2021-04-09-java-basic-oop","category":["Java"],"description":"Java基础 - 面向对象 提示 本文介绍 Java 面向对象的相关知识 封装 封装好处 尽可能的隐藏信息和功能实现细节 保证数据的安全性，防止随意修改数据 提高组件的复用性 JavaBean的三个规范 类名用 public 修饰符修饰 类的成员变量用 private 修饰，阻止外部直接调用，并且需要提供一对 公共访问器(getter,setter) 给外界使用 当显示定义了 有参构造方法 时需要 提供 无参构造器，当你有定义有参构造器时， JVM 不会自动帮你分配无参构造器","permalink":"/Java/basic/2021-04-09-java-basic-oop.html","head":[["meta",{"property":"og:url","content":"https://blog.zenghr.cn/Java/basic/2021-04-09-java-basic-oop.html"}],["meta",{"property":"og:site_name","content":"Zenghr"}],["meta",{"property":"og:title","content":"Java基础 - 面向对象"}],["meta",{"property":"og:description","content":"Java基础 - 面向对象 提示 本文介绍 Java 面向对象的相关知识 封装 封装好处 尽可能的隐藏信息和功能实现细节 保证数据的安全性，防止随意修改数据 提高组件的复用性 JavaBean的三个规范 类名用 public 修饰符修饰 类的成员变量用 private 修饰，阻止外部直接调用，并且需要提供一对 公共访问器(getter,setter) 给外界使用 当显示定义了 有参构造方法 时需要 提供 无参构造器，当你有定义有参构造器时， JVM 不会自动帮你分配无参构造器"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"Zenghr"}],["meta",{"property":"article:published_time","content":"2021-04-09T22:00:20.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java基础 - 面向对象\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-04-09T22:00:20.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Zenghr\\"}]}"]]},"headers":[{"level":2,"title":"封装","slug":"封装","link":"#封装","children":[{"level":3,"title":"封装好处","slug":"封装好处","link":"#封装好处","children":[]},{"level":3,"title":"JavaBean的三个规范","slug":"javabean的三个规范","link":"#javabean的三个规范","children":[]}]},{"level":2,"title":"继承","slug":"继承","link":"#继承","children":[{"level":3,"title":"访问修饰符","slug":"访问修饰符","link":"#访问修饰符","children":[]},{"level":3,"title":"1. 什么是抽象类","slug":"_1-什么是抽象类","link":"#_1-什么是抽象类","children":[]},{"level":3,"title":"2. 什么是接口","slug":"_2-什么是接口","link":"#_2-什么是接口","children":[]},{"level":3,"title":"3. 抽象与接口的区别","slug":"_3-抽象与接口的区别","link":"#_3-抽象与接口的区别","children":[]},{"level":3,"title":"4. 何时使用抽象、接口","slug":"_4-何时使用抽象、接口","link":"#_4-何时使用抽象、接口","children":[]}]},{"level":2,"title":"多态","slug":"多态","link":"#多态","children":[{"level":3,"title":"1、分类","slug":"_1、分类","link":"#_1、分类","children":[]},{"level":3,"title":"2、必要条件","slug":"_2、必要条件","link":"#_2、必要条件","children":[]},{"level":3,"title":"3、继承关系","slug":"_3、继承关系","link":"#_3、继承关系","children":[]},{"level":3,"title":"4、实现关系","slug":"_4、实现关系","link":"#_4、实现关系","children":[]},{"level":3,"title":"5、多态时方法调用问题","slug":"_5、多态时方法调用问题","link":"#_5、多态时方法调用问题","children":[]},{"level":3,"title":"6、多态中的类型转换","slug":"_6、多态中的类型转换","link":"#_6、多态中的类型转换","children":[]},{"level":3,"title":"7、多态总结","slug":"_7、多态总结","link":"#_7、多态总结","children":[]}]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{},"readingTime":{"minutes":7.32,"words":2195},"filePathRelative":"Java/basic/02.Java基础 - 面向对象.md","localizedDate":"2021年4月9日","excerpt":"<h1> Java基础 - 面向对象</h1>\\n<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">提示</p>\\n<p>本文介绍 Java 面向对象的相关知识</p>\\n</div>\\n\\n<h2> 封装</h2>\\n<h3> 封装好处</h3>\\n<ul>\\n<li>尽可能的隐藏信息和功能实现细节</li>\\n<li>保证数据的安全性，防止随意修改数据</li>\\n<li>提高组件的复用性</li>\\n</ul>\\n<h3> JavaBean的三个规范</h3>\\n<ul>\\n<li>类名用 <strong>public</strong> 修饰符修饰</li>\\n<li>类的成员变量用 <strong>private</strong> 修饰，阻止外部直接调用，并且需要提供一对 <strong>公共访问器(getter,setter)</strong> 给外界使用</li>\\n<li>当显示定义了 <strong>有参构造方法</strong> 时需要 提供 <strong>无参构造器</strong>，当你有定义有参构造器时， <strong>JVM</strong> 不会自动帮你分配无参构造器</li>\\n</ul>","autoDesc":true}');export{e as data};
