import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,o as t}from"./app-CLBazqBO.js";const l={};function e(h,i){return t(),a("div",null,i[0]||(i[0]=[n(`<h1 id="java基础-枚举类" tabindex="-1"><a class="header-anchor" href="#java基础-枚举类"><span>Java基础 - 枚举类</span></a></h1><blockquote><p>本文介绍 Java 枚举类的相关知识</p></blockquote><h2 id="枚举类的介绍" tabindex="-1"><a class="header-anchor" href="#枚举类的介绍"><span>枚举类的介绍</span></a></h2><p>Java 枚举是一个特殊的类，一般表示一组常量，比如一年的 4 个季节，一个年的 12 个月份，一个星期的 7 天，方向有东南西北等</p><h2 id="枚举类的使用规则" tabindex="-1"><a class="header-anchor" href="#枚举类的使用规则"><span>枚举类的使用规则</span></a></h2><ul><li><p><strong>类的对象是确定的有限个数</strong></p></li><li><p><strong>当需要定义一组常量时，建议使用枚举</strong></p></li><li><p><strong>如果枚举类中只有一个对象，则可以作为单例模式的实现方法</strong></p></li><li><p><strong>枚举类不能被继承</strong></p></li><li><p><strong>枚举类不能被单独的new创建对象</strong></p></li><li><p><strong>枚举类的构造器是私有的</strong></p></li></ul><h2 id="枚举类的应用场景" tabindex="-1"><a class="header-anchor" href="#枚举类的应用场景"><span>枚举类的应用场景</span></a></h2><ul><li><strong>星期：</strong> Monday（星期一）、Tuesday（星期二）、Wednesday（星期三）、Thursday（星期四）、Firday（星期五）、Saturday（星期六）、Sunday（星期日）</li><li><strong>性别：</strong> Man（男）、Woman（女）</li><li><strong>季节：</strong> Spring（春天）、Summer（夏天）、Autumn（秋天）、Winter（冬天）</li><li><strong>支付方式：</strong> Cash（现金）、WeChatPay（微信）、Alipay（支付宝）、BankCard（银行卡）、CreditCard（信用卡）</li><li><strong>订单状态：</strong> Nonpayment（未付款）、Paid（已付款）、Fulfilled（已配货）、Delivered（已发货）、Return（退货）、Checked（已确认）</li><li><strong>线程状态：</strong> Establish（创建）、Ready（就绪）、Run（运行）、Obstruct（阻塞）、Die（死亡）</li><li>等等……</li></ul><h2 id="使用案例" tabindex="-1"><a class="header-anchor" href="#使用案例"><span>使用案例</span></a></h2><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/**</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> * redis的key的管理类</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> * 约定：一个redis key 映射一个枚举实例</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> */</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Getter</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> enum</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> RedisKeys</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> {</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //用户登录key 实例</span></span>
<span class="line"><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">    USER_LOGIN_TOKEN</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">&quot;user_login_token&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;"> 30</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> *</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;"> 60L</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> )</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //注册短信验证码key 实例</span></span>
<span class="line"><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">    REGIST_VERIFGY_CODE</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">&quot;regist_verifgy_code&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;"> 5</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> *</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;"> 60L</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> )</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> prefix</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // key的前缀</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> Long</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> time</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //key有效时间， 单位是s</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> RedisKeys</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E06C75;--shiki-light-font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> prefix</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Long</span><span style="--shiki-light:#E06C75;--shiki-light-font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> time</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">){</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">        this</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">prefix</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> prefix;</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">        this</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">time</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> time;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //拼接出完整redis的key</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> join</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">... </span><span style="--shiki-light:#E06C75;--shiki-light-font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">values</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">){</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">        StringBuilder</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> sb</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> StringBuilder</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">80</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">        sb</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">append</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">prefix</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">        for</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> value</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> :</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> values) {</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">            sb</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">append</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">&quot;:&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">append</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(value);</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> sb</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">toString</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10)]))}const r=s(l,[["render",e]]),B=JSON.parse('{"path":"/Java/basic/06.Java%E5%9F%BA%E7%A1%80%20-%20%E6%9E%9A%E4%B8%BE%E7%B1%BB.html","title":"Java基础 - 枚举类","lang":"zh-CN","frontmatter":{"title":"Java基础 - 枚举类","date":"2021-08-05T17:00:00.000Z","re":"2021-08-05-java-basic-enum","category":["Java"],"description":"Java基础 - 枚举类 本文介绍 Java 枚举类的相关知识 枚举类的介绍 Java 枚举是一个特殊的类，一般表示一组常量，比如一年的 4 个季节，一个年的 12 个月份，一个星期的 7 天，方向有东南西北等 枚举类的使用规则 类的对象是确定的有限个数 当需要定义一组常量时，建议使用枚举 如果枚举类中只有一个对象，则可以作为单例模式的实现方法 枚举类...","permalink":"/passages/2021-08-05-java-basic-enum.html","head":[["meta",{"property":"og:url","content":"https://blog.zenghr.cn/passages/2021-08-05-java-basic-enum.html"}],["meta",{"property":"og:site_name","content":"Zenghr"}],["meta",{"property":"og:title","content":"Java基础 - 枚举类"}],["meta",{"property":"og:description","content":"Java基础 - 枚举类 本文介绍 Java 枚举类的相关知识 枚举类的介绍 Java 枚举是一个特殊的类，一般表示一组常量，比如一年的 4 个季节，一个年的 12 个月份，一个星期的 7 天，方向有东南西北等 枚举类的使用规则 类的对象是确定的有限个数 当需要定义一组常量时，建议使用枚举 如果枚举类中只有一个对象，则可以作为单例模式的实现方法 枚举类..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-07T19:41:43.000Z"}],["meta",{"property":"article:published_time","content":"2021-08-05T17:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-07T19:41:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java基础 - 枚举类\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-08-05T17:00:00.000Z\\",\\"dateModified\\":\\"2025-04-07T19:41:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Zenghr\\"}]}"]]},"git":{"createdTime":1744054903000,"updatedTime":1744054903000,"contributors":[{"name":"zenghr","username":"zenghr","email":"zenghr","commits":1,"url":"https://github.com/zenghr"}]},"readingTime":{"minutes":1.47,"words":440},"filePathRelative":"Java/basic/06.Java基础 - 枚举类.md","localizedDate":"2021年8月5日","excerpt":"\\n<blockquote>\\n<p>本文介绍 Java 枚举类的相关知识</p>\\n</blockquote>\\n<h2>枚举类的介绍</h2>\\n<p>Java 枚举是一个特殊的类，一般表示一组常量，比如一年的 4 个季节，一个年的 12 个月份，一个星期的 7 天，方向有东南西北等</p>\\n<h2>枚举类的使用规则</h2>\\n<ul>\\n<li>\\n<p><strong>类的对象是确定的有限个数</strong></p>\\n</li>\\n<li>\\n<p><strong>当需要定义一组常量时，建议使用枚举</strong></p>\\n</li>\\n<li>\\n<p><strong>如果枚举类中只有一个对象，则可以作为单例模式的实现方法</strong></p>\\n</li>\\n<li>\\n<p><strong>枚举类不能被继承</strong></p>\\n</li>\\n<li>\\n<p><strong>枚举类不能被单独的new创建对象</strong></p>\\n</li>\\n<li>\\n<p><strong>枚举类的构造器是私有的</strong></p>\\n</li>\\n</ul>","autoDesc":true}');export{r as comp,B as data};
