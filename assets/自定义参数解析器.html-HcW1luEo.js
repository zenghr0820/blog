import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,o as t}from"./app-BNF1hQAw.js";const e={};function l(h,s){return t(),a("div",null,s[0]||(s[0]=[n(`<h1 id="自定义参数解析器" tabindex="-1"><a class="header-anchor" href="#自定义参数解析器"><span>自定义参数解析器</span></a></h1><p>在项目开发中，经常会遇到很多地方都需要获取当前的登录用户对象，根据请求的 session 或者 token 去获取用户信息，于是经常会在很多地方出现获取用户信息的代码</p><div class="language-java" data-highlighter="shiki" data-ext="java" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//根据token获取用户信息</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> token </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> request</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">getHeader</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">&quot;token&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 查询用户</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">User</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> user </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> userService</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">getCurrentUser</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(token);</span></span></code></pre></div><p>每次都需要写相同的代码，当然我们也可以把这些重复代码封装到单独的方法中，但是这样还是不够优雅。</p><p>如果用过 SpringMvc 框架，就会知道该框架获取参数太方便了，参数自动封装到 JavaBean 、各种参数注解：<code>RequestParam</code> 、<code>PathVariable</code>等</p><p>那么 SpringMvc 到底是怎么从 request 中把参数提取出来直接给我们的呢，这就用到今天说的一个参数解析器接口：<strong><code>HandlerMethodArgumentResolver</code></strong></p><h2 id="handlermethodargumentresolver" tabindex="-1"><a class="header-anchor" href="#handlermethodargumentresolver"><span>HandlerMethodArgumentResolver</span></a></h2><p>自定义参数解析器需要实现 HandlerMethodArgumentResolver 接口，我们先来实现该接口，如下：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/**</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> * 将请求映射方法列表中 UserInfo 类型参数进行解析</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> * 解析成当前登录用户对象</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> */</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> CurrentUserArgumentResolver</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> implements</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> HandlerMethodArgumentResolver</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 如果参数类型是 UserInfo，并且参数上有 @CurrentUser 注解，则使用该参数解析器</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> boolean</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> supportsParameter</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">MethodParameter</span><span style="--shiki-light:#E06C75;--shiki-light-font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> methodParameter</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> methodParameter</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">getParameterType</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> UserInfo</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">class</span></span>
<span class="line"><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">                &amp;&amp;</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> methodParameter</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">hasParameterAnnotation</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">CurrentUser</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //解析器解析规则：</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //此处将 UserInfo 类型参数， 解析成当前登录用户对象。</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //当supportsParameter方法返回true时候才执行</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> Object</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> resolveArgument</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">MethodParameter</span><span style="--shiki-light:#E06C75;--shiki-light-font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> methodParameter</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">                                  ModelAndViewContainer</span><span style="--shiki-light:#E06C75;--shiki-light-font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> modelAndViewContainer</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">                                  NativeWebRequest</span><span style="--shiki-light:#E06C75;--shiki-light-font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> nativeWebRequest</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">                                  WebDataBinderFactory</span><span style="--shiki-light:#E06C75;--shiki-light-font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> webDataBinderFactory</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> throws</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> Exception</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">        HttpServletRequest</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> request</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> nativeWebRequest</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">getNativeRequest</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">HttpServletRequest</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">        String</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> token</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> request</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">getHeader</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">&quot;token&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> (UserInfo) </span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">userService</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">getCurrentUser</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(token);</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>supportsParameter：</strong> 该方法表示是否启用这个参数解析器，返回 true 表示启用，返回 false 表示不启用</li><li><strong>resolveArgument：</strong> 这是具体的解析过程，就是从 request 中取出参数的过程，方法的返回值就对应了接口中参数的值</li></ul><h2 id="使用自定义的注解来区分" tabindex="-1"><a class="header-anchor" href="#使用自定义的注解来区分"><span>使用自定义的注解来区分</span></a></h2><div class="language-java" data-highlighter="shiki" data-ext="java" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/**</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> * 用户参数注入注解</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> * 贴有该注解用户参数使用自定义的参数解析器</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> */</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Target</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">({</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">ElementType</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">PARAMETER</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">})</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Retention</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">RetentionPolicy</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">RUNTIME</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> @</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">interface</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> CurrentUser</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> {</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">}</span></span></code></pre></div><p>通过自定义注解来区分是用框架自带的解析器还是自定义的</p><h2 id="将自定义参数解析器添加到spring容器中" tabindex="-1"><a class="header-anchor" href="#将自定义参数解析器添加到spring容器中"><span>将自定义参数解析器添加到Spring容器中</span></a></h2><p>最后，我们再将自定义的参数解析器配置到 HandlerAdapter 中，配置方式如下：</p><div class="language-java" data-highlighter="shiki" data-ext="java" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Configuration</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> WebConfig</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> implements</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> WebMvcConfigurer</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 自定义的用户解析器</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Bean</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> CurrentUserArgumentResolver</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> currentUserArgumentResolver</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(){</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> CurrentUserArgumentResolver</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> addArgumentResolvers</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">List</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">HandlerMethodArgumentResolver</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#E06C75;--shiki-light-font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">resolvers</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">        resolvers</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">add</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">currentUserArgumentResolver</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><h2 id="使用案例" tabindex="-1"><a class="header-anchor" href="#使用案例"><span>使用案例</span></a></h2><div class="language-java" data-highlighter="shiki" data-ext="java" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">RequestMapping</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">&quot;/hello&quot;</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> hello</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">CurrentUser</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> UserInfo</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> userInfo) {</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">    System</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(userInfo);</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">}</span></span></code></pre></div><p>至此，就算配置完成了，接下来启动项目，用户登录成功后，访问接口，就可以看到返回当前登录用户数据了</p>`,19)]))}const r=i(e,[["render",l]]),B=JSON.parse('{"path":"/spring/spring-boot/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8F%82%E6%95%B0%E8%A7%A3%E6%9E%90%E5%99%A8.html","title":"SpringBoot 自定义参数解析器","lang":"zh-CN","frontmatter":{"title":"SpringBoot 自定义参数解析器","date":"2021-08-18T16:00:00.000Z","re":"2021-08-18-springboot-argument-resolver","star":true,"tag":["Spring","SpringBoot"],"category":["Spring","SpringBoot"],"description":"自定义参数解析器 在项目开发中，经常会遇到很多地方都需要获取当前的登录用户对象，根据请求的 session 或者 token 去获取用户信息，于是经常会在很多地方出现获取用户信息的代码 每次都需要写相同的代码，当然我们也可以把这些重复代码封装到单独的方法中，但是这样还是不够优雅。 如果用过 SpringMvc 框架，就会知道该框架获取参数太方便了，参数...","permalink":"/passages/2021-08-18-springboot-argument-resolver.html","head":[["meta",{"property":"og:url","content":"https://blog.zenghr.cn/passages/2021-08-18-springboot-argument-resolver.html"}],["meta",{"property":"og:site_name","content":"Zenghr"}],["meta",{"property":"og:title","content":"SpringBoot 自定义参数解析器"}],["meta",{"property":"og:description","content":"自定义参数解析器 在项目开发中，经常会遇到很多地方都需要获取当前的登录用户对象，根据请求的 session 或者 token 去获取用户信息，于是经常会在很多地方出现获取用户信息的代码 每次都需要写相同的代码，当然我们也可以把这些重复代码封装到单独的方法中，但是这样还是不够优雅。 如果用过 SpringMvc 框架，就会知道该框架获取参数太方便了，参数..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-07T20:13:02.000Z"}],["meta",{"property":"article:tag","content":"Spring"}],["meta",{"property":"article:tag","content":"SpringBoot"}],["meta",{"property":"article:published_time","content":"2021-08-18T16:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-07T20:13:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"SpringBoot 自定义参数解析器\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-08-18T16:00:00.000Z\\",\\"dateModified\\":\\"2025-04-07T20:13:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Zenghr\\"}]}"]]},"git":{"createdTime":1744056782000,"updatedTime":1744056782000,"contributors":[{"name":"zenghr","username":"zenghr","email":"zenghr","commits":1,"url":"https://github.com/zenghr"}]},"readingTime":{"minutes":2.35,"words":705},"filePathRelative":"spring/spring-boot/自定义参数解析器.md","localizedDate":"2021年8月18日","excerpt":"\\n<p>在项目开发中，经常会遇到很多地方都需要获取当前的登录用户对象，根据请求的 session 或者 token 去获取用户信息，于是经常会在很多地方出现获取用户信息的代码</p>\\n<div class=\\"language-java\\" data-highlighter=\\"shiki\\" data-ext=\\"java\\" style=\\"--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-dark-pro one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">//根据token获取用户信息</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#E5C07B;--shiki-dark:#E5C07B\\">String</span><span style=\\"--shiki-light:#E06C75;--shiki-dark:#E06C75\\"> token </span><span style=\\"--shiki-light:#56B6C2;--shiki-dark:#56B6C2\\">=</span><span style=\\"--shiki-light:#E5C07B;--shiki-dark:#E5C07B\\"> request</span><span style=\\"--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#61AFEF;--shiki-dark:#61AFEF\\">getHeader</span><span style=\\"--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#98C379;--shiki-dark:#98C379\\">\\"token\\"</span><span style=\\"--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">// 查询用户</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#E5C07B;--shiki-dark:#E5C07B\\">User</span><span style=\\"--shiki-light:#E06C75;--shiki-dark:#E06C75\\"> user </span><span style=\\"--shiki-light:#56B6C2;--shiki-dark:#56B6C2\\">=</span><span style=\\"--shiki-light:#E5C07B;--shiki-dark:#E5C07B\\"> userService</span><span style=\\"--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#61AFEF;--shiki-dark:#61AFEF\\">getCurrentUser</span><span style=\\"--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF\\">(token);</span></span></code></pre>\\n</div>","autoDesc":true}');export{r as comp,B as data};
