import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,a,b as i,h,d as k,r as e,o as p}from"./app-dDolP4Iy.js";const B={},d={id:"golang-反射注意",tabindex:"-1"},r={class:"header-anchor",href:"#golang-反射注意"};function g(y,s){const n=e("Badge");return p(),l("div",null,[s[1]||(s[1]=a('<h1 id="golang-反射机制" tabindex="-1"><a class="header-anchor" href="#golang-反射机制"><span>golang 反射机制</span></a></h1><p>和 Java 语言一样，Go 也实现运行时反射，这为我们提供一种可以在运行时操作任意类型对象的能力。</p><p>在 go 语言中，实现反射能力的是 <code>reflect</code>包，能够让程序操作不同类型的对象。其中，在反射包中有两个非常重要的 <strong>类型</strong>和 <strong>函数</strong>，两个函数分别是：</p><ul><li><strong><code>reflect.TypeOf</code></strong> - 能获取对象的类型的信息</li><li><strong><code>reflect.ValueOf</code></strong> - 能获取对象的数据</li></ul><p>两个类型是 <a href="https://golang.org/pkg/reflect/#Type" target="_blank" rel="noopener noreferrer"><strong><code>reflect.Type</code></strong></a> 和 <a href="https://golang.org/pkg/reflect/#Value" target="_blank" rel="noopener noreferrer"><strong><code>reflect.Value</code></strong></a>，它们与函数是一一对应的关系：</p><p><img src="https://media.zenghr.cn/blog/img/20210626/6hzQxX.png" alt="6hzQxX"></p>',6)),i("h2",d,[i("a",r,[i("span",null,[s[0]||(s[0]=h("golang 反射注意")),k(n,{text:"New"})])])]),s[2]||(s[2]=a(`<div class="hint-container tip"><p class="hint-container-title">提示</p><p>golang 反射不能<strong>获取和修改</strong> 私有的属性以及方法</p><p>*<em>ValueOf(<em>ptr)</em></em> 方法传递的参数必须是 <strong>指针类型</strong> 才可以修改字段否则会报错</p></div><h2 id="type-和-typeof" tabindex="-1"><a class="header-anchor" href="#type-和-typeof"><span>Type 和 TypeOf</span></a></h2><p><strong>reflect.Type</strong> 类型是一个接口类型，内部指定了若干方法，通过这些方法我们可以获取到反射类型的各种信息，例如：字段、方法等</p><p>使用 <em><strong>reflect.TypeOf()</strong></em> 函数可以获取将任意值的类型对象 (<code>reflect.Type</code>)，程序通过类型对象可以访问任意值的类型信息</p><h3 id="_1-理解-type-和-种类-kind" tabindex="-1"><a class="header-anchor" href="#_1-理解-type-和-种类-kind"><span>1. 理解 Type 和 种类 Kind</span></a></h3><p><strong>reflect.Type 是变量的类型，而不是追根溯源的最底层类型</strong></p><div class="language-go" data-highlighter="shiki" data-ext="go" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">type</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> MyInt</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> int</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">reflect</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">TypeOf</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">MyInt</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">Kind</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">()</span></span></code></pre></div><p>这里的 reflect.Type 就是 <em><code>MyInt</code></em>，而非 int，如果想获得 int 只能使用<strong>Kind()</strong></p><p>总结：<em><strong>Type 表示的是静态类型，而 kind 表示的是底层真实的类型</strong></em></p><h3 id="_2-获取类型名以及-kind" tabindex="-1"><a class="header-anchor" href="#_2-获取类型名以及-kind"><span>2. 获取类型名以及 kind</span></a></h3><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">package</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> main</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span></span>
<span class="line"><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">    &quot;fmt&quot;</span></span>
<span class="line"><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">    &quot;reflect&quot;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 定义一个 MyInt 类型</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">type</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> MyInt</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> int</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">func</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 声明一个空结构体</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">    type</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> cat</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> struct</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 获取结构体实例的反射类型对象</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">    typeOfCat</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> reflect</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">TypeOf</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">cat</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">{})</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 显示反射类型对象的名称和种类</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">    fmt</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">Println</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">typeOfCat</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">Name</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(), </span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">typeOfCat</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">Kind</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">())</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 获取Zero常量的反射类型对象</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">    typeOfA</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> reflect</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">TypeOf</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">Zero</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 显示反射类型对象的名称和种类</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">    fmt</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">Println</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">typeOfA</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">Name</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(), </span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">typeOfA</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">Kind</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">())</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码输出如下：</p><blockquote><p>cat struct</p><p>MyInt int</p></blockquote><h3 id="_3-type-常用方法" tabindex="-1"><a class="header-anchor" href="#_3-type-常用方法"><span>3. Type 常用方法</span></a></h3><p>获取与成员相关的方法如下：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><strong>Field</strong>(i int) StructField</td><td>根据索引，返回索引对应的结构体字段的信息。当值不是结构体或索引超界时发生宕机</td></tr><tr><td><strong>NumField</strong>() int</td><td>返回结构体成员字段数量(包含私有字段)</td></tr><tr><td><strong>FieldByName</strong>(name string) (StructField, bool)</td><td>根据给定字符串返回字符串对应的结构体字段的信息。没有找到时 bool 返回 false</td></tr><tr><td>FieldByIndex(index []int) StructField</td><td>多层成员访问时，根据 []int 提供的每个结构体的字段索引，返回字段的信息。没有找到时返回零值</td></tr></tbody></table><p><strong>StructField结构</strong>，这个结构描述结构体的成员信息，通过这个信息可以获取成员与结构体的关系，如偏移、索引、是否为匿名字段、结构体标签（Struct Tag）等</p><div class="language-go" data-highlighter="shiki" data-ext="go" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">type</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> StructField</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> struct</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">	Name</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">      string</span><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 字段名</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">	PkgPath</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">   string</span><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 字段路径</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">	Type</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">      Type</span><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      // 字段反射类型对象</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">	Tag</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">       StructTag</span><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 字段的结构体标签</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">	Offset</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">    uintptr</span><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">   // 字段在结构体中的相对偏移</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">	Index</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">     []</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     // Type.FieldByIndex中的返回的索引值</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">	Anonymous</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> bool</span><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      // 是否为匿名字段</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><h3 id="_4-获取成员反射信息" tabindex="-1"><a class="header-anchor" href="#_4-获取成员反射信息"><span>4. 获取成员反射信息</span></a></h3><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">package</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> main</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span></span>
<span class="line"><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">	&quot;fmt&quot;</span></span>
<span class="line"><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">	&quot;reflect&quot;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">func</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	// 声明一个空结构体</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">	type</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> cat</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> struct</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">		Name</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> string</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">		// 带有结构体tag的字段</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">		Type</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;"> \`json:&quot;type&quot; id:&quot;100&quot;\`</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">	}</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	// 创建cat的实例</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">	ins</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> cat</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">{</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">Name</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">&quot;mimi&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">Type</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	// 获取结构体实例的反射类型对象</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">	typeOfCat</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> reflect</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">TypeOf</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">ins</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	// 遍历结构体所有成员</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">	for</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> &lt;</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> typeOfCat</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">NumField</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(); </span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">++</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">		// 获取每个成员的结构体字段类型</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">		fieldType</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> typeOfCat</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">Field</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">		// 输出成员名和tag</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">		fmt</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">Printf</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">&quot;name: </span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">%v</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">  tag: &#39;</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">%v</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">&#39;</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">fieldType</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">Name</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">fieldType</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">Tag</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">	}</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	// 通过字段名, 找到字段类型信息</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">	if</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> catType</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">ok</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> typeOfCat</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">FieldByName</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">&quot;Type&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">); </span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">ok</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">		// 从tag中取出需要的tag</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">		fmt</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">Println</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">catType</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">Tag</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">Get</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">&quot;json&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">), </span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">catType</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">Tag</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">Get</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">&quot;id&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">))</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">	}</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-通过类型信息创建实例" tabindex="-1"><a class="header-anchor" href="#_5-通过类型信息创建实例"><span>5. 通过类型信息创建实例</span></a></h3><p>当已知 reflect.Type 时，可以动态地创建这个类型的实例，实例的类型为指针</p><div class="language-go" data-highlighter="shiki" data-ext="go" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">func</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">	var</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> a</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> int</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	// 取变量a的反射类型对象</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">	typeOfA</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> reflect</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">TypeOf</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">a</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	// 根据反射类型对象创建类型实例</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">	aIns</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> reflect</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">New</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">typeOfA</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	// 输出：*int ptr</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">	fmt</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">Println</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">aIns</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">Type</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(), </span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">aIns</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">Kind</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">())</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><h2 id="value-和-valueof" tabindex="-1"><a class="header-anchor" href="#value-和-valueof"><span>Value 和 ValueOf</span></a></h2><p><strong>reflect.Value</strong> 类型是一个结构体，封装了反射对象的值，内部若干方法，可以通过这些方法来获取和修改对象的值，使用 <strong><code>reflect.ValueOf</code></strong> 函数可以返回 Value 类型，value 类型还可以生成原始类型对象</p><h3 id="_1-生成原始类型的对象" tabindex="-1"><a class="header-anchor" href="#_1-生成原始类型的对象"><span>1. 生成原始类型的对象</span></a></h3><p>可以通过下面几种方法从反射值对象 reflect.Value 中获取原值</p><table><thead><tr><th>方法名</th><th>说 明</th></tr></thead><tbody><tr><td><strong>Interface</strong>() interface {}</td><td>将值以 interface{} 类型返回，可以通过类型断言转换为指定类型</td></tr><tr><td>Int() int64</td><td>将值以 int 类型返回，所有有符号整型均可以此方式返回</td></tr><tr><td>Uint() uint64</td><td>将值以 uint 类型返回，所有无符号整型均可以此方式返回</td></tr><tr><td>Float() float64</td><td>将值以双精度（float64）类型返回，所有浮点数（float32、float64）均可以此方式返回</td></tr><tr><td>Bool() bool</td><td>将值以 bool 类型返回</td></tr><tr><td>Bytes() []bytes</td><td>将值以字节数组 []bytes 类型返回</td></tr><tr><td>String() string</td><td>将值以字符串类型返回</td></tr></tbody></table><p>代码演示如下👇</p><div class="language-go" data-highlighter="shiki" data-ext="go" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">func</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 声明整型变量a并赋初值</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">    var</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> a</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> =</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;"> 1024</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 获取变量a的反射值对象</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">    valueOfA</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> reflect</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">ValueOf</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">a</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 获取interface{}类型的值, 通过类型断言转换</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">    var</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> getA</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> =</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> valueOfA</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">Interface</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">().(</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 获取64位的值, 强制类型转换为int类型</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">    var</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> getA2</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> =</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">valueOfA</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">Int</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">())</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">    fmt</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">Println</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">getA</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">getA2</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><h3 id="_2-操作结构体成员的值" tabindex="-1"><a class="header-anchor" href="#_2-操作结构体成员的值"><span>2. 操作结构体成员的值</span></a></h3><p>反射值对象（reflect.Value）提供对结构体访问的方法，通过这些方法可以完成对结构体任意值的访问，方法列表参考 <a href="#_3-type-%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95">Type 常用方法</a></p><p><strong>修改成员的值</strong> 使用 reflect.Value 对包装的值进行修改时，需要遵循一些规则。如果该对象不可寻址或者成员是私有的，则无法修改对象值</p><p><strong>判定是否可以操作的方法有如下👇</strong></p><table><thead><tr><th>方法名</th><th>描 述</th></tr></thead><tbody><tr><td><strong>Elem</strong>() Value</td><td>取值指向的元素值，类似于语言层<code>*</code>操作。当值类型不是指针或接口时发生宕 机，空指针时返回 nil 的 Value</td></tr><tr><td>Addr() Value</td><td>对可寻址的值返回其地址，类似于语言层<code>&amp;</code>操作。当值不可寻址时发生宕机</td></tr><tr><td>CanAddr() bool</td><td>表示值是否可寻址</td></tr><tr><td><strong>CanSet</strong>() bool</td><td>返回值能否被修改。要求值可寻址且是导出的字段</td></tr></tbody></table><p><strong>修改的方法如下👇</strong></p><table><thead><tr><th>Set(x Value)</th><th>将值设置为传入的反射值对象的值</th></tr></thead><tbody><tr><td>Setlnt(x int64)</td><td>使用 int64 设置值。当值的类型不是 int、int8、int16、 int32、int64 时会发生宕机</td></tr><tr><td>SetUint(x uint64)</td><td>使用 uint64 设置值。当值的类型不是 uint、uint8、uint16、uint32、uint64 时会发生宕机</td></tr><tr><td>SetFloat(x float64)</td><td>使用 float64 设置值。当值的类型不是 float32、float64 时会发生宕机</td></tr><tr><td>SetBool(x bool)</td><td>使用 bool 设置值。当值的类型不是 bod 时会发生宕机</td></tr><tr><td>SetBytes(x []byte)</td><td>设置字节数组 []bytes值。当值的类型不是 []byte 时会发生宕机</td></tr><tr><td>SetString(x string)</td><td>设置字符串值。当值的类型不是 string 时会发生宕机</td></tr></tbody></table><p><strong>代码案例如下</strong></p><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">func</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">	type</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> dog</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> struct</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">		LegCount</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> int</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">		age</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> int</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">	}</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	// 获取dog实例地址的反射值对象</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">	valueOfDog</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> reflect</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">ValueOf</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">&amp;</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">dog</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">{})</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	// 取出dog实例地址的元素</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">	valueOfDog</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> =</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> valueOfDog</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">Elem</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	// 获取legCount字段的值</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">	vLegCount</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> valueOfDog</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">FieldByName</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">&quot;LegCount&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">	vAge</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> valueOfDog</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">FieldByName</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">&quot;age&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	// 尝试设置legCount的值</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">	vLegCount</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">SetInt</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">4</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	// 这里会报错</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">	vAge</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">SetInt</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">4</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">	fmt</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">Println</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">vLegCount</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">Int</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">())</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="通过反射调用函数" tabindex="-1"><a class="header-anchor" href="#通过反射调用函数"><span>通过反射调用函数</span></a></h2><p>如果反射值对象（reflect.Value）中值的类型为函数时，可以通过 reflect.Value 调用该函数，使用反射调用函数时，需要将参数使用反射值对象的切片 []reflect.Value 构造后传入 <strong>Call()</strong> 方法中，调用完成时，函数的返回值通过 []reflect.Value 返回</p><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">package</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> main</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span></span>
<span class="line"><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">	&quot;fmt&quot;</span></span>
<span class="line"><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">	&quot;reflect&quot;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 普通函数</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">func</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> add</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E06C75;--shiki-light-font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">a</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E06C75;--shiki-light-font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">b</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">	return</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> a</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> +</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> b</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">func</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	// 将函数包装为反射值对象</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">	funcValue</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> reflect</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">ValueOf</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">add</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	// 构造函数参数, 传入两个整型值</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">	paramList</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> []</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">reflect</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Value</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">{</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">reflect</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">ValueOf</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">), </span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">reflect</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">ValueOf</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">20</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">)}</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	// 反射调用函数</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">	retList</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> funcValue</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">Call</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">paramList</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	// 获取第一个返回值, 取整数值</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">	fmt</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">Println</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">retList</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">].</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">Int</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">())</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="通过反射调用对象中的方法" tabindex="-1"><a class="header-anchor" href="#通过反射调用对象中的方法"><span>通过反射调用对象中的方法</span></a></h2><p>如果反射值对象中具有方法时，可以通过反射调用方法，获取方法如下👇</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><strong>Method</strong>(i int) Value</td><td>根据索引，返回索引对应的方法</td></tr><tr><td><strong>NumMethod</strong>() int</td><td>返回结构体成员方法(包含私有)</td></tr><tr><td><strong>MethodByName</strong>(name string) Value</td><td>根据给定字符串返回字符串对应的结构体方法</td></tr></tbody></table><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">package</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> main</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span></span>
<span class="line"><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">	&quot;fmt&quot;</span></span>
<span class="line"><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">	&quot;reflect&quot;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">type</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> Cat</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> struct</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">	Name</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> string</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">func</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#E06C75;--shiki-light-font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">c </span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Cat</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">Sleep</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">	fmt</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">Println</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">&quot;呜呜呜...&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">func</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">	cat</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> Cat</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">{}</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">	valueOf</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> reflect</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">ValueOf</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">&amp;</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">cat</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">	showMethod</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> valueOf</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">MethodByName</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">&quot;Show&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">	showMethod</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">Call</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">nil</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="反射实现-map-转-struct" tabindex="-1"><a class="header-anchor" href="#反射实现-map-转-struct"><span>反射实现：map 转 struct</span></a></h2><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">func</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> Map2Struct</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E06C75;--shiki-light-font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">m</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> map</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">string</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">]</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">interface</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">{}, </span><span style="--shiki-light:#E06C75;--shiki-light-font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">obj</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> interface</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">{}) {</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">	value</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> reflect</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">ValueOf</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">obj</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	// obj 必须是指针且指针指向的必须是 struct</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">	if</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> value</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">Kind</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> reflect</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">Ptr</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> &amp;&amp;</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> value</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">Elem</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">Kind</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> reflect</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">Struct</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">		value</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> =</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> value</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">Elem</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">		getMapName</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> func</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E06C75;--shiki-light-font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">key</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> string</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">interface</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">{} {</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">			for</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> k</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">v</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> range</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> m</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">				if</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> strings</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">EqualFold</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">k</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">key</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">					return</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> v</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">				}</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">			}</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">			return</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;"> nil</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">		}</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">		// 循环赋值</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">		for</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> &lt;</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> value</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">NumField</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(); </span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">++</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">			// 获取字段 type 对象</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">			field</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> value</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">Field</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">			if</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> !</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">field</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">CanSet</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">				continue</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">			}</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">			// 获取字段名称</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">			fieldName</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> value</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">Type</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">Field</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">Name</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">			fmt</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">Println</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">&quot;fieldName -&gt; &quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">fieldName</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">			// 获取 map 中的对应的值</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">			fieldVal</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> getMapName</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">fieldName</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">			if</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> fieldVal</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> !=</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;"> nil</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">				field</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">Set</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">reflect</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">ValueOf</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">fieldVal</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">))</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">			}</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">		}</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">	} </span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">		panic</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">&quot;must prt&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="反射实现-struct-转-map" tabindex="-1"><a class="header-anchor" href="#反射实现-struct-转-map"><span>反射实现：struct 转 map</span></a></h2><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">func</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> Struct2Map</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E06C75;--shiki-light-font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">obj</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> interface</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">{}) </span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">map</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">string</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">]</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">interface</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">{} {</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">	value</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> reflect</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">ValueOf</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">obj</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">	if</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> value</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">Kind</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">!=</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> reflect</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">Ptr</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> ||</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> value</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">Elem</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">Kind</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">!=</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> reflect</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">Struct</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">		panic</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">&quot;must prt&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">	}</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">	value</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> =</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> value</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">Elem</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">	t</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> value</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">Type</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	// 创建 map</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">	resultMap</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> make</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">map</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">string</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">]</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">interface</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">{})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	// 循环获取字段名称以及对应的值</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">	for</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> &lt;</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> value</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">NumField</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(); </span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">++</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">		val</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> value</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">Field</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">		typeName</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> t</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">Field</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">		if</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> !</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">val</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">CanSet</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">			resultMap</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">typeName</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">Name</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">=</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> reflect</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">New</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">typeName</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">Type</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">Elem</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">Interface</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">			continue</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">		}</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">		resultMap</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">typeName</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">Name</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">=</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> val</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">Interface</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">	return</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> resultMap</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,50))])}const c=t(B,[["render",g]]),C=JSON.parse('{"path":"/golang/basic/01.golang%E5%9F%BA%E7%A1%80-%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6.html","title":"golang基础 - 反射机制","lang":"zh-CN","frontmatter":{"title":"golang基础 - 反射机制","date":"2021-06-26T14:14:14.000Z","re":"golang-reflect","star":true,"category":["golang"],"tag":["golang"],"description":"golang 反射机制 和 Java 语言一样，Go 也实现运行时反射，这为我们提供一种可以在运行时操作任意类型对象的能力。 在 go 语言中，实现反射能力的是 reflect包，能够让程序操作不同类型的对象。其中，在反射包中有两个非常重要的 类型和 函数，两个函数分别是： reflect.TypeOf - 能获取对象的类型的信息 reflect.Va...","permalink":"/golang/basic/golang-reflect.html","head":[["meta",{"property":"og:url","content":"https://blog.zenghr.cn/golang/basic/golang-reflect.html"}],["meta",{"property":"og:site_name","content":"Zenghr"}],["meta",{"property":"og:title","content":"golang基础 - 反射机制"}],["meta",{"property":"og:description","content":"golang 反射机制 和 Java 语言一样，Go 也实现运行时反射，这为我们提供一种可以在运行时操作任意类型对象的能力。 在 go 语言中，实现反射能力的是 reflect包，能够让程序操作不同类型的对象。其中，在反射包中有两个非常重要的 类型和 函数，两个函数分别是： reflect.TypeOf - 能获取对象的类型的信息 reflect.Va..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://media.zenghr.cn/blog/img/20210626/6hzQxX.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-22T09:23:50.000Z"}],["meta",{"property":"article:tag","content":"golang"}],["meta",{"property":"article:published_time","content":"2021-06-26T14:14:14.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-22T09:23:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"golang基础 - 反射机制\\",\\"image\\":[\\"https://media.zenghr.cn/blog/img/20210626/6hzQxX.png\\"],\\"datePublished\\":\\"2021-06-26T14:14:14.000Z\\",\\"dateModified\\":\\"2025-04-22T09:23:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Zenghr\\"}]}"]]},"git":{"createdTime":1745313830000,"updatedTime":1745313830000,"contributors":[{"name":"zenghr","username":"zenghr","email":"zenghr","commits":1,"url":"https://github.com/zenghr"}]},"readingTime":{"minutes":8.01,"words":2403},"filePathRelative":"golang/basic/01.golang基础-反射机制.md","localizedDate":"2021年6月26日","excerpt":"\\n<p>和 Java 语言一样，Go 也实现运行时反射，这为我们提供一种可以在运行时操作任意类型对象的能力。</p>\\n<p>在 go 语言中，实现反射能力的是 <code>reflect</code>包，能够让程序操作不同类型的对象。其中，在反射包中有两个非常重要的 <strong>类型</strong>和 <strong>函数</strong>，两个函数分别是：</p>\\n<ul>\\n<li><strong><code>reflect.TypeOf</code></strong> - 能获取对象的类型的信息</li>\\n<li><strong><code>reflect.ValueOf</code></strong> - 能获取对象的数据</li>\\n</ul>","autoDesc":true}');export{c as comp,C as data};
