import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as n,c as s,a as e}from"./app-5544069a.js";const i={},t=e(`<h1 id="git-多分支平行发展" tabindex="-1"><a class="header-anchor" href="#git-多分支平行发展" aria-hidden="true">#</a> git 多分支平行发展</h1><div class="hint-container tip"><p class="hint-container-title">提示</p><p>在开发中，一个项目往往会有多个项目配合，例如采用前后端分离，往往前端一个项目，后端一个项目。项目多了，Git 就需要建立很多仓库，太过于麻烦，所以使用 git 分支功能管理多个项目，这里记录一下操作流程</p></div><h2 id="建立项目仓库" tabindex="-1"><a class="header-anchor" href="#建立项目仓库" aria-hidden="true">#</a> 建立项目仓库</h2><figure><img src="https://media.zenghr.cn/blog/img/20210630/8rraa3.png" alt="8rraa3" tabindex="0" loading="lazy"><figcaption>8rraa3</figcaption></figure><p>新建仓库之后默认分配了 master 主分支，先将仓库 <strong>clone</strong> 到本地：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> clone https://github.com/xxx/xxx<span class="token operator">&lt;</span>仓库名称<span class="token operator">&gt;</span>.git
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="查看分支" tabindex="-1"><a class="header-anchor" href="#查看分支" aria-hidden="true">#</a> 查看分支</h2><p>下载仓库到本地之后，进入项目目录，查看分支信息</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 查看分支信息</span>
<span class="token function">git</span> branch
<span class="token comment"># 查看分支状态</span>
<span class="token function">git</span> status
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时可以在该分支目录上初始化你的项目，在执行 git 命令提交代码</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>
<span class="token comment"># 提交代码到本地仓库</span>
<span class="token function">git</span> commit <span class="token parameter variable">-u</span> <span class="token string">&#39;inid project&#39;</span>
<span class="token comment"># 上传代码到 github 仓库</span>
<span class="token function">git</span> push origin master
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时 master 分支已经有一个项目了，下面我们创建新的分支管理另一个项目</p><h2 id="创建新分支" tabindex="-1"><a class="header-anchor" href="#创建新分支" aria-hidden="true">#</a> 创建新分支</h2><p>我们需要在 git 里面创建一个空分支，该分支不继承任何提交，没有父节点，完全是一个干净的分支，这时候就需要使用 <strong>orphan</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> checkout <span class="token parameter variable">--orphan</span> <span class="token operator">&lt;</span>分支名称<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该命令会创建一个新的分支，并且该分支有前一个分支下的所有文件，我们不想提交任何内容，所以我们需要把当前内容全部删除</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> <span class="token function">rm</span> <span class="token parameter variable">-rf</span> <span class="token builtin class-name">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>注意，如果没有在该分支下提交东西，则该分支其实并没有创建，下面随便改一点东西提交上去</p></div><p><strong>提交分支</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> commit <span class="token parameter variable">-u</span> <span class="token string">&#39;new branch&#39;</span>
<span class="token comment"># 此时需要指定提交分支</span>
<span class="token function">git</span> push origin <span class="token operator">&lt;</span>分支名称<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时我们就完成了在同一个仓库管理不同项目的需求了</p>`,21),r=[t];function c(l,d){return n(),s("div",null,r)}const u=a(i,[["render",c],["__file","02.git 一个仓库管理多个项目.html.vue"]]);export{u as default};
