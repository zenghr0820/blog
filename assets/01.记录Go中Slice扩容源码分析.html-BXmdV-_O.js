import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,o as h}from"./app-CZlcYx0L.js";const l={};function k(t,s){return h(),a("div",null,s[0]||(s[0]=[n(`<blockquote><p>转载自： <a href="https://juejin.im/post/5ca4239ef265da30807fea48" target="_blank" rel="noopener noreferrer">Go slice扩容深度分析</a></p><p>参考资料：<a href="https://studygolang.com/articles/15786" target="_blank" rel="noopener noreferrer">Go内存管理</a></p></blockquote><div class="hint-container tip"><p class="hint-container-title">提示</p><p><code>slice</code> 使用时可以不用指定数组长度，超出长度也可以继续添加元素</p></div><h2 id="引起注意" tabindex="-1"><a class="header-anchor" href="#引起注意"><span>引起注意</span></a></h2><p>之前使用<code>slice</code>时一直以为当cap小于1024时每次都是翻倍，大于1024时就是添加 0.25(1.25倍)</p><p>直到遇到下面的场景引起我的注意：</p><div class="language-go" data-highlighter="shiki" data-ext="go" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">func</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">    a</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> []</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">byte</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">{</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">4</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">    a</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> =</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> append</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">a</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">5</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">6</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">7</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">8</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">9</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">    fmt</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">Println</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">&quot;a.cap = &quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">cap</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">a</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">    var</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> b</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> =</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> []</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">{</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">4</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">    b</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> =</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> append</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">b</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">5</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">6</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">7</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">8</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">9</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">    fmt</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">Println</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">&quot;b.cap = &quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">cap</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">b</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">))</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><h2 id="分析源码" tabindex="-1"><a class="header-anchor" href="#分析源码"><span>分析源码</span></a></h2><p>以我之前的翻倍的理解，cap应该都是8才对，但结果让我意外：</p><div class="language-" data-highlighter="shiki" data-ext="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>a.cap = 16</span></span>
<span class="line"><span>b.cap =  10</span></span></code></pre></div><p>这结果让我一头雾水，于是出于好奇去看了关于slice扩容的源代码<a href="https://github.com/golang/go/blob/master/src/runtime/slice.go" target="_blank" rel="noopener noreferrer">https://github.com/golang/go/blob/master/src/runtime/slice.go</a></p><p>发现涉及扩容的方法是<code>growslice</code>，下面贴出一部分代码</p><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">newcap</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> old</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">cap</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">doublecap</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> newcap</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> +</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> newcap</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> cap</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> &gt;</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> doublecap</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">    newcap</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> =</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> cap</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">} </span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> old</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">len</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> &lt;</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;"> 1024</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">        newcap</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> =</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> doublecap</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">    } </span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // Check 0 &lt; newcap to detect overflow</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // and prevent an infinite loop.</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">        for</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> &lt;</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> newcap</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> &amp;&amp;</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> newcap</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> &lt;</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> cap</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">            newcap</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> +=</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> newcap</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> /</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;"> 4</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // Set newcap to the requested cap when</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // the newcap calculation overflowed.</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> newcap</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> &lt;=</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">            newcap</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> =</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> cap</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看了源码才发现上面的代码append多个元素没走翻倍扩容流程，而是直接复制最新的长度作为cap长度：</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">newcap</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;"> 4</span></span>
<span class="line"><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">doublecap</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;"> 8</span></span>
<span class="line"><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">cap</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;"> 10</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">cap</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> &gt; </span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">doublecap</span></span>
<span class="line"><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">newcap</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;"> 10</span></span></code></pre></div><p>所以<code>b.cap = 10</code>也就说得通了，但是<code>a.cap = 16</code>这个就不对了，往下看源码：</p><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Specialize for common values of et.size.</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// For 1 we don&#39;t need any division/multiplication.</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// For sys.PtrSize, compiler will optimize division/multiplication into a shift by a constant.</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// For powers of 2, use a variable shift.</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">switch</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">    case</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> et</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">size</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> ==</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">		lenmem</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> =</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> uintptr</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">old</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">len</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">		newlenmem</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> =</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> uintptr</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">cap</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">		capmem</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> =</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> roundupsize</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">uintptr</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">newcap</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">))</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">		overflow</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> =</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> uintptr</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">newcap</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> maxAlloc</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">		newcap</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> =</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">capmem</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">	case</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> et</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">size</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> ==</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> sys</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">PtrSize</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">		lenmem</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> =</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> uintptr</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">old</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">len</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> sys</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">PtrSize</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">		newlenmem</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> =</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> uintptr</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">cap</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> sys</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">PtrSize</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">		capmem</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> =</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> roundupsize</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">uintptr</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">newcap</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> sys</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">PtrSize</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">		overflow</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> =</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> uintptr</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">newcap</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> maxAlloc</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">/</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">sys</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">PtrSize</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">		newcap</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> =</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">capmem</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> /</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> sys</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">PtrSize</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">	case</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> isPowerOfTwo</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">et</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">size</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">		// ... 省略</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">	default</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">		// ... 省略</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查资料得知这里的<code>et.size</code>是指元素在计算机的字节大小，我用的是window 64位，所以int也就是int 64，大小位8字节，发现进行内存分配的是<code>capmem</code>:</p><p>a因为是byte类型，所以字节大小为 1，满足 <strong><code>et.size == 1</code></strong> =&gt; <strong><code>capmem = roundupsize(uintptr(newcap))</code></strong> =&gt; <strong><code>capmem = 10 ? 16</code></strong></p><p><code>roundupsize</code> 为什么会将 10 变为 16 呢，查了资料发现是go内存管理的原因：<a href="https://studygolang.com/articles/15786" target="_blank" rel="noopener noreferrer">Go内存管理</a></p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># https://github.com/golang/go/blob/master/src/runtime/sizeclasses.go</span></span>
<span class="line"><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">//</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;"> class</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">  bytes/obj</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">  bytes/span</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">  objects</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">  tail</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;"> waste</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">  max</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;"> waste</span></span>
<span class="line"><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">//</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">     1</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">          8</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">        8192</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">     1024</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">           0</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">     87.50%</span></span>
<span class="line"><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">//</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">     2</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">         16</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">        8192</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">      512</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">           0</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">     43.75%</span></span>
<span class="line"><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">//</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">     3</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">         32</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">        8192</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">      256</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">           0</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">     46.88%</span></span>
<span class="line"><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">//</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">     4</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">         48</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">        8192</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">      170</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">          32</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">     31.52%</span></span>
<span class="line"><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">//</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">     5</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">         64</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">        8192</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">      128</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">           0</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">     23.44%</span></span>
<span class="line"><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">//</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">     6</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">         80</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">        8192</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">      102</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">          32</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">     19.07%</span></span>
<span class="line"><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">//</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">     7</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">         96</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">        8192</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">       85</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">          32</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">     15.95%</span></span>
<span class="line"><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">//</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">     8</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">        112</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">        8192</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">       73</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">          16</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">     13.56%</span></span>
<span class="line"><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">//</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">     9</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">        128</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">        8192</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">       64</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">           0</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">     11.72%</span></span>
<span class="line"><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">//</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">    10</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">        144</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">        8192</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">       56</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">         128</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">     11.82%</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">//</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">    ...</span></span>
<span class="line"><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">//</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">    65</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">      28672</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">       57344</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">        2</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">           0</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">      4.91%</span></span>
<span class="line"><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">//</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">    66</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">      32768</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">       32768</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">        1</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">           0</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">     12.50%</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看<code>bytes/obj</code> 没有大小为10 的类型，所以向上取整得到的是：16。<strong><code>roundupsize</code></strong></p><p>b因为是int 64类型，所以字节大小为 8，满足 <strong><code>et.size == 8</code></strong> =&gt; <strong><code>capmem = roundupsize(uintptr(newcap) * sys.PtrSize)</code></strong> =&gt; <strong><code>capmem = 10 * 8 = 80</code></strong> =&gt; <strong><code>newcap = 80 / 8 = 10</code></strong></p><h2 id="结论" tabindex="-1"><a class="header-anchor" href="#结论"><span>结论</span></a></h2><p>slice 扩容真相</p><ul><li>append单个元素，或者append多个元素，小于<code>doublecap</code>双倍容量，这样就会走以下扩容流程，不足1024，双倍扩容，超过1024的，1.25倍扩容。</li><li>若是append多个元素，且double后的容量不能容纳，直接使用预估的容量。</li></ul><p><strong>！！得到新容量后，都需要根据slice类型，算出新的容量所需的内存情况<code>capmem</code>，然后再进行<code>capmem</code>向上取整，得到新的所需内存，除上类型size，得到真正的最终容量,作为新的slice的容量。</strong></p><blockquote><p><strong>最后感谢<a href="https://juejin.im/post/5ca4239ef265da30807fea48" target="_blank" rel="noopener noreferrer">Go slice扩容深度分析</a> 的博客</strong></p></blockquote><p align="right" style="color:gray;">END 二零二零年二月二十八日</p>`,28)]))}const r=i(l,[["render",k]]),d=JSON.parse('{"path":"/golang/01.%E8%AE%B0%E5%BD%95Go%E4%B8%ADSlice%E6%89%A9%E5%AE%B9%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90.html","title":"记录Go中Slice扩容源码分析","lang":"zh-CN","frontmatter":{"title":"记录Go中Slice扩容源码分析","date":"2020-02-28T13:14:15.000Z","re":"2020-02-28-golang-slice-analysis","star":true,"tag":["golang"],"category":["golang"],"description":"转载自： Go slice扩容深度分析 参考资料：Go内存管理 提示 slice 使用时可以不用指定数组长度，超出长度也可以继续添加元素 引起注意 之前使用slice时一直以为当cap小于1024时每次都是翻倍，大于1024时就是添加 0.25(1.25倍) 直到遇到下面的场景引起我的注意： 分析源码 以我之前的翻倍的理解，cap应该都是8才对，但结果...","permalink":"/passages/2020-02-28-golang-slice-analysis.html","head":[["meta",{"property":"og:url","content":"https://blog.zenghr.cn/passages/2020-02-28-golang-slice-analysis.html"}],["meta",{"property":"og:site_name","content":"Zenghr"}],["meta",{"property":"og:title","content":"记录Go中Slice扩容源码分析"}],["meta",{"property":"og:description","content":"转载自： Go slice扩容深度分析 参考资料：Go内存管理 提示 slice 使用时可以不用指定数组长度，超出长度也可以继续添加元素 引起注意 之前使用slice时一直以为当cap小于1024时每次都是翻倍，大于1024时就是添加 0.25(1.25倍) 直到遇到下面的场景引起我的注意： 分析源码 以我之前的翻倍的理解，cap应该都是8才对，但结果..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-07T20:02:42.000Z"}],["meta",{"property":"article:tag","content":"golang"}],["meta",{"property":"article:published_time","content":"2020-02-28T13:14:15.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-07T20:02:42.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"记录Go中Slice扩容源码分析\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-02-28T13:14:15.000Z\\",\\"dateModified\\":\\"2025-04-07T20:02:42.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Zenghr\\"}]}"]]},"git":{"createdTime":1744056162000,"updatedTime":1744056162000,"contributors":[{"name":"zenghr","username":"zenghr","email":"zenghr","commits":1,"url":"https://github.com/zenghr"}]},"readingTime":{"minutes":3.15,"words":944},"filePathRelative":"golang/01.记录Go中Slice扩容源码分析.md","localizedDate":"2020年2月28日","excerpt":"<blockquote>\\n<p>转载自： <a href=\\"https://juejin.im/post/5ca4239ef265da30807fea48\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Go slice扩容深度分析</a></p>\\n<p>参考资料：<a href=\\"https://studygolang.com/articles/15786\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Go内存管理</a></p>\\n</blockquote>\\n<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">提示</p>\\n<p><code>slice</code> 使用时可以不用指定数组长度，超出长度也可以继续添加元素</p>\\n</div>","autoDesc":true}');export{r as comp,d as data};
