import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,a as t}from"./app-4f96c992.js";const p={},e=t(`<h1 id="seata-全局事务不生效问题" tabindex="-1"><a class="header-anchor" href="#seata-全局事务不生效问题" aria-hidden="true">#</a> Seata 全局事务不生效问题</h1><div class="hint-container tip"><p class="hint-container-title">提示</p><p>记录工作中遇到到 Seata 全局事务不回滚的问题</p></div><h2 id="开发环境" tabindex="-1"><a class="header-anchor" href="#开发环境" aria-hidden="true">#</a> 开发环境</h2><ul><li><strong>Spring Boot</strong></li><li><strong>Seata</strong> 分布式事务解决方案</li></ul><h2 id="实际场景" tabindex="-1"><a class="header-anchor" href="#实际场景" aria-hidden="true">#</a> 实际场景</h2><p>在工作中遇到需要调用其他服务接口，由于项目结构问题，没有使用其他的框架去调用接口，而是自己写 HTTP 请求接口调用</p><p>在事务发起方贴上注解 <strong>@GlobalTransactional</strong> 启动 Seata 全局事务，发生错误后事务回滚</p><p>但是在测试时发现出现异常时 被调用的服务并没有回滚事务</p><h2 id="问题解决" tabindex="-1"><a class="header-anchor" href="#问题解决" aria-hidden="true">#</a> 问题解决</h2><p>通过查看日志发现被调用服务并没有启动全局事务，百思不得其解，一开始以为是因为配置了全局异常拦截器导致 Seata 并没有捕获到异常也就没有回滚事务，一顿折腾才发现不是这个原因</p><p>后面想到跨服务调用的事务传播是通过 传递事务 ID来开启的，那么会不会是事务 ID 没有传过来</p><blockquote><p>跨服务调用场景下的事务传播，本质上就是把 XID 通过服务调用传递到服务提供方，并绑定到 RootContext 中</p></blockquote><p>因为我是自己封装 HTTP 请求调用，所以只需要把 XID 放到请求中，那么事务就可以启动了</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 添加事务 ID</span>
headers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">RootContext</span><span class="token punctuation">.</span><span class="token constant">KEY_XID</span><span class="token punctuation">,</span> <span class="token class-name">RootContext</span><span class="token punctuation">.</span><span class="token function">getXID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>后面也是去了解了一下 <strong>SeataHandlerInterceptor</strong> 中的源码，就可以发现拦截器也是直接获取请求中的 XID，所以说理论上只要把事务 ID 提供出来，Seata 可以支持任意的微服务框架</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SeataHandlerInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">{</span>
	<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> log <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">SeataHandlerInterceptor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token annotation punctuation">@Override</span>
	<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		
        <span class="token class-name">String</span> xid <span class="token operator">=</span> <span class="token class-name">RootContext</span><span class="token punctuation">.</span><span class="token function">getXID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 这里获取 请求中事务 ID</span>
		<span class="token class-name">String</span> rpcXid <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token class-name">RootContext</span><span class="token punctuation">.</span><span class="token constant">KEY_XID</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>log<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;xid in RootContext {} xid in RpcContext {}&quot;</span><span class="token punctuation">,</span> xid<span class="token punctuation">,</span> rpcXid<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>xid<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> rpcXid <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 如果事务ID为空 直接绑定</span>
			<span class="token class-name">RootContext</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>rpcXid<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>log<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;bind {} to RootContext&quot;</span><span class="token punctuation">,</span> rpcXid<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,16),o=[e];function c(l,i){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","01.Seata 全局事务不生效问题.html.vue"]]);export{k as default};
