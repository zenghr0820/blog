import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,a as e}from"./app-d7df2002.js";const t={},p=e(`<h1 id="自定义参数解析器" tabindex="-1"><a class="header-anchor" href="#自定义参数解析器" aria-hidden="true">#</a> 自定义参数解析器</h1><p>在项目开发中，经常会遇到很多地方都需要获取当前的登录用户对象，根据请求的 session 或者 token 去获取用户信息，于是经常会在很多地方出现获取用户信息的代码</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//根据token获取用户信息</span>
<span class="token class-name">String</span> token <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">&quot;token&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 查询用户</span>
<span class="token class-name">User</span> user <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">getCurrentUser</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每次都需要写相同的代码，当然我们也可以把这些重复代码封装到单独的方法中，但是这样还是不够优雅。</p><p>如果用过 SpringMvc 框架，就会知道该框架获取参数太方便了，参数自动封装到 JavaBean 、各种参数注解：<code>RequestParam</code> 、<code>PathVariable</code>等</p><p>那么 SpringMvc 到底是怎么从 request 中把参数提取出来直接给我们的呢，这就用到今天说的一个参数解析器接口：<strong><code>HandlerMethodArgumentResolver</code></strong></p><h2 id="handlermethodargumentresolver" tabindex="-1"><a class="header-anchor" href="#handlermethodargumentresolver" aria-hidden="true">#</a> HandlerMethodArgumentResolver</h2><p>自定义参数解析器需要实现 HandlerMethodArgumentResolver 接口，我们先来实现该接口，如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 将请求映射方法列表中 UserInfo 类型参数进行解析
 * 解析成当前登录用户对象
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CurrentUserArgumentResolver</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerMethodArgumentResolver</span> <span class="token punctuation">{</span>

    <span class="token comment">// 如果参数类型是 UserInfo，并且参数上有 @CurrentUser 注解，则使用该参数解析器</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">supportsParameter</span><span class="token punctuation">(</span><span class="token class-name">MethodParameter</span> methodParameter<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> methodParameter<span class="token punctuation">.</span><span class="token function">getParameterType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">UserInfo</span><span class="token punctuation">.</span><span class="token keyword">class</span>
                <span class="token operator">&amp;&amp;</span> methodParameter<span class="token punctuation">.</span><span class="token function">hasParameterAnnotation</span><span class="token punctuation">(</span><span class="token class-name">CurrentUser</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//解析器解析规则：</span>
    <span class="token comment">//此处将 UserInfo 类型参数， 解析成当前登录用户对象。</span>
    <span class="token comment">//当supportsParameter方法返回true时候才执行</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">resolveArgument</span><span class="token punctuation">(</span><span class="token class-name">MethodParameter</span> methodParameter<span class="token punctuation">,</span>
                                  <span class="token class-name">ModelAndViewContainer</span> modelAndViewContainer<span class="token punctuation">,</span>
                                  <span class="token class-name">NativeWebRequest</span> nativeWebRequest<span class="token punctuation">,</span>
                                  <span class="token class-name">WebDataBinderFactory</span> webDataBinderFactory<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">HttpServletRequest</span> request <span class="token operator">=</span> nativeWebRequest<span class="token punctuation">.</span><span class="token function">getNativeRequest</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> token <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">&quot;token&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">UserInfo</span><span class="token punctuation">)</span> userService<span class="token punctuation">.</span><span class="token function">getCurrentUser</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>supportsParameter：</strong> 该方法表示是否启用这个参数解析器，返回 true 表示启用，返回 false 表示不启用</li><li><strong>resolveArgument：</strong> 这是具体的解析过程，就是从 request 中取出参数的过程，方法的返回值就对应了接口中参数的值</li></ul><h2 id="使用自定义的注解来区分" tabindex="-1"><a class="header-anchor" href="#使用自定义的注解来区分" aria-hidden="true">#</a> 使用自定义的注解来区分</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 用户参数注入注解
 * 贴有该注解用户参数使用自定义的参数解析器
 */</span>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">PARAMETER</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">CurrentUser</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过自定义注解来区分是用框架自带的解析器还是自定义的</p><h2 id="将自定义参数解析器添加到spring容器中" tabindex="-1"><a class="header-anchor" href="#将自定义参数解析器添加到spring容器中" aria-hidden="true">#</a> 将自定义参数解析器添加到Spring容器中</h2><p>最后，我们再将自定义的参数解析器配置到 HandlerAdapter 中，配置方式如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>
    <span class="token comment">// 自定义的用户解析器</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">CurrentUserArgumentResolver</span> <span class="token function">currentUserArgumentResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CurrentUserArgumentResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addArgumentResolvers</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HandlerMethodArgumentResolver</span><span class="token punctuation">&gt;</span></span> resolvers<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        resolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">currentUserArgumentResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="使用案例" tabindex="-1"><a class="header-anchor" href="#使用案例" aria-hidden="true">#</a> 使用案例</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/hello&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token annotation punctuation">@CurrentUser</span> <span class="token class-name">UserInfo</span> userInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>至此，就算配置完成了，接下来启动项目，用户登录成功后，访问接口，就可以看到返回当前登录用户数据了</p>`,19),o=[p];function c(l,i){return s(),a("div",null,o)}const d=n(t,[["render",c],["__file","自定义参数解析器.html.vue"]]);export{d as default};
