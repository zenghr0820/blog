import{_ as c}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o,c as i,d as n,b as a,w as e,e as s,a as u}from"./app-21f1eb4c.js";const d={},r=n("h1",{id:"java基础-面向对象",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#java基础-面向对象","aria-hidden":"true"},"#"),s(" Java基础 - 面向对象")],-1),k=n("div",{class:"hint-container tip"},[n("p",{class:"hint-container-title"},"提示"),n("p",null,"本文介绍 Java 面向对象的相关知识")],-1),v={class:"table-of-contents"},m=u(`<h2 id="封装" tabindex="-1"><a class="header-anchor" href="#封装" aria-hidden="true">#</a> 封装</h2><h3 id="封装好处" tabindex="-1"><a class="header-anchor" href="#封装好处" aria-hidden="true">#</a> 封装好处</h3><ul><li>尽可能的隐藏信息和功能实现细节</li><li>保证数据的安全性，防止随意修改数据</li><li>提高组件的复用性</li></ul><h3 id="javabean的三个规范" tabindex="-1"><a class="header-anchor" href="#javabean的三个规范" aria-hidden="true">#</a> JavaBean的三个规范</h3><ul><li>类名用 <strong>public</strong> 修饰符修饰</li><li>类的成员变量用 <strong>private</strong> 修饰，阻止外部直接调用，并且需要提供一对 <strong>公共访问器(getter,setter)</strong> 给外界使用</li><li>当显示定义了 <strong>有参构造方法</strong> 时需要 提供 <strong>无参构造器</strong>，当你有定义有参构造器时， <strong>JVM</strong> 不会自动帮你分配无参构造器</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 规范1 类名使用 public 修饰符</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>
    <span class="token comment">// 规范二 字段使用 private 修饰符 修饰</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span> <span class="token comment">// 名字</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span> <span class="token comment">// 年龄</span>
	
    <span class="token comment">// 规范三 要有无参构造</span>
    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">setName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setAge</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// 规范四 每个字段要有 get、set</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="继承" tabindex="-1"><a class="header-anchor" href="#继承" aria-hidden="true">#</a> 继承</h2><h3 id="访问修饰符" tabindex="-1"><a class="header-anchor" href="#访问修饰符" aria-hidden="true">#</a> 访问修饰符</h3><p>Java 中有三个访问修饰符 <strong>private</strong>、<strong>protected</strong>、<strong>public</strong>以及一个缺省的修饰符，表示包可见</p><p>可以对类或者类的字段、方法加上访问修饰符，下面的表格表示各个修饰符的范围：</p><table><thead><tr><th style="text-align:center;">访问修饰符</th><th style="text-align:center;">本类</th><th style="text-align:center;">同包子类</th><th style="text-align:center;">同包其他类</th><th style="text-align:center;">不同包子类</th><th style="text-align:center;">不同包其他类</th></tr></thead><tbody><tr><td style="text-align:center;">private</td><td style="text-align:center;">✔</td><td style="text-align:center;">✘</td><td style="text-align:center;">✘</td><td style="text-align:center;">✘</td><td style="text-align:center;">✘</td></tr><tr><td style="text-align:center;">默认</td><td style="text-align:center;">✔</td><td style="text-align:center;">✔</td><td style="text-align:center;">✔</td><td style="text-align:center;">✘</td><td style="text-align:center;">✘</td></tr><tr><td style="text-align:center;">protected</td><td style="text-align:center;">✔</td><td style="text-align:center;">✔</td><td style="text-align:center;">✔</td><td style="text-align:center;">✔</td><td style="text-align:center;">✘</td></tr><tr><td style="text-align:center;">public</td><td style="text-align:center;">✔</td><td style="text-align:center;">✔</td><td style="text-align:center;">✔</td><td style="text-align:center;">✔</td><td style="text-align:center;">✔</td></tr></tbody></table><ul><li><strong>private：</strong> 私有的，该修饰符控制只能本类中使用</li><li><strong>默认(缺省)：</strong> 友好的，访问范围是 本包中可见，也经常称为：包可见</li><li><strong>protected：</strong> 受保护的，访问范围是：本包可见以及继承的子类可见</li><li><strong>public：</strong> 公共的，所有地方都可以访问</li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p><strong><code>2021-04-14</code></strong> 添加 <strong>protected</strong> 补充理解： A是B的子类，B有一个 protected 的方法C， A的对象是否能够直接调用C方法？</p><p><strong>protected</strong> 方法在子类中可用，指的是 <em><strong>子类的代码中可以用，不是子类的对象</strong></em></p><p>具体例子：Object 是所有类的超类，其中 <strong>clone()</strong> 方法是用 protected 修饰的，<strong>clone()</strong> 就只能在子类代码中使用，子类实例化的对象不能使用，除非这个子类和 Object 在同一个包</p></div><h3 id="_1-什么是抽象类" tabindex="-1"><a class="header-anchor" href="#_1-什么是抽象类" aria-hidden="true">#</a> 1. 什么是抽象类</h3><ul><li>抽象类就是使用 <strong>abstract</strong> 关键字定义的类</li><li>抽象类不能创建实例</li><li>抽象类中，可以定义抽象方法和普通方法，抽象方法必须定义在抽象类中</li><li>子类继承抽象类必须实现抽象类中的抽象方法，否则子类必须是抽象类</li></ul><blockquote><p>抽象类被创造出来就是为了继承</p><p><strong>抽象类继承方式：在类名后接 <code>extends</code> 关键字，子类只能继承一个父类</strong></p></blockquote><h3 id="_2-什么是接口" tabindex="-1"><a class="header-anchor" href="#_2-什么是接口" aria-hidden="true">#</a> 2. 什么是接口</h3><div class="hint-container tip"><p class="hint-container-title">提示</p><p>接口类就是使用 <strong>interface</strong> 关键字定义的一种特殊的抽象类</p><p>接口是一种<strong>约定的规范</strong>，定义了应该有什么功能，本身不实现功能，具体交给实现类实现</p></div><h4 id="接口特性" tabindex="-1"><a class="header-anchor" href="#接口特性" aria-hidden="true">#</a> 接口特性</h4><ul><li>接口可以包含变量，成员变量会被<strong>隐式地指定</strong>为 <strong><code>public static final</code></strong> 变量（并且只能是public static final变量，用private修饰会报编译错误）</li><li>接口可以包含方法，方法会被<strong>隐式地指定</strong>为 <strong><code>public abstract</code></strong> 方法且只能是public abstract方法（用其他关键字，比如private、protected、static、 final等修饰会报编译错误），并且接口中所有的方法不能有具体的实现，也就是说，接口中的方法必须都是抽象方法</li><li>一个类可以同时继承多个接口，且需要实现所继承接口的所有方法</li></ul><h4 id="接口实现方式" tabindex="-1"><a class="header-anchor" href="#接口实现方式" aria-hidden="true">#</a> 接口实现方式</h4><ul><li>接口类使用 <em><strong>interface</strong></em> 定义</li><li>实现类使用 <em><strong>implements</strong></em> 关键字实现， 并且要在继承关键字 <strong>(extends)</strong> 后面，一个类可以实现多个接口类，使用 <strong>(,)</strong> 隔开就行</li></ul><p><strong>扩展：从Java1.8开始, Java支持在接口中定义有实现的方法：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IWalkable</span> <span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">walk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//抽象方法</span>
    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">defaultMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;有默认实现的方法, 属于对象&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">defaultMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;有默认实现的方法, 属于类&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-抽象与接口的区别" tabindex="-1"><a class="header-anchor" href="#_3-抽象与接口的区别" aria-hidden="true">#</a> 3. 抽象与接口的区别</h3><h4 id="相同点" tabindex="-1"><a class="header-anchor" href="#相同点" aria-hidden="true">#</a> 相同点</h4><ol><li>都不能被实例化</li><li>接口的实现类或抽象类的子类都只有实现了<strong>接口或抽象类中的方法</strong>后才能实例化。</li></ol><h4 id="不同点" tabindex="-1"><a class="header-anchor" href="#不同点" aria-hidden="true">#</a> 不同点</h4><ol><li>抽象类可以提供成员方法的实现细节，而接口中只能存在 <code>public abstract</code> 方法；</li><li>抽象类中的成员变量可以是各种类型的，而接口中的成员变量只能是 <code>public static final</code> 类型的；</li><li>接口只有定义，<strong>不能有方法的实现，java 1.8中可以定义default方法体</strong>，而抽象类可以有定义与实现，方法可在抽象类中实现。</li><li>接口中不能含有静态代码块，而抽象类可以有静态代码块和静态方法；</li><li>一个类只能继承一个抽象类，而一个类却可以实现多个接口。</li></ol><h3 id="_4-何时使用抽象、接口" tabindex="-1"><a class="header-anchor" href="#_4-何时使用抽象、接口" aria-hidden="true">#</a> 4. 何时使用抽象、接口</h3><div class="hint-container tip"><p class="hint-container-title">提示</p><p>抽象类本质就是从 多个类中提取相同行为，更合适定义公共的行为</p><p>接口适合用来定义扩展功能</p></div><ul><li>当需要注重代码的扩展性或者可维护性，优先使用接口，接口和类之间没有任何层次关系</li><li>当需要为一些类提供<strong>公共的方法</strong>时，优先考虑抽象类；提供<strong>扩展功能</strong>使用接口</li></ul><h2 id="多态" tabindex="-1"><a class="header-anchor" href="#多态" aria-hidden="true">#</a> 多态</h2><h3 id="_1、分类" tabindex="-1"><a class="header-anchor" href="#_1、分类" aria-hidden="true">#</a> 1、分类</h3><p>多态分为编译时和运行时多态</p><ul><li>编译时多态：设计时多态，主要是指 方法的重载</li><li>运行时多态：指程序中定义的对象引用所指向的<strong>具体类型</strong>在运行期间才确定</li></ul><h3 id="_2、必要条件" tabindex="-1"><a class="header-anchor" href="#_2、必要条件" aria-hidden="true">#</a> 2、必要条件</h3><ul><li>必须要有继承关系</li><li>必须要重写(实现)，没有继承就没有重写</li><li><strong>父类引用指向子类对象</strong> 或 <strong>子类对象指向父类引用</strong></li></ul><h3 id="_3、继承关系" tabindex="-1"><a class="header-anchor" href="#_3、继承关系" aria-hidden="true">#</a> 3、继承关系</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>父类 变量名 <span class="token operator">=</span> <span class="token keyword">new</span> 实现类<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
变量名<span class="token punctuation">.</span>方法<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Animal类</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    	<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Animal...shout...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Cat类</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    	<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;妙妙妙...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Dog类</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    	<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;哇哇哇...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>测试类</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnimalDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Animal</span> animal <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token comment">// 创建Cat对象</span>
        animal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        animal<span class="token punctuation">.</span><span class="token function">shut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 创建Dog对象</span>
        animal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        animal<span class="token punctuation">.</span><span class="token function">shut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 输出结果:</span>
<span class="token comment">// 妙妙妙...</span>
<span class="token comment">// 哇哇哇...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>总结</strong></p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>父类引用变量指向于子类对象，调用方法时实际调用的是子类的方法。</p></div><h3 id="_4、实现关系" tabindex="-1"><a class="header-anchor" href="#_4、实现关系" aria-hidden="true">#</a> 4、实现关系</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>接口 变量名 <span class="token operator">=</span> <span class="token keyword">new</span> 实现类<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
变量名<span class="token punctuation">.</span>方法<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>ISwimable 接口</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ISwimable</span> <span class="token punctuation">{</span>
	<span class="token keyword">void</span> <span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Fish类</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Fish</span> <span class="token keyword">implements</span> <span class="token class-name">ISwimable</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    	<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;游啊游...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Dog类</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token keyword">implements</span> <span class="token class-name">ISwimable</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    	<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;哇哇哇...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    	<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;狗刨式...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>测试类</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FishDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 创建Fish对象</span>
        <span class="token class-name">ISwimable</span> fish <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Fish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        fish<span class="token punctuation">.</span><span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        fish <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Dog也是实现了ISwimable接口的</span>
        fish<span class="token punctuation">.</span><span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 输出结果:</span>
<span class="token comment">// 游啊游...</span>
<span class="token comment">// 狗刨式...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>总结</strong></p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>接口引用变量指向实现类对象，调用方法时实际调用的是实现类实现接口的方法。</p></div><h3 id="_5、多态时方法调用问题" tabindex="-1"><a class="header-anchor" href="#_5、多态时方法调用问题" aria-hidden="true">#</a> 5、多态时方法调用问题</h3><p>在上面的例子中，<strong>Animal</strong> 对象调用 <strong>shut</strong> 方法，是调用 Animal 中的还是 Cat？观察下图👇</p><figure><img src="https://media.zenghr.cn/blog/img/20210415/95gUlNIvozu1.png?imageslim" alt="mark" tabindex="0" loading="lazy"><figcaption>mark</figcaption></figure><p>调用流程：</p><ul><li>编译时判断 shut 方法是否在父类存在</li><li>不存在，则报错</li><li>找到：运行时再看子类 Cat 中是否有 该方法</li><li>找不到，执行父类的方法</li><li>找到，执行子类的方法</li></ul><h3 id="_6、多态中的类型转换" tabindex="-1"><a class="header-anchor" href="#_6、多态中的类型转换" aria-hidden="true">#</a> 6、多态中的类型转换</h3><h4 id="类型转换" tabindex="-1"><a class="header-anchor" href="#类型转换" aria-hidden="true">#</a> 类型转换</h4><p><strong>自动类型转换(向上转型)：把子类对象赋给父类变量（多态）</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 父类 &lt;= 子类</span>
<span class="token class-name">Animal</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>强制类型转换(向下转型)：把父类类型对象赋给子类类型变量。</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 子类 &lt;= (子类)父类</span>
<span class="token class-name">Animal</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Dog</span> d <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Dog</span><span class="token punctuation">)</span> a<span class="token punctuation">;</span> <span class="token comment">//正确</span>
<span class="token class-name">Cat</span> c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Cat</span><span class="token punctuation">)</span> a<span class="token punctuation">;</span> <span class="token comment">//错误</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="instanceof" tabindex="-1"><a class="header-anchor" href="#instanceof" aria-hidden="true">#</a> instanceOf</h4><p>判断该对象是否是某一个类/接口的实例</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>语法格式：
<span class="token keyword">boolean</span> b <span class="token operator">=</span> 对象<span class="token class-name">A</span>  <span class="token keyword">instanceof</span>  类<span class="token class-name">B</span><span class="token punctuation">;</span>  <span class="token comment">//判断 A对象是否是 B类的实例？如果是,返回true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Animal</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token keyword">instanceof</span> <span class="token class-name">Animal</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token keyword">instanceof</span> <span class="token class-name">Dog</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token keyword">instanceof</span> <span class="token class-name">Cat</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7、多态总结" tabindex="-1"><a class="header-anchor" href="#_7、多态总结" aria-hidden="true">#</a> 7、多态总结</h3><div class="hint-container tip"><p class="hint-container-title">提示</p><p>一句话概括：<strong>多态就是 同一个引用数据类型变量，由于引用的实例不同，执行相同的方法，产生不同的结果</strong></p></div><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>`,80),g={href:"https://www.pdai.tech/md/java/basic/java-basic-oop.html",target:"_blank",rel:"noopener noreferrer"};function b(h,y){const t=p("router-link"),l=p("ExternalLinkIcon");return o(),i("div",null,[r,k,n("nav",v,[n("ul",null,[n("li",null,[a(t,{to:"#封装"},{default:e(()=>[s("封装")]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#封装好处"},{default:e(()=>[s("封装好处")]),_:1})]),n("li",null,[a(t,{to:"#javabean的三个规范"},{default:e(()=>[s("JavaBean的三个规范")]),_:1})])])]),n("li",null,[a(t,{to:"#继承"},{default:e(()=>[s("继承")]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#访问修饰符"},{default:e(()=>[s("访问修饰符")]),_:1})]),n("li",null,[a(t,{to:"#_1-什么是抽象类"},{default:e(()=>[s("1. 什么是抽象类")]),_:1})]),n("li",null,[a(t,{to:"#_2-什么是接口"},{default:e(()=>[s("2. 什么是接口")]),_:1})]),n("li",null,[a(t,{to:"#_3-抽象与接口的区别"},{default:e(()=>[s("3. 抽象与接口的区别")]),_:1})]),n("li",null,[a(t,{to:"#_4-何时使用抽象、接口"},{default:e(()=>[s("4. 何时使用抽象、接口")]),_:1})])])]),n("li",null,[a(t,{to:"#多态"},{default:e(()=>[s("多态")]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#_1、分类"},{default:e(()=>[s("1、分类")]),_:1})]),n("li",null,[a(t,{to:"#_2、必要条件"},{default:e(()=>[s("2、必要条件")]),_:1})]),n("li",null,[a(t,{to:"#_3、继承关系"},{default:e(()=>[s("3、继承关系")]),_:1})]),n("li",null,[a(t,{to:"#_4、实现关系"},{default:e(()=>[s("4、实现关系")]),_:1})]),n("li",null,[a(t,{to:"#_5、多态时方法调用问题"},{default:e(()=>[s("5、多态时方法调用问题")]),_:1})]),n("li",null,[a(t,{to:"#_6、多态中的类型转换"},{default:e(()=>[s("6、多态中的类型转换")]),_:1})]),n("li",null,[a(t,{to:"#_7、多态总结"},{default:e(()=>[s("7、多态总结")]),_:1})])])]),n("li",null,[a(t,{to:"#参考资料"},{default:e(()=>[s("参考资料")]),_:1})])])]),m,n("p",null,[n("a",g,[s("Java 全栈知识体系 - 面向对象"),a(l)])])])}const _=c(d,[["render",b],["__file","02.Java基础 - 面向对象.html.vue"]]);export{_ as default};
