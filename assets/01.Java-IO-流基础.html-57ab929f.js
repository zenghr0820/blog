import{_ as c,r as t,o as l,c as i,d as s,e as n,b as e,w as u,a}from"./app-63d4d840.js";const r={},d=a(`<h1 id="i-o-流基础知识" tabindex="-1"><a class="header-anchor" href="#i-o-流基础知识" aria-hidden="true">#</a> I/O 流基础知识</h1><div class="hint-container tip"><p class="hint-container-title">提示</p><p>本文旨意掌握 I/O 流的基础知识以及流的基本操作。</p></div><h2 id="file-类" tabindex="-1"><a class="header-anchor" href="#file-类" aria-hidden="true">#</a> File 类</h2><p>File 理解为文件和文件夹（目录），用于表示磁盘中某个文件或文件夹的路径。该类包含了文件的创建、删除、重命名、判断是否存在等方法。只能设置和获取文件本身的信息（文件大小，是否可读），不能设置和获取文件里面的内容。</p><ul><li>Unix: 严格区分大小写，使用 <strong>(/)</strong> 来表示路径分隔符。</li><li>Windows: 默认情况下是不区分大小写的，使用 <strong>(\\)</strong> 来分割目录路径。但是在Java中一个 <strong>(\\)</strong> 表示转义，所以在 Windows 系统中就得使用两个 \\\\</li></ul><p><strong>操作 File 的常用方法</strong></p><ul><li>getName() - 获取文件名</li><li>getParent() - 获取上层路径名称（如果使用的是相对路径没有上层路径，返回 null）</li><li>getParentFile() - 获取上层路径的 File 对象</li><li>getAbsolutePath() - 获取绝对路径</li><li>getAbsoluteFile() - 获取绝对路径的 File 对象</li><li>list() - 获取该目录下的所有文件名</li><li>listFiles() - 获取该目录下的所有文件 File 对象</li><li>exists() - 判断文件是否存在</li><li>createNewFile() - 创建新文件</li><li>isDirectory() - 判断是否是目录</li><li>mkdir() - 创建新目录</li><li>mkdirs() - 创建新目录（补充不存在的上层目录）</li><li>renameTo() - 移动重命名文件</li><li>delete() - 删除文件</li></ul><h2 id="字符编码" tabindex="-1"><a class="header-anchor" href="#字符编码" aria-hidden="true">#</a> 字符编码</h2><h3 id="常见的字符集" tabindex="-1"><a class="header-anchor" href="#常见的字符集" aria-hidden="true">#</a> 常见的字符集</h3><ul><li><strong>ASCII：占一个字节，只能包含128个符号。不能表示汉字。</strong></li><li><strong>ISO-8859-1：也称之为latin-1，占一个字节，收录西欧语言，不能表示汉字。</strong></li><li>GB2312/GBK/GB18030：占两个字节，支持中文。</li><li>ANSI：占两个字节，在简体中文的操作系统中ANSI 就指的是 GBK。</li><li><strong>UTF-8：是一种针对Unicode的可变长度字符编码，是Unicode的实现方式之一，支持中文。在开</strong><br><strong>发中建议使用</strong></li></ul><h3 id="编码解码操作" tabindex="-1"><a class="header-anchor" href="#编码解码操作" aria-hidden="true">#</a> 编码解码操作</h3><p>数据在网络上传输是以二进制的格式，二进制格式就是 byte 数组，此时需要把信息做编码和解码处理</p><ul><li>编码：把字符串转换为byte数组 String---&gt;byte[]</li><li>解码：把 byte 数组转换为字符串 byte[]---&gt;String</li></ul><p><strong>注意：一定要保证编码和解码的字符集相同，才能正确解码出信息</strong></p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>乱码问题的根本原因就是 编码和解码使用的字符集不是同一种，解决方法 统一编码字符集</p></div><h2 id="四大基流" tabindex="-1"><a class="header-anchor" href="#四大基流" aria-hidden="true">#</a> 四大基流</h2><div class="hint-container tip"><p class="hint-container-title">提示</p><p>InputStream/OutputStream 只定义了流的流向和流通道的数据单元，并没有定义源数据源和目的地</p><p>java.io包中的类是按照 源数据源 和 目的地 进行划分的。</p><p>java.io包中的类命名规则：<strong>数据源/目的地 + 数据传输单元</strong> <em>e.g：File + InputStream / File + Reader</em></p></div><p>根据流的不同特性，流的划分是不一样的，一般按照如下情况来考虑:</p><ul><li>按流动方向：分为 输入流 和 输出流</li><li>按数据传输单位：分为 字节流 和 字符流，即每次传递一个字节（byte）或一个字符（char）</li><li>按功能上划分：分为 节点流 和 处理流，节点流功能单一，处理流功能更强</li></ul><table><thead><tr><th style="text-align:center;">流向</th><th style="text-align:center;">字节流</th><th style="text-align:center;">字符流</th></tr></thead><tbody><tr><td style="text-align:center;">输入流</td><td style="text-align:center;">InputStream</td><td style="text-align:center;">Reader</td></tr><tr><td style="text-align:center;">输出流</td><td style="text-align:center;">OutputStream</td><td style="text-align:center;">Writer</td></tr></tbody></table><h2 id="字节输入-字节输出流" tabindex="-1"><a class="header-anchor" href="#字节输入-字节输出流" aria-hidden="true">#</a> 字节输入/字节输出流</h2><figure><img src="https://media.zenghr.cn/blog/img/20210505/PTuOyaS8Y46e.png?imageslim" alt="mark" tabindex="0" loading="lazy"><figcaption>mark</figcaption></figure><h3 id="inputstream-字节输入流" tabindex="-1"><a class="header-anchor" href="#inputstream-字节输入流" aria-hidden="true">#</a> InputStream(字节输入流)</h3><p>InputStream 代表字节输入流的所有类的父类</p><p><strong>常用方法</strong></p><table><thead><tr><th style="text-align:left;">方法</th><th>方法作用</th></tr></thead><tbody><tr><td style="text-align:left;">int read()</td><td>从输入流中读取一个字节数据并返回该字节数据，如果到达流的末尾，则返回 -1</td></tr><tr><td style="text-align:left;">int read(byte[] buff)</td><td>从输入流中读取多个字节数据，并存储在缓冲区数组 buff 中。返回已读取的字节数量，如果已到达流的末尾，则返回 -1</td></tr><tr><td style="text-align:left;">void close()</td><td>关闭此输入流并释放与该流关联的所有系统资源。InputStream 的 close 方法不执行任何操作</td></tr></tbody></table><h3 id="outputstream-字节输出流" tabindex="-1"><a class="header-anchor" href="#outputstream-字节输出流" aria-hidden="true">#</a> OutputStream(字节输出流)</h3><p>OutputStream 代表字节输出流的所有类的父类</p><p><strong>常用方法</strong></p><table><thead><tr><th>方法</th><th>方法作用</th></tr></thead><tbody><tr><td>void write(int b)</td><td>将指定的一个字节数据b写入到输出流中</td></tr><tr><td>void write(byte[] buff)</td><td>把数组buff中所有字节数据写入到输出流中</td></tr><tr><td>void write(byte[] buff, int off, int len)</td><td>把数组buff中从索引 off 开始的 len 个字节写入此输出流中</td></tr><tr><td>void flush()</td><td>刷新缓冲区</td></tr><tr><td>void close()</td><td>关闭此输出流并释放与此流有关的所有系统资源</td></tr></tbody></table><h3 id="文件字节流" tabindex="-1"><a class="header-anchor" href="#文件字节流" aria-hidden="true">#</a> 文件字节流</h3><p>根据 IO 包中类的命名规则，当程序操作的源数据是文件时，输入字节流使用 <strong>FileInputStream</strong> 实现类，输出字节流使用 <strong>FileOutputStream</strong> 实现类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 源数据</span>
    <span class="token class-name">File</span> srcFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;E:\\\\test\\\\test.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">File</span> decFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;test.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// todo: jdk 1.7 语法，实现了 AutoCloseable 接口会自动关闭</span>
    <span class="token keyword">try</span> <span class="token punctuation">(</span>
        <span class="token class-name">FileInputStream</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>srcFile<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">FileOutputStream</span> out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>decFile<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 循环读取</span>
        <span class="token keyword">int</span> len<span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
            out<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="字符输入-输出流" tabindex="-1"><a class="header-anchor" href="#字符输入-输出流" aria-hidden="true">#</a> 字符输入/输出流</h2><figure><img src="https://media.zenghr.cn/blog/img/20210505/HnpYqN6waVjY.png?imageslim" alt="mark" tabindex="0" loading="lazy"><figcaption>mark</figcaption></figure><h3 id="reader-字符输入流" tabindex="-1"><a class="header-anchor" href="#reader-字符输入流" aria-hidden="true">#</a> Reader(字符输入流)</h3><p>Reader 表示字符输入流的所有类的超类</p><p><strong>常用方法</strong></p><table><thead><tr><th style="text-align:left;">方法</th><th>方法作用</th></tr></thead><tbody><tr><td style="text-align:left;">int read()</td><td>从输入流中读取一个字节数据并返回该字节数据，如果到达流的末尾，则返回 -1</td></tr><tr><td style="text-align:left;">int read(char[] cbuf)</td><td>从输入流中读取多个字节数据，并存储在缓冲区数组 cbuf 中。返回已读取的字节数量，如果已到达流的末尾，则返回 -1</td></tr><tr><td style="text-align:left;">void close()</td><td>关闭此输入流并释放与该流关联的所有系统资源</td></tr></tbody></table><h3 id="writer-字符输出流" tabindex="-1"><a class="header-anchor" href="#writer-字符输出流" aria-hidden="true">#</a> Writer(字符输出流)</h3><p>Writer 代表字符输出流的所有类的超类</p><p><strong>常用方法</strong></p><table><thead><tr><th>方法</th><th>方法作用</th></tr></thead><tbody><tr><td>void write(int c)</td><td>将指定的一个字符数据 c 写入到输出流中</td></tr><tr><td>void write(char[] cbuf)</td><td>把数组 cbuf 中 cbuf.length 个字符数据写入到输出流中</td></tr><tr><td>void write(char[] cbuf, int off,int len)</td><td>把数组 cbuf 中从索引 off 开始的 len 个字符写入此输出流中</td></tr><tr><td>void write(String str)</td><td>将str字符串数据写入到输出流中</td></tr><tr><td>void close()</td><td>关闭此输入流并释放与该流关联的所有系统资源</td></tr><tr><td>void flush()</td><td>刷新此输出流并强制写出所有缓冲的输出字符</td></tr></tbody></table><h3 id="文件字符流" tabindex="-1"><a class="header-anchor" href="#文件字符流" aria-hidden="true">#</a> 文件字符流</h3><ul><li>FileReader - 操作文件的字符输入流</li><li>FileWriter - 操作文件的字符输出流</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 源数据</span>
    <span class="token class-name">File</span> srcFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;E:\\\\test\\\\test.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">File</span> decFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;test.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// todo: jdk 1.7 语法，实现了 AutoCloseable 接口会自动关闭</span>
    <span class="token keyword">try</span> <span class="token punctuation">(</span>
        <span class="token class-name">FileReader</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>srcFile<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">FileWriter</span> out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span>decFile<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 循环读取</span>
        <span class="token keyword">int</span> len<span class="token punctuation">;</span>
        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
            out<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,46),k={id:"补充知识点",tabindex:"-1"},m=s("a",{class:"header-anchor",href:"#补充知识点","aria-hidden":"true"},"#",-1),v=a(`<div class="hint-container tip"><p class="hint-container-title">提示</p><p>在文件对象中写入内容的时候，如果该文件对象已经有了其他的内容，这时候我们在使用 write 方法写入数据的时候，会覆盖掉原有的内容，如果想要在原有的内容上追加需要使用构造器 <strong>FileWriter<code>(String fileName, boolean append)</code></strong> ，设置为 <strong>true</strong>，添加数据就会在原有内容的基础上追加</p></div><p><strong>在 JDK 1.7 的新语法中，实现了 AutoCloseable 接口的类会自动帮你关闭资源，语法如下👇</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">(</span>
    <span class="token class-name">FileInputStream</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>srcFile<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">FileOutputStream</span> out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>decFile<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ... 代码块</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ..</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="按资源分类i-o流" tabindex="-1"><a class="header-anchor" href="#按资源分类i-o流" aria-hidden="true">#</a> 按资源分类I/O流</h2><figure><img src="https://media.zenghr.cn/blog/img/20210505/rEusKzmBjKae.png?imageslim" alt="mark" tabindex="0" loading="lazy"><figcaption>mark</figcaption></figure><h2 id="缓冲流" tabindex="-1"><a class="header-anchor" href="#缓冲流" aria-hidden="true">#</a> 缓冲流</h2><p><strong>节点流</strong>的功能都比较单一，性能较低。</p><p><strong>处理流</strong>，也称之为<strong>包装流</strong>，相对于节点流更高级，这里存在一个设计模式—— <strong>装饰设计模式</strong></p>`,8),b=a(`<p>缓冲流内置了一个大小为 8192 的缓冲区，用于减少磁盘的操作，存满 8192 缓冲区才会写入磁盘中，操作数据量比较大的流，建议都用缓冲流，缓冲流根据四大基流都有对应的缓冲流</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">BufferedInputStream</span> <span class="token operator">/</span> <span class="token class-name">BufferedOutputStream</span> <span class="token operator">/</span> <span class="token class-name">BufferedReader</span> <span class="token operator">/</span> <span class="token class-name">BufferedWriter</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="字节缓冲流" tabindex="-1"><a class="header-anchor" href="#字节缓冲流" aria-hidden="true">#</a> 字节缓冲流</h3><p>字节缓冲流的 API 方法基本和 字节基流的操作一致</p><ul><li>BufferedInputStream</li><li>BufferedOutputStream</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 源数据</span>
    <span class="token class-name">File</span> srcFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;E:\\\\test\\\\test.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">File</span> decFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;test.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// todo: jdk 1.7 语法，实现了 AutoCloseable 接口会自动关闭</span>
    <span class="token keyword">try</span> <span class="token punctuation">(</span>
        <span class="token class-name">FileInputStream</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>srcFile<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">FileOutputStream</span> out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>decFile<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// buff 缓冲区包装类</span>
        <span class="token class-name">BufferedInputStream</span> buffIn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">BufferedOutputStream</span> buffOut <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 循环读取</span>
        <span class="token keyword">int</span> len<span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> buffIn<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            buffOut<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        buffOut<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="字符缓冲流" tabindex="-1"><a class="header-anchor" href="#字符缓冲流" aria-hidden="true">#</a> 字符缓冲流</h3><p><strong>BufferedReader</strong> 继承于 Reader，实现对文本型文件进行高效(一次读取一行)的读取，提供特有的方法 <strong>readLine()</strong> 读取一行</p><p><strong>BufferedWriter</strong> 继承于 Writer，实现对文本型文件进行高效的写入，提供特有的方法 <strong>newLine()</strong> 写入一个换行</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>ublic <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 源数据</span>
    <span class="token class-name">File</span> srcFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;E:\\\\test\\\\test.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">File</span> decFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;test.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// todo: jdk 1.7 语法，实现了 AutoCloseable 接口会自动关闭</span>
    <span class="token keyword">try</span> <span class="token punctuation">(</span>
        <span class="token class-name">FileReader</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>srcFile<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">FileWriter</span> out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span>decFile<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// buff 缓冲区包装类</span>
        <span class="token class-name">BufferedReader</span> buffIn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">BufferedWriter</span> buffOut <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 循环读取每一行</span>
        <span class="token class-name">String</span> line<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> buffIn<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 一行一行写入文件</span>
            buffOut<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 写入换行</span>
            buffOut<span class="token punctuation">.</span><span class="token function">newLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 刷新缓冲区</span>
        buffOut<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="serializable-对象序列化" tabindex="-1"><a class="header-anchor" href="#serializable-对象序列化" aria-hidden="true">#</a> serializable(对象序列化)</h2><p><strong>序列化：</strong> 指把 Java 堆内存中的对象数据，通过某种方式把对象数据存储到磁盘文件中或者传递给给网络上传输。序列化在分布式系统在应用非常广泛</p><p><strong>反序列化：</strong> 把磁盘文件中的对象的数据或者把网络节点上的对象数据恢复成 Java 对象的过程</p><p>需要做序列化的对象必须实现序列化接口：<em>java.io.Serializable(这只是标志接口，没有抽象方法)</em></p><p>通过 IO 中的对象流来做序列化和反序列化操作</p><ul><li><strong>ObjectInputStream：</strong> 通过 writeObject 方法操作序列化</li><li><strong>ObjectOutoutStream：</strong> 通过 readObject 方法操作反序列化</li></ul><p><strong>注意：如果字段使用 transient 关键字修饰，该字段不会被序列化</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 实现 serializable 接口</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>
    <span class="token comment">// 不序列化</span>
    <span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>
	<span class="token comment">// ... set/get</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>序列化操作</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">&quot;123456&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">FileOutputStream</span> out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">&quot;user.dll&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// 序列化字节写入文件</span>
    oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// 关闭资源</span>
    oos<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    oos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>反序列化操作</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token comment">// 反序列化</span>
    <span class="token class-name">FileInputStream</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;user.dll&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ObjectInputStream</span> ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// 读取文件 反序列化成 java 对象</span>
    <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// 关闭资源</span>
    ois<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>序列化版本问题</strong></p><p>当类实现 <strong>Serializable</strong> 接口后，在编译的时候就会根据字段生成一个缺省的 <strong>serialVersionUID</strong> 值，并在序列化操作时，写到序列化数据文件中</p><p>但随着项目的升级系统的 class 文件也会升级(增加一个字段/删除一个字段)，此时再重新编译，对象的 <strong>serialVersionUID</strong> 值又会改变。那么在反序列化时，JVM会把对象数据数据中的 <strong>serialVersionUID</strong> 与本地字节码中的 <strong>serialVersionUID</strong> 进行比较，如果值不相同（意味着类的版本不同），那么报异常 <strong>InvalidClassException</strong>，即：类版本不对应，不能进行反序列化。如果版本号相同，则可以进行反序列化，如下👇</p><figure><img src="https://media.zenghr.cn/blog/img/20210506/4XlByvYy3I9L.png?imageslim" alt="mark" tabindex="0" loading="lazy"><figcaption>mark</figcaption></figure><p>为了避免代码版本升级而造成反序列化因版本不兼容而失败的问题，在开发中我们可以故意在类中提供一个固定的 <strong>serialVersionUID</strong> 值</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>
	<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">1L</span><span class="token punctuation">;</span>
  	<span class="token comment">// ..</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,28);function g(h,f){const p=t("Badge"),o=t("RouterLink");return l(),i("div",null,[d,s("h2",k,[m,n(" 补充知识点"),e(p,{text:"New"})]),v,s("p",null,[n("如需要进一步了解 装饰者模式 可以看："),e(o,{to:"/passages/2021-05-07-java.html"},{default:u(()=>[n("Java IO - 设计模式(装饰者模式)")]),_:1})]),b])}const y=c(r,[["render",g],["__file","01.Java-IO-流基础.html.vue"]]);export{y as default};
