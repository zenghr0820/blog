import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,o as t}from"./app-CZlcYx0L.js";const h={};function l(p,s){return t(),a("div",null,s[0]||(s[0]=[n(`<h1 id="理解-string" tabindex="-1"><a class="header-anchor" href="#理解-string"><span>理解 String</span></a></h1><div class="hint-container tip"><p class="hint-container-title">提示</p><p>本文主要分析 String 包，以及StringBuffer、StringBuilder的操作，运行环境：<em>jdk 1.8.0_212</em></p></div><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2><p><a href="https://tech.meituan.com/2014/03/06/in-depth-understanding-string-intern.html" target="_blank" rel="noopener noreferrer">深入理解String#intern</a></p><h2 id="string-概念" tabindex="-1"><a class="header-anchor" href="#string-概念"><span>String 概念</span></a></h2><p><strong>String</strong> 类是代表字符串，Java中所有的字符字面量都是此类的实现；</p><p>内部使用 char 类型的数组存储数据，该数组被 <strong>final</strong> 修饰，代表该数组赋值初始化后就不能被修改，并且内部没有实行可以修改该数组的方法，因此 <strong>String是不可变的</strong>。</p><div class="language-java" data-highlighter="shiki" data-ext="java" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/** The value is used for character storage. */</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">private</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> final</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> char</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> value[]</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span></code></pre></div><h2 id="不可变的好处" tabindex="-1"><a class="header-anchor" href="#不可变的好处"><span>不可变的好处</span></a></h2><h3 id="_1-string-pool-字符缓存池" tabindex="-1"><a class="header-anchor" href="#_1-string-pool-字符缓存池"><span>1. String Pool 字符缓存池</span></a></h3><p>如果一个 String 对象已经被创建过，那么就会从 String Pool 中引用，只有 String 是不可变的，才可能使用 String Pool，内存图如下👇</p><div class="language-java" data-highlighter="shiki" data-ext="java" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> str1 </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;"> &quot;abc&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> str2 </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;"> &quot;abc&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">System</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(str1 </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> str2);</span><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // true</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> str3 </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> String</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">&quot;abc&quot;</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">System</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(str3 </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> str1);</span><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // false</span></span></code></pre></div><p><img src="https://media.zenghr.cn/blog/img/20210416/zzGoFv76j7rA.png?imageslim" alt="mark"></p><h3 id="_2-线程安全" tabindex="-1"><a class="header-anchor" href="#_2-线程安全"><span>2. 线程安全</span></a></h3><p>因为 <strong>String</strong> 不可变特性，所以 String 天生具备线程安全，可以在多个线程中使用</p><h2 id="string-stringbuffer-stringbuilder" tabindex="-1"><a class="header-anchor" href="#string-stringbuffer-stringbuilder"><span>String，StringBuffer，StringBuilder</span></a></h2><h3 id="_1-可变性" tabindex="-1"><a class="header-anchor" href="#_1-可变性"><span>1. 可变性</span></a></h3><ul><li>String 不可变</li><li>StringBuffer 和 StringBuilder 可变</li></ul><h3 id="_2-线程安全-1" tabindex="-1"><a class="header-anchor" href="#_2-线程安全-1"><span>2. 线程安全</span></a></h3><ul><li><strong>String</strong> 不可变，所以线程安全</li><li><strong>StringBuffer</strong> 线程安全，内部使用 synchronized 实现</li><li><strong>StringBuilder</strong> 线程不安全</li></ul><h2 id="stringbuffer" tabindex="-1"><a class="header-anchor" href="#stringbuffer"><span>StringBuffer</span></a></h2><div class="hint-container tip"><p class="hint-container-title">提示</p><p><strong>StringBuffer(字符缓冲区)</strong> 可以当成是一个包装类，内部封装了一个字符数组，并提供相应的 增、删、改、查等操作方法，也可以称为 <strong>字符串容器</strong>，由于 StringBuffer 是线程安全，所以<strong>效率比StringBuilder低</strong>，所以我们平时优先使用 <strong>StringBuilder</strong></p></div><h4 id="stringbuffer-构造方法" tabindex="-1"><a class="header-anchor" href="#stringbuffer-构造方法"><span>StringBuffer 构造方法</span></a></h4><ul><li>StringBuffer() ：初始容量是 <strong>16</strong> 的可变字符串</li><li>StringBuffer(int capacity) ：构造一个容量是 capacity 的可变字符串</li></ul><h4 id="stringbuffer和stringbuilder-常用方法" tabindex="-1"><a class="header-anchor" href="#stringbuffer和stringbuilder-常用方法"><span>StringBuffer和StringBuilder 常用方法</span></a></h4><p><strong>StringBuffer</strong> 主要操作是 <code>append</code> 和 <code>insert</code> 方法</p><ul><li><strong>append：</strong> 在原有的字符串后面追加数据</li><li><strong>insert(int offset, String str)：</strong> 在指定位置插入字符串</li><li><strong>delete(int start, int end)：</strong> 删除指定区间的字符串，含头不含尾</li><li><strong>setCharAt(int index, char ch)：</strong> 替换指定位置的字符</li><li><strong>replace(int start, int end, String str)：</strong> 替换指定区间的字符串</li><li><strong>capacity()：</strong> 返回容量大小</li></ul><blockquote><p>StringBuilder Api 和 StringBuffer Api一致，唯一不同就是线程安全与否</p></blockquote><h2 id="自动扩容源码分析" tabindex="-1"><a class="header-anchor" href="#自动扩容源码分析"><span>自动扩容源码分析</span></a></h2><p>StringBuffer 和 StringBuilder 调用 append 方法，都会调用 父类的 append 方法，父类的 append 方法源码如下👇 - (源码版本：<em><strong>JKD 1.8</strong></em>)</p><h3 id="append" tabindex="-1"><a class="header-anchor" href="#append"><span>append</span></a></h3><div class="language-java" data-highlighter="shiki" data-ext="java" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> AbstractStringBuilder</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> append</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> str) {</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> (str </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> appendNull</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> len </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> str</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">length</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">    ensureCapacityInternal</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">(count </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> len)</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">    str</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">getChars</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">, len, value, count);</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">    count </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">+=</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> len</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> this</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">}</span></span></code></pre></div><h3 id="ensurecapacityinternal" tabindex="-1"><a class="header-anchor" href="#ensurecapacityinternal"><span>ensureCapacityInternal</span></a></h3><p>可以看出核心的代码为 <strong><code>ensureCapacityInternal</code></strong> 方法，传入参数为，原有长度(<code>count</code>) + 新字符串长度(<code>len</code>)，点击查看 <strong><code>ensureCapacityInternal</code></strong> 源码👇</p><div class="language-java" data-highlighter="shiki" data-ext="java" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">private</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> ensureCapacityInternal</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> minimumCapacity) {</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // overflow-conscious code</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 如果 新字符串长度 - 数组容量 value.length 大于 0 即超出最大容量</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 则执行 数组拷贝，生成新的数组</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> (minimumCapacity </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> value</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">length</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> &gt;</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">        value </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> Arrays</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">copyOf</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(value, </span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">newCapacity</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(minimumCapacity));</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">}</span></span></code></pre></div><p><strong>ensureCapacityInternal</strong> 方法中，判断 如果 新字符串长度(<strong>minimumCapacity</strong>) - 数组容量 <strong>value.length</strong> 大于 0 即<strong>超出最大容量</strong>，则执行 <strong><code>newCapacity</code></strong> 方法计算新的扩容长度，然后执行 <strong>Arrays.copyOf</strong> 生成新的字符数组， <strong><code>newCapacity</code></strong> 源码如下👇</p><h3 id="newcapacity" tabindex="-1"><a class="header-anchor" href="#newcapacity"><span>newCapacity</span></a></h3><div class="language-java" data-highlighter="shiki" data-ext="java" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">private</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> newCapacity</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> minCapacity) {</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // overflow-conscious code</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 先将 原有容量长度 &lt;&lt; 1，相当于 乘于 2，翻倍，再加 +2</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> newCapacity </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">value</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">length</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> &lt;&lt;</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">) </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 如果 新计算的 容量长度比新字符串长度小，那么直接将 新字符串长度 赋值成新的数组容量</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> (newCapacity </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> minCapacity </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">        newCapacity </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> minCapacity</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 如果 新的容量小于等于0 或者 新容量大小比数组最大长度大，则重新计算容量</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 否则 直接返回上面计算的新的容量大小</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> (newCapacity </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">&lt;=</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> ||</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> MAX_ARRAY_SIZE </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> newCapacity </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">        ?</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> hugeCapacity</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">(minCapacity)</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">        :</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> newCapacity</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">}</span></span></code></pre></div><p>查看 <strong>newCapacity</strong> 源码则知道，先将原有容量大小 <strong>左移 1</strong>，也就是容量翻倍，再 <strong>+2</strong>，得出新的容量大小 <strong><code>newCapacity</code></strong>。</p><p>再将新的容量 <strong>newCapacity</strong> 跟新字符串长度进行比较，如果比新字符串长度小，那么直接将 新字符串长度 <strong>赋值成新的数组容量</strong> <strong><code>newCapacity = minCapacity;</code></strong></p><p>最后再 校验一下，如果 <strong>新的容量小于等于0</strong> 或者 <strong>新容量大小比数组最大长度大</strong>，就要执行 <strong>hugeCapacity</strong> 方法重新计算容量大小，否则 直接返回 新容量大小 <strong>newCapacity</strong></p><p>查看 <strong>hugeCapacity</strong> 方法源码👇</p><div class="language-java" data-highlighter="shiki" data-ext="java" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">private</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> hugeCapacity</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> minCapacity) {</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 如果 新字符串长度 比 Integer 最大值还要大，则抛出异常</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Integer</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">MAX_VALUE</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> minCapacity </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">) { </span><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// overflow</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">        throw</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> OutOfMemoryError</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 如果 新字符串长度 小于 最大数组长度，返回 新字符串长度，否则返回 最大数组长度</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> (minCapacity </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> MAX_ARRAY_SIZE)</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">        ?</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> minCapacity </span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> MAX_ARRAY_SIZE</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">}</span></span></code></pre></div><p>该方法主要判断新字符串是否<strong>超出 Integer 最大值</strong>，超出则抛出异常</p><p>如果 新字符串长度 小于 最大数组长度，则返回 <strong>新字符串长度</strong>，否则返回 <strong>最大数组长度</strong></p><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><blockquote><p>注：</p><p>Integer.MAX_VALUE(Integer 最大值)：2147483647</p><p>MAX_ARRAY_SIZE(数组最大长度)：Integer.MAX_VALUE - 8</p></blockquote><div class="hint-container tip"><p class="hint-container-title">提示</p><p>在原有容量大小的基础上 <strong>翻倍再+2</strong> 得出 <strong>newCapacity</strong>，如果还是小于新字符串长度，直接将<strong>新字符串长度设置成新的容量</strong>，否则使用翻倍后的容量</p><p>校验 <strong>newCapacity</strong> 后发现新计算的容量不合法 <code>小于0 或者 大于数组最大长度</code>，则需要根据新的字符串重新计算容量，合法就使用 <strong>newCapacity</strong> 作为新的容量，重新计算规则为：</p><ol><li><strong>前提条件</strong>：新的字符串长度不能超出 <strong>Integer</strong> 的最大值，则直接抛出异常 <strong><code>OutOfMemoryError</code></strong></li><li>在前提下，字符串长度比<strong>最大数组长度</strong>大，直接使用字符串长度作为新的容量</li><li>否则使用 <strong>数组最大长度</strong> 作为新的容量</li></ol></div><h2 id="string-intern" tabindex="-1"><a class="header-anchor" href="#string-intern"><span>String.intern()</span></a></h2><p>使用 <strong>String.intern()</strong> 可以保证相同内容的字符串变量引用同一的内存对象</p><h3 id="string-常量池" tabindex="-1"><a class="header-anchor" href="#string-常量池"><span>String 常量池</span></a></h3><p><strong>String 常量池</strong> 也称为 缓存池，八大基本数据类型都有自己的缓存池，使用方法：</p><ul><li>直接使用双引号声明出来 <code>String</code> 对象会直接存储在 常量池中</li><li>使用 <code>new String()</code> 创建的 String 对象，会在堆区生成一个String 对象，还会在常量池中生成 相应的字符串对象(如果常量池不存在该对象的话)</li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p><strong>String s = new String(&quot;abc&quot;)</strong> 这个语句生成了几个对象，根据上面总结的可知，一共生成两个对象，常量池中的 <strong>abc</strong> 对象，堆区的 <strong>String</strong> 对象</p></div><h3 id="intern-分析" tabindex="-1"><a class="header-anchor" href="#intern-分析"><span>intern 分析</span></a></h3><p>判断下面代码会输出什么结果👇</p><div class="language-java" data-highlighter="shiki" data-ext="java" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">[] args) {</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">    String</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> s </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> String</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">&quot;1&quot;</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">    s</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">intern</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">    String</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> s2 </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;"> &quot;1&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">    System</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(s </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> s2);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">    String</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> s3 </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> String</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">&quot;1&quot;</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">) </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> String</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">&quot;1&quot;</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">    s3</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">intern</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">    String</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> s4 </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;"> &quot;11&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">    System</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(s3 </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> s4);</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">}</span></span></code></pre></div><p>打印结果是：</p><ul><li><strong>jdk6：</strong> false，false</li><li><strong>jdk7：</strong> false，true</li></ul><p>如果我将 <strong><code>intern()</code></strong> 方法都往下移一句，会发生什么结果呢👇</p><div class="language-java" data-highlighter="shiki" data-ext="java" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">[] args) {</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">    String</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> s </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> String</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">&quot;1&quot;</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">    String</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> s2 </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;"> &quot;1&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">    s</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">intern</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">    System</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(s </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> s2);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">    String</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> s3 </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> String</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">&quot;1&quot;</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">) </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> String</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">&quot;1&quot;</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">    String</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> s4 </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;"> &quot;11&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">    s3</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">intern</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">    System</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(s3 </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> s4);</span></span>
<span class="line"><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;">}</span></span></code></pre></div><p>打印结果：</p><ul><li><strong>jdk6：</strong> false，false</li><li><strong>jdk8：</strong> false，false</li></ul><p><strong>JDK 1.6 分析</strong></p><p><img src="https://media.zenghr.cn/blog/img/20210419/v4xr7w1V4uuv.png?imageslim" alt="mark"></p><p>因为 jdk6中的常量池是放在 <strong>Perm</strong> 区中的，<strong>Perm</strong> 区和正常的 <strong>JAVA Heap</strong> 区域是完全分开的</p><p>而我们 new 出来的 String 对象是在 <strong>堆区(Heap)</strong> 中的，所以拿一个 JAVA Heap 区域的对象地址和字符串常量池的对象地址进行比较肯定是不相同的，即使调用<code>String.intern</code>方法也是没有任何关系的</p><p><strong>JDK 1.7 分析</strong></p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>在 <strong>Jdk6</strong> 以及以前的版本中，字符串的常量池是放在堆的 Perm 区的，Perm 区是一个类静态的区域，主要存储一些加载类的信息，常量池，方法片段等内容</p><p>在 <strong>jdk7</strong> 的版本中，字符串常量池已经从 Perm 区移到正常的 <strong>Java Heap(堆)</strong> 区域了</p></div><p><img src="https://media.zenghr.cn/blog/img/20210419/c2kp0NSnHDNu.png?imageslim" alt="mark"></p><ul><li>我们先看 <strong>s和s2</strong> 两个对象，通过 new 创建的 String 对象，会在堆中生成String对象，以及常量池中的 &quot;1&quot; 对象，我们执行 <strong><code>s.intern()</code></strong> 方法时，就是 <strong>s对象</strong> 去常量池中寻找后发现 <strong>&quot;1&quot;</strong> 已经在常量池中了</li><li>接着执行 <strong><code>s2 = &quot;1&quot;</code></strong> ，生成一个引用指向常量池中的 &quot;1&quot; 对象，所以 <strong>s和s2</strong> 的引用地址不同，从图中我们可以清晰的看出</li><li>再看 <strong>s3和s4</strong> 字符串，<strong>String s3 = new String(&quot;1&quot;) + new String(&quot;1&quot;)</strong> 代码最终生成了两个对象，一个是常量池中的 &quot;1&quot;，以及堆中的 s3 引用对象 String，该对象的内容是 &quot;11&quot;，此时常量池中是没有 &quot;11&quot; 对象的</li><li>接着 <strong><code>s3.intern()</code></strong> 代码执行，将 s3 中引用的字符存储进常量池中，因为此时常量池中是没有 &quot;11&quot; 对象的，所以会在 常量池中生成一个 &quot;11&quot; 的对象，该过程跟 <strong>JDK 1.6</strong> 是一致的，但是在 <strong>JDK 1.7</strong> 中，常量池中可以存储堆中的地址引用</li><li>接着 <strong>String s4 = &quot;11&quot;</strong> ，会去常量池中创建，创建的时候会发现已经存在，因为常量池中 &quot;11&quot; 对象保存的是 s3 的地址引用，所以 s4 就指向 s3 所在的内存地址，因此最后 <strong><code>s3 == s4</code></strong> 的结果就是 <strong>true</strong></li></ul><p><img src="https://media.zenghr.cn/blog/img/20210419/xyEBKcHqqqPY.png?imageslim" alt="mark"></p><ul><li>看第二段代码，代码唯一的改变就是 intern 的位置顺序改变了，intern 方法位置变到 <strong>String s4 = &quot;11&quot;</strong> 后面</li><li>因此执行 <strong>String s4 = &quot;11&quot;</strong> 语句时，常量池中没有 &quot;11&quot; 的对象，所以 s4 会创建一个新的对象，而 s3 也是在堆中创建的对象，两个对象地址都不一致，所以 <strong>s3 == s4</strong> 的结果是 false</li></ul><h3 id="总结-1" tabindex="-1"><a class="header-anchor" href="#总结-1"><span>总结</span></a></h3><p>jdk7 版本对 intern 操作和常量池都做了一定的修改</p><ul><li>String 常量池 从 Perm 移到 Java Heap 区</li><li><strong><code>String#intern</code></strong> 方法时，如果存在堆中的对象，会<strong>直接保存对象的引用，而不会重新创建对象</strong>。</li></ul>`,76)]))}const e=i(h,[["render",l]]),g=JSON.parse('{"path":"/Java/basic/05.%E7%90%86%E8%A7%A3String-intern.html","title":"理解String#intern","lang":"zh-CN","frontmatter":{"title":"理解String#intern","date":"2021-04-18T22:30:00.000Z","re":"2021-04-18-java-string-intern","category":["Java"],"description":"理解 String 提示 本文主要分析 String 包，以及StringBuffer、StringBuilder的操作，运行环境：jdk 1.8.0_212 参考资料 深入理解String#intern String 概念 String 类是代表字符串，Java中所有的字符字面量都是此类的实现； 内部使用 char 类型的数组存储数据，该数组被 fi...","permalink":"/passages/2021-04-18-java-string-intern.html","head":[["meta",{"property":"og:url","content":"https://blog.zenghr.cn/passages/2021-04-18-java-string-intern.html"}],["meta",{"property":"og:site_name","content":"Zenghr"}],["meta",{"property":"og:title","content":"理解String#intern"}],["meta",{"property":"og:description","content":"理解 String 提示 本文主要分析 String 包，以及StringBuffer、StringBuilder的操作，运行环境：jdk 1.8.0_212 参考资料 深入理解String#intern String 概念 String 类是代表字符串，Java中所有的字符字面量都是此类的实现； 内部使用 char 类型的数组存储数据，该数组被 fi..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://media.zenghr.cn/blog/img/20210416/zzGoFv76j7rA.png?imageslim"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-07T20:02:42.000Z"}],["meta",{"property":"article:published_time","content":"2021-04-18T22:30:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-07T20:02:42.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"理解String#intern\\",\\"image\\":[\\"https://media.zenghr.cn/blog/img/20210416/zzGoFv76j7rA.png?imageslim\\",\\"https://media.zenghr.cn/blog/img/20210419/v4xr7w1V4uuv.png?imageslim\\",\\"https://media.zenghr.cn/blog/img/20210419/c2kp0NSnHDNu.png?imageslim\\",\\"https://media.zenghr.cn/blog/img/20210419/xyEBKcHqqqPY.png?imageslim\\"],\\"datePublished\\":\\"2021-04-18T22:30:00.000Z\\",\\"dateModified\\":\\"2025-04-07T20:02:42.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Zenghr\\"}]}"]]},"git":{"createdTime":1744056162000,"updatedTime":1744056162000,"contributors":[{"name":"zenghr","username":"zenghr","email":"zenghr","commits":1,"url":"https://github.com/zenghr"}]},"readingTime":{"minutes":8.24,"words":2472},"filePathRelative":"Java/basic/05.理解String-intern.md","localizedDate":"2021年4月18日","excerpt":"\\n<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">提示</p>\\n<p>本文主要分析 String 包，以及StringBuffer、StringBuilder的操作，运行环境：<em>jdk 1.8.0_212</em></p>\\n</div>\\n<h2>参考资料</h2>\\n<p><a href=\\"https://tech.meituan.com/2014/03/06/in-depth-understanding-string-intern.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">深入理解String#intern</a></p>","autoDesc":true}');export{e as comp,g as data};
