import{_ as o,D as c,Y as p,Z as r,$ as n,a2 as a,a1 as s,a3 as l,a0 as i}from"./framework-1b75f830.js";const u={},d=n("h1",{id:"部署cni网络",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#部署cni网络","aria-hidden":"true"},"#"),a(" 部署CNI网络")],-1),v=n("h2",{id:"_1-简介",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-简介","aria-hidden":"true"},"#"),a(" 1.简介")],-1),k=n("blockquote",null,[n("p",null,"kubernetes 要求集群内各节点(包括 master 节点)能通过 Pod 网段互联互通")],-1),b=n("code",null,"--network-plugin=cni",-1),m=n("code",null,"--cni-conf-dir",-1),h=n("code",null,"/etc/cni/net.d",-1),g={href:"https://github.com/containernetworking/cni/blob/master/SPEC.md#network-configuration",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"--cni-bin-dir",-1),f=n("code",null,"/opt/cni/bin",-1),y={class:"table-of-contents"},P=n("h2",{id:"_2-下载-cni",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-下载-cni","aria-hidden":"true"},"#"),a(" 2. 下载 CNI")],-1),I=n("p",null,"准备二进制文件",-1),C={href:"https://github.com/containernetworking/plugins/releases",target:"_blank",rel:"noopener noreferrer"},E=i(`<p>解压二进制包并移动到默认工作目录：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /opt/cni/bin
<span class="token function">tar</span> zxvf cni-plugins-linux-amd64-v0.8.6.tgz <span class="token parameter variable">-C</span> /opt/cni/bin
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-flannel-插件" tabindex="-1"><a class="header-anchor" href="#_3-flannel-插件" aria-hidden="true">#</a> 3. flannel 插件</h2><h3 id="_3-1-flannel介绍" tabindex="-1"><a class="header-anchor" href="#_3-1-flannel介绍" aria-hidden="true">#</a> 3.1 Flannel介绍</h3>`,4),q={href:"https://www.cnblogs.com/itzgr/p/12558767.html#_label0",target:"_blank",rel:"noopener noreferrer"},N=i(`<p>Kubernetes的网络模型假定了所有Pod都在一个可以直接连通的扁平网络空间中。若需要实现这个网络假设，需要实现不同节点上的Docker容器之间的互相访问，然后运行Kubernetes。目前已经有多个开源组件支持容器网络模型。如Flannel、Open vSwitch、直接路由和Calico。</p><p>Flannel之所以可以搭建Kubernetes依赖的底层网络，是因为它能实现以下两点。</p><ol><li>它能协助Kubernetes，给每一个Node上的Docker容器都分配互相不冲突的IP地址。</li><li>它能在这些IP地址之间建立一个覆盖网络（Overlay Network），通过这个覆盖网络，将数据包原封不动地传递到目标容器内。</li></ol><p><strong>Flannel 架构图：</strong></p><img src="https://media.zenghr.cn/blog/img/Flannel架构图.png" alt="Flannel架构图" style="zoom:75%;"><p>如上图所示，Flannel首先创建了一个名为 <code>flannel0</code> 的网桥，而且这个网桥的一端连接 <code>docker0</code> 网桥，另一端连接一个叫作flanneld的服务进程。</p><p>flanneld进程上连etcd，利用etcd来管理可分配的IP地址段资源，同时监控etcd中每个Pod的实际地址，并在内存中建立了一个Pod节点路由表；</p><p>​ flanneld进程下连docker0和物理网络，使用内存中的Pod节点路由表，将docker0发给它的数据包包装起来，利用物理网络的连接将数据包投递到目标flanneld上，从而完成Pod到Pod之间的直接地址通信。</p><p>​ Flannel之间的底层通信协议的可选技术包括UDP、VxLan、AWS VPC等多种方式。通过源flanneld封包、目标flanneld解包，最终docker0收到的就是原始的数据，对容器应用来说是透明的，感觉不到中间Flannel的存在。</p><p>​ Flannel每次分配的地址段都在同一个公共区域获取，从而实现不同Node上的Pod分配的IP不产生冲突。而且在Flannel分配好地址段后，其余操作由Docker完成的，Flannel通过修改Docker的启动参数将分配给它的地址段传递进去：</p><p>--bip=172.17.18.1/24</p><p>通过如上方式，Flannel就控制了每个Node上的docker0地址段的地址，从而保障了所有Pod的IP地址在同一个水平网络中且不产生冲突。</p><p>​ Flannel完美地实现了对Kubernetes网络的支持，但是它引入了多个网络组件，在网络通信时需要转到flannel0网络接口，再转到用户态的flanneld程序，到对端后还需要走这个过程的反过程，所以也会引入一些网络的时延损耗。</p><p>另外，Flannel模型默认采用了UDP作为底层传输协议，UDP本身是非可靠协议，虽然两端的TCP实现了可靠传输，但在大流量、高并发的应用场景下还建议多次测试。</p><h3 id="_3-2-部署flannel" tabindex="-1"><a class="header-anchor" href="#_3-2-部署flannel" aria-hidden="true">#</a> 3.2 部署flannel</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># github 上的文件，可能会下载失败，可以本地下载上传至虚拟机</span>
<span class="token function">wget</span> https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
<span class="token comment"># 替换 docker 源</span>
<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token parameter variable">-r</span> <span class="token string">&quot;s#quay.io/coreos/flannel:.*-amd64#registry.cn-shanghai.aliyuncs.com/gcr-k8s/flannel:v0.12.0-amd64#g&quot;</span> kube-flannel.yml
<span class="token comment"># 修改ip配置要与 kube-controller 配置中的 cluster-cidr=172.20.0.0/16 一样</span>
net-conf.json: <span class="token operator">|</span>
<span class="token punctuation">{</span>
	<span class="token string">&quot;Network&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;172.20.0.0/16&quot;</span>,
	<span class="token string">&quot;Backend&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
		<span class="token string">&quot;Type&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;vxlan&quot;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment"># 启动</span>
kubectl apply <span class="token parameter variable">-f</span> kube-flannel.yml
<span class="token comment"># 查看</span>
kubectl get pods <span class="token parameter variable">--namespace</span> kube-system
kubectl get svc <span class="token parameter variable">--namespace</span> kube-system
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,16),O={class:"hint-container tip"},x=n("p",{class:"hint-container-title"},"提示",-1),L={href:"https://github.com/kubernetes/kubernetes/issues/39701",target:"_blank",rel:"noopener noreferrer"},A=i(`<h2 id="_4-calico-插件" tabindex="-1"><a class="header-anchor" href="#_4-calico-插件" aria-hidden="true">#</a> 4. Calico 插件</h2><h3 id="_4-1-calco组件简介" tabindex="-1"><a class="header-anchor" href="#_4-1-calco组件简介" aria-hidden="true">#</a> 4.1 Calco组件简介</h3><p>​ Calico是一个基于BGP的纯三层的网络方案，与OpenStack、Kubernetes、AWS、GCE等云平台都能够良好地集成。Calico在每个计算节点都利用Linux Kernel实现了一个高效的vRouter来负责数据转发。每个vRouter都通过BGP1协议把在本节点上运行的容器的路由信息向整个Calico网络广播，并自动设置到达其他节点的路由转发规则。</p><p>​ Calico保证所有容器之间的数据流量都是通过IP路由的方式完成互联互通的。Calico节点组网时可以直接利用数据中心的网络结构（L2或者L3），不需要额外的NAT、隧道或者Overlay Network，没有额外的封包解包，能够节约CPU运算，提高网络效率。</p><figure><img src="https://media.zenghr.cn/blog/img/20200813/qUxtPP.png" alt="qUxtPP" tabindex="0" loading="lazy"><figcaption>qUxtPP</figcaption></figure><h3 id="_4-2-calico-架构" tabindex="-1"><a class="header-anchor" href="#_4-2-calico-架构" aria-hidden="true">#</a> 4.2 Calico 架构</h3><figure><img src="https://media.zenghr.cn/blog/img/20200813/0IZcpm.png" alt="0IZcpm" tabindex="0" loading="lazy"><figcaption>0IZcpm</figcaption></figure><p>Calico的主要组件：</p><ul><li>Felix：Calico Agent，运行在每个Node上，负责为容器设置网络资源（IP地址、路由规则、iptables规则等），保证跨主机容器网络互通。</li><li>etcd：Calico使用的后端存储。</li><li>BGP Client：负责把Felix在各Node上设置的路由信息通过BGP协议广播到Calico网络。</li><li>Route Reflector：通过一个或者多个BGP Route Reflector来完成大规模集群的分级路由分发。</li><li>CalicoCtl：Calico命令行管理工具。</li></ul><h3 id="_4-3-calico-部署步骤过程" tabindex="-1"><a class="header-anchor" href="#_4-3-calico-部署步骤过程" aria-hidden="true">#</a> 4.3 Calico 部署步骤过程</h3><p>在Kubernetes中部署Calico的主要步骤如下：</p><ol><li>修改Kubernetes服务的启动参数，并重启服务。</li></ol><ul><li><ol><li>设置Master上kube-apiserver服务的启动参数：<code>--allow-privileged=true</code>（因为calico-node需要以特权模式运行在各Node上）。</li><li>设置各Node上kubelet服务的启动参数：<code>--networkplugin=cni</code>（使用CNI网络插件）。</li></ol></li></ul><ol><li>创建Calico服务，主要包括calico-node和calico policy controller。需要创建的资源对象如下：</li></ol><ul><li><ol><li>创建ConfigMap calico-config，包含Calico所需的配置参数。</li><li>创建Secret calico-etcd-secrets，用于使用TLS方式连接etcd。</li><li>在每个Node上都运行calico/node容器，部署为DaemonSet。</li><li>在每个Node上都安装Calico CNI二进制文件和网络配置参数（由install-cni容器完成）。</li><li>部署一个名为calico/kube-policy-controller的Deployment，以对接Kubernetes集群中为Pod设置的Network Policy。</li></ol></li></ul><h3 id="_4-4-部署-calico" tabindex="-1"><a class="header-anchor" href="#_4-4-部署-calico" aria-hidden="true">#</a> 4.4 部署 calico</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 下载 yaml 文件</span>
<span class="token function">wget</span> https://docs.projectcalico.org/v3.14/getting-started/kubernetes/installation/hosted/calico.yaml
<span class="token comment"># 修改 - name: CALICO_IPV4POOL_CIDR value: 172.20.0.0/16</span>
<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token parameter variable">-e</span> <span class="token string">&quot;s?192.168.0.0/16?172.20.0.0/16?g&quot;</span> canal.yaml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-4-1-需要修改如下几处配置" tabindex="-1"><a class="header-anchor" href="#_4-4-1-需要修改如下几处配置" aria-hidden="true">#</a> 4.4.1 需要修改如下几处配置：</h4><p><strong>ConfigMap 配置修改</strong></p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">kind</span><span class="token punctuation">:</span> ConfigMap
<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> calico<span class="token punctuation">-</span>config
  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> kube<span class="token punctuation">-</span>system
<span class="token key atrule">data</span><span class="token punctuation">:</span>
  <span class="token key atrule">etcd_endpoints</span><span class="token punctuation">:</span> <span class="token string">&quot;http://192.168.10.102:2379&quot;</span>
  <span class="token key atrule">etcd_ca</span><span class="token punctuation">:</span> <span class="token string">&quot;/calico-secrets/etcd-ca&quot;</span>   <span class="token comment"># &quot;/calico-secrets/etcd-ca&quot;</span>
  <span class="token key atrule">etcd_cert</span><span class="token punctuation">:</span> <span class="token string">&quot;calico-secrets/etcd-cert&quot;</span> <span class="token comment"># &quot;/calico-secrets/etcd-cert&quot;</span>
  <span class="token key atrule">etcd_key</span><span class="token punctuation">:</span> <span class="token string">&quot;/calico-secrets/etcd-key&quot;</span>  <span class="token comment"># &quot;/calico-secrets/etcd-key&quot;</span>
  <span class="token key atrule">typha_service_name</span><span class="token punctuation">:</span> <span class="token string">&quot;none&quot;</span>
  <span class="token key atrule">calico_backend</span><span class="token punctuation">:</span> <span class="token string">&quot;bird&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对主要参数说明如下：</p><ul><li>etcd_endpoints：Calico使用etcd来保存网络拓扑和状态，该参数指定etcd服务的地址，可手动设置。</li><li>calico_backend：Calico的后端，默认为bird。</li><li>cni_network_config：符合CNI规范的网络配置。其中 <code>type=calico</code> 表示kubelet将从 <code>/opt/cni/bin</code> 目录下搜索名为calico的可执行文件，并调用它来完成容器网络的设置。ipam中的 <code>type=calico-ipam</code> 表示kubelet将在 <code>/opt/cni/bin</code> 目录下搜索名为calico-ipam的可执行文件，用于完成容器IP地址的分配。</li></ul><p><strong>修改 Pods 使用的 <code>IP 网段</code> , 配置文件默认使用 <code>192.168.0.0/16</code> 网段</strong></p><p><strong>Secret 配置修改</strong></p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> Secret
<span class="token key atrule">type</span><span class="token punctuation">:</span> Opaque
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> calico<span class="token punctuation">-</span>etcd<span class="token punctuation">-</span>secrets
  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> kube<span class="token punctuation">-</span>system
<span class="token key atrule">data</span><span class="token punctuation">:</span>
  <span class="token comment"># Example command for encoding a file contents: cat &lt;file&gt; | base64 -w 0</span>
  <span class="token comment"># 如果配置了TLS ，则需要设置相应的证书和密钥文件路径</span>
  <span class="token key atrule">etcd-key</span><span class="token punctuation">:</span> (cat /etc/kubernetes/ca/server/server<span class="token punctuation">-</span>key.pem <span class="token punctuation">|</span> base64 <span class="token punctuation">-</span>w 0) <span class="token comment"># 将输出结果填写在这</span>
  <span class="token key atrule">etcd-cert</span><span class="token punctuation">:</span> (cat /etc/kubernetes/ca/server/server.pem <span class="token punctuation">|</span> base64 <span class="token punctuation">-</span>w 0) <span class="token comment"># 将输出结果填写在这</span>
  <span class="token key atrule">etcd-ca</span><span class="token punctuation">:</span> (cat /etc/kubernetes/ca/ca.pem <span class="token punctuation">|</span> base64 <span class="token punctuation">-</span>w 0) <span class="token comment"># 将输出结果填写在这</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>DaemonSet 配置修改</strong> 添加网卡发现规则</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">containers</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> calico<span class="token punctuation">-</span>node
    <span class="token key atrule">image</span><span class="token punctuation">:</span> calico/node<span class="token punctuation">:</span>v3.14.2
    <span class="token key atrule">env</span><span class="token punctuation">:</span>
      <span class="token comment"># .../</span>
      <span class="token comment"># Auto-detect the BGP IP address.</span>
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> IP
        <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token string">&quot;autodetect&quot;</span>
      <span class="token comment"># Calico 模式设置</span>
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> CALICO_IPV4POOL_IPIP
        <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token string">&quot;Always&quot;</span>
      <span class="token comment"># 定义ipv4自动发现网卡规则 </span>
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> IP_AUTODETECTION_METHOD
        <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token string">&quot;interface=enp.*&quot;</span>
      <span class="token comment"># no effect. This should fall within \`--cluster-cidr\`.</span>
      <span class="token comment"># 需要修改此处，打开注释替换 pod ip</span>
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> CALICO_IPV4POOL_CIDR
        <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token string">&quot;172.20.0.0/16&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在该Pod中包括如下两个容器：</p><ul><li>install-cni：在Node上安装CNI二进制文件到 <code>/opt/cni/bin</code> 目录下，并安装相应的网络配置文件到 <code>/etc/cni/net.d</code> 目录下，设置为initContainers并在运行完成后退出。</li><li>calico-node：Calico服务程序，用于设置Pod的网络资源，保证Pod的网络与各Node互联互通。它还需要以hostNetwork模式运行，直接使用宿主机网络。</li></ul><p>calico-node服务的主要参数如下。</p><ul><li>CALICO_IPV4POOL_CIDR：Calico IPAM的IP地址池，Pod的IP地址将从该池中进行分配。</li><li>CALICO_IPV4POOL_IPIP：是否启用IPIP模式。启用IPIP模式时，Calico将在Node上创建一个名为tunl0的虚拟隧道。</li><li><code>IP_AUTODETECTION_METHOD</code>：获取Node IP地址的方式，默认使用第1个网络接口的IP地址，对于安装了多块网卡的Node，可以使用正则表达式选择正确的网卡，例如&quot;interface=eth.*&quot;表示选择名称以<code>eth</code>开头的网卡的IP地址。</li><li>FELIX_IPV6SUPPORT：是否启用IPv6。</li><li>FELIX_LOGSEVERITYSCREEN：日志级别。</li><li>securityContext.privileged=true：以特权模式运行。</li></ul><p>另外，如果启用RBAC权限控制，则可以设置ServiceAccount。</p><p>IP Pool可以使用两种模式：BGP或IPIP。使用IPIP模式时，设置 <code>CALICO_IPV4POOL_IPIP=&quot;always&quot;</code> ，不使用IPIP模式时，设置<code>CALICO_IPV4POOL_IPIP=&quot;off&quot;</code> ，此时将使用BGP模式。</p><p><strong>calico-kube-controllers解析配置</strong></p><p>calico-kube-controllers容器，用于对接Kubernetes集群中为Pod设置的Network Policy</p><p>如果启用RBAC权限控制，则可以设置ServiceAccount。用户在Kubernetes集群中设置了Pod的Network Policy之后，calicokube-controllers就会自动通知各Node上的calico-node服务，在宿主机上设置相应的iptables规则，完成Pod间网络访问策略的设置。</p><h4 id="_4-4-2-修改完-yaml-文件-执行部署" tabindex="-1"><a class="header-anchor" href="#_4-4-2-修改完-yaml-文件-执行部署" aria-hidden="true">#</a> 4.4.2 修改完 yaml 文件，执行部署</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 部署</span>
kubectl apply <span class="token parameter variable">-f</span> calico.yaml
<span class="token comment"># 查看 calico pods</span>
kubectl  get pods <span class="token parameter variable">-n</span> kube-system
<span class="token comment"># 查看 node 是否正常，现在 node 服务正常了</span>
kubectl get <span class="token function">node</span>

NAME       			 STATUS   ROLES    AGE    VERSION
<span class="token number">192.168</span>.10.101   Ready    <span class="token operator">&lt;</span>none<span class="token operator">&gt;</span>   4d4h   v1.18.6
<span class="token number">192.168</span>.10.102   Ready    <span class="token operator">&lt;</span>none<span class="token operator">&gt;</span>   4d4h   v1.18.6

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-通过系统服务-docker方式部署" tabindex="-1"><a class="header-anchor" href="#_5-通过系统服务-docker方式部署" aria-hidden="true">#</a> 5. 通过系统服务+Docker方式部署</h2><h3 id="_5-1-配置-service-文件" tabindex="-1"><a class="header-anchor" href="#_5-1-配置-service-文件" aria-hidden="true">#</a> 5.1 配置 service 文件</h3><p><strong>vim /lib/systemd/system/kube-calico.service</strong></p><blockquote><p>注意修改 IP 以及证书位置</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>Unit<span class="token punctuation">]</span>
<span class="token assign-left variable">Description</span><span class="token operator">=</span>calico <span class="token function">node</span>
<span class="token assign-left variable">After</span><span class="token operator">=</span>docker.service
<span class="token assign-left variable">Requires</span><span class="token operator">=</span>docker.service
<span class="token punctuation">[</span>Service<span class="token punctuation">]</span>
<span class="token assign-left variable">User</span><span class="token operator">=</span>root
<span class="token assign-left variable">PermissionsStartOnly</span><span class="token operator">=</span>true
<span class="token assign-left variable">ExecStart</span><span class="token operator">=</span>/usr/bin/docker run <span class="token parameter variable">--net</span><span class="token operator">=</span>host <span class="token parameter variable">--privileged</span> <span class="token parameter variable">--name</span><span class="token operator">=</span>calico-node <span class="token punctuation">\\</span>
  <span class="token parameter variable">-e</span> <span class="token assign-left variable">ETCD_ENDPOINTS</span><span class="token operator">=</span>https://192.168.10.102:2379 <span class="token punctuation">\\</span>
  <span class="token parameter variable">-e</span> <span class="token assign-left variable">ETCD_CA_CERT_FILE</span><span class="token operator">=</span>/etc/kubernetes/ca/ca.pem <span class="token punctuation">\\</span>
  <span class="token parameter variable">-e</span> <span class="token assign-left variable">ETCD_CERT_FILE</span><span class="token operator">=</span>/etc/kubernetes/ca/calico/calico.pem <span class="token punctuation">\\</span>
  <span class="token parameter variable">-e</span> <span class="token assign-left variable">ETCD_KEY_FILE</span><span class="token operator">=</span>/etc/kubernetes/ca/calico/calico-key.pem <span class="token punctuation">\\</span>
  <span class="token parameter variable">-e</span> <span class="token assign-left variable">CALICO_LIBNETWORK_ENABLED</span><span class="token operator">=</span>true <span class="token punctuation">\\</span>
  <span class="token parameter variable">-e</span> <span class="token assign-left variable">CALICO_NETWORKING_BACKEND</span><span class="token operator">=</span>bird <span class="token punctuation">\\</span>
  <span class="token parameter variable">-e</span> <span class="token assign-left variable">CALICO_DISABLE_FILE_LOGGING</span><span class="token operator">=</span>true <span class="token punctuation">\\</span>
  <span class="token parameter variable">-e</span> <span class="token assign-left variable">CALICO_IPV4POOL_CIDR</span><span class="token operator">=</span><span class="token number">172.20</span>.0.0/16 <span class="token punctuation">\\</span>
  <span class="token parameter variable">-e</span> <span class="token assign-left variable">CALICO_IPV4POOL_IPIP</span><span class="token operator">=</span>off <span class="token punctuation">\\</span>
  <span class="token parameter variable">-e</span> <span class="token assign-left variable">FELIX_DEFAULTENDPOINTTOHOSTACTION</span><span class="token operator">=</span>ACCEPT <span class="token punctuation">\\</span>
  <span class="token parameter variable">-e</span> <span class="token assign-left variable">FELIX_IPV6SUPPORT</span><span class="token operator">=</span>false <span class="token punctuation">\\</span>
  <span class="token parameter variable">-e</span> <span class="token assign-left variable">FELIX_LOGSEVERITYSCREEN</span><span class="token operator">=</span>info <span class="token punctuation">\\</span>
  <span class="token parameter variable">-e</span> <span class="token assign-left variable">FELIX_IPINIPMTU</span><span class="token operator">=</span><span class="token number">1440</span> <span class="token punctuation">\\</span>
  <span class="token parameter variable">-e</span> <span class="token assign-left variable">FELIX_HEALTHENABLED</span><span class="token operator">=</span>true <span class="token punctuation">\\</span>
  <span class="token parameter variable">-e</span> <span class="token assign-left variable">IP</span><span class="token operator">=</span><span class="token number">192.168</span>.10.101 <span class="token punctuation">\\</span>
  <span class="token parameter variable">-v</span> /etc/kubernetes/ca:/etc/kubernetes/ca <span class="token punctuation">\\</span>
  <span class="token parameter variable">-v</span> /var/run/calico:/var/run/calico <span class="token punctuation">\\</span>
  <span class="token parameter variable">-v</span> /lib/modules:/lib/modules <span class="token punctuation">\\</span>
  <span class="token parameter variable">-v</span> /run/docker/plugins:/run/docker/plugins <span class="token punctuation">\\</span>
  <span class="token parameter variable">-v</span> /var/run/docker.sock:/var/run/docker.sock <span class="token punctuation">\\</span>
  <span class="token parameter variable">-v</span> /var/log/calico:/var/log/calico <span class="token punctuation">\\</span>
  calico/node:v3.14.2
<span class="token assign-left variable">ExecStop</span><span class="token operator">=</span>/usr/bin/docker <span class="token function">rm</span> <span class="token parameter variable">-f</span> calico-node
<span class="token assign-left variable">Restart</span><span class="token operator">=</span>always
<span class="token assign-left variable">RestartSec</span><span class="token operator">=</span><span class="token number">10</span>
<span class="token punctuation">[</span>Install<span class="token punctuation">]</span>
<span class="token assign-left variable">WantedBy</span><span class="token operator">=</span>multi-user.target
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-2-启动-kube-calico-服务" tabindex="-1"><a class="header-anchor" href="#_5-2-启动-kube-calico-服务" aria-hidden="true">#</a> 5.2 启动 kube-calico 服务</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>systemctl daemon-reload <span class="token comment"># 修改配置重启的时候用</span>
systemctl <span class="token builtin class-name">enable</span> kube-calico.service
<span class="token function">service</span> kube-calico start
<span class="token comment"># 查看日志</span>
journalctl <span class="token parameter variable">-f</span> <span class="token parameter variable">-u</span> kube-calico
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-3-calico-客户端工具-calicoctl" tabindex="-1"><a class="header-anchor" href="#_5-3-calico-客户端工具-calicoctl" aria-hidden="true">#</a> 5.3 calico 客户端工具 calicoctl</h3>`,46),T={href:"https://github.com/projectcalico/calicoctl/releases",target:"_blank",rel:"noopener noreferrer"},S=i(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">chmod</span> <span class="token number">755</span> calicoctl
<span class="token function">mv</span> calicoctl /usr/local/bin/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-4-查看节点运行情况" tabindex="-1"><a class="header-anchor" href="#_5-4-查看节点运行情况" aria-hidden="true">#</a> 5.4 查看节点运行情况</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>calicoctl <span class="token function">node</span> status
Calico process is running.
IPv4 BGP status
+---------------+-------------------+-------+----------+-------------+
<span class="token operator">|</span> PEER ADDRESS  <span class="token operator">|</span>     PEER TYPE     <span class="token operator">|</span> STATE <span class="token operator">|</span>  SINCE   <span class="token operator">|</span>    INFO     <span class="token operator">|</span>
+---------------+-------------------+-------+----------+-------------+
<span class="token operator">|</span> <span class="token number">192.168</span>.10.101 <span class="token operator">|</span> node-to-node mesh <span class="token operator">|</span> up    <span class="token operator">|</span> <span class="token number">13</span>:13:13 <span class="token operator">|</span> Established <span class="token operator">|</span>
+---------------+-------------------+-------+----------+-------------+
IPv6 BGP status
No IPv6 peers found.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>查看端口BGP 协议是通过TCP 连接来建立邻居的，因此可以用netstat 命令验证 BGP Peer</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">netstat</span> -natp<span class="token operator">|</span><span class="token function">grep</span> ESTABLISHED<span class="token operator">|</span><span class="token function">grep</span> <span class="token number">179</span>
tcp        <span class="token number">0</span>      <span class="token number">0</span> <span class="token number">192.168</span>.10.102:60959     <span class="token number">192.168</span>.10.103:179       ESTABLISHED <span class="token number">29680</span>/bird
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-5-配置-ip-pool" tabindex="-1"><a class="header-anchor" href="#_5-5-配置-ip-pool" aria-hidden="true">#</a> 5.5 配置 IP Pool</h3>`,6),D={class:"hint-container tip"},w=n("p",{class:"hint-container-title"},"提示",-1),F={href:"https://docs.projectcalico.org/getting-started/clis/calicoctl/configure/overview",target:"_blank",rel:"noopener noreferrer"},R=i(`<p>默认情况下，<code>calicoctl</code>将在上查找配置文件<code>/etc/calico/calicoctl.cfg</code>。您可以将该<code>--config</code>选项与需要数据存储访问的命令一起使用，以覆盖此选项。该文件可以是YAML或JSON格式。它必须有效并且可由读取<code>calicoctl</code>。以下是一个YAML示例：</p><p><strong>vim /etc/calico/calicoctl.cfg</strong></p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> projectcalico.org/v3
<span class="token key atrule">kind</span><span class="token punctuation">:</span> CalicoAPIConfig
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">etcdEndpoints</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//192.168.10.102<span class="token punctuation">:</span><span class="token number">2379</span>
  <span class="token key atrule">etcdKeyFile</span><span class="token punctuation">:</span> /etc/kubernetes/ca/calico/calico<span class="token punctuation">-</span>key.pem
  <span class="token key atrule">etcdCertFile</span><span class="token punctuation">:</span> /etc/kubernetes/ca/calico/calico.pem
  <span class="token key atrule">etcdCACertFile</span><span class="token punctuation">:</span> /etc/kubernetes/ca/ca.pem
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>查看集群ippool情况</strong></p><p><strong>calicoctl get ipPool -o yaml</strong></p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment"># 输出内容如下</span>
<span class="token punctuation">-</span> <span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> projectcalico.org/v3
  <span class="token key atrule">kind</span><span class="token punctuation">:</span> IPPool
  <span class="token key atrule">metadata</span><span class="token punctuation">:</span>
    <span class="token key atrule">creationTimestamp</span><span class="token punctuation">:</span> <span class="token string">&quot;2020-08-14T10:38:44Z&quot;</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> default<span class="token punctuation">-</span>ipv4<span class="token punctuation">-</span>ippool
    <span class="token key atrule">resourceVersion</span><span class="token punctuation">:</span> <span class="token string">&quot;13109&quot;</span>
    <span class="token key atrule">uid</span><span class="token punctuation">:</span> 3e3b1506<span class="token punctuation">-</span>e9a8<span class="token punctuation">-</span>4d02<span class="token punctuation">-</span>96f7<span class="token punctuation">-</span>2ceb63ade2ea
  <span class="token key atrule">spec</span><span class="token punctuation">:</span>
    <span class="token key atrule">blockSize</span><span class="token punctuation">:</span> <span class="token number">26</span>
    <span class="token key atrule">cidr</span><span class="token punctuation">:</span> 172.20.0.0/16
    <span class="token key atrule">ipipMode</span><span class="token punctuation">:</span> Never
    <span class="token key atrule">natOutgoing</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">nodeSelector</span><span class="token punctuation">:</span> all()
    <span class="token key atrule">vxlanMode</span><span class="token punctuation">:</span> Never
<span class="token key atrule">kind</span><span class="token punctuation">:</span> IPPoolList
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">resourceVersion</span><span class="token punctuation">:</span> <span class="token string">&quot;57796&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-授权apiserver访问kubelet" tabindex="-1"><a class="header-anchor" href="#_6-授权apiserver访问kubelet" aria-hidden="true">#</a> 6. 授权Apiserver访问kubelet</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">cat</span> <span class="token operator">&gt;</span> /etc/kubernetes/server/cfg/apiserver-to-kubelet-rbac.yaml <span class="token operator">&lt;&lt;</span> <span class="token string">EOF
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: &quot;true&quot;
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  name: system:kube-apiserver-to-kubelet
rules:
  - apiGroups:
      - &quot;&quot;
    resources:
      - nodes/proxy
      - nodes/stats
      - nodes/log
      - nodes/spec
      - nodes/metrics
      - pods/log
    verbs:
      - &quot;*&quot;
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: system:kube-apiserver
  namespace: &quot;&quot;
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:kube-apiserver-to-kubelet
subjects:
  - apiGroup: rbac.authorization.k8s.io
    kind: User
    name: kubernetes
EOF</span>

<span class="token comment">#  启动</span>
kubectl apply <span class="token parameter variable">-f</span> apiserver-to-kubelet-rbac.yaml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8);function V(B,G){const t=c("ExternalLinkIcon"),e=c("router-link");return p(),r("div",null,[d,v,k,n("p",null,[a("通过给 Kubelet 传递 "),b,a(" 命令行选项来选择 CNI 插件。 Kubelet 从 "),m,a(" （默认是 "),h,a("） 读取文件并使用该文件中的 CNI 配置来设置每个 pod 的网络。 CNI 配置文件必须与 "),n("a",g,[a("CNI 规约"),s(t)]),a("匹配，并且配置引用的任何所需的 CNI 插件都必须存在于 "),_,a("（默认是 "),f,a("）")]),n("nav",y,[n("ul",null,[n("li",null,[s(e,{to:"#_1-简介"},{default:l(()=>[a("1.简介")]),_:1})]),n("li",null,[s(e,{to:"#_2-下载-cni"},{default:l(()=>[a("2. 下载 CNI")]),_:1})]),n("li",null,[s(e,{to:"#_3-flannel-插件"},{default:l(()=>[a("3. flannel 插件")]),_:1}),n("ul",null,[n("li",null,[s(e,{to:"#_3-1-flannel介绍"},{default:l(()=>[a("3.1 Flannel介绍")]),_:1})]),n("li",null,[s(e,{to:"#_3-2-部署flannel"},{default:l(()=>[a("3.2 部署flannel")]),_:1})])])]),n("li",null,[s(e,{to:"#_4-calico-插件"},{default:l(()=>[a("4. Calico 插件")]),_:1}),n("ul",null,[n("li",null,[s(e,{to:"#_4-1-calco组件简介"},{default:l(()=>[a("4.1 Calco组件简介")]),_:1})]),n("li",null,[s(e,{to:"#_4-2-calico-架构"},{default:l(()=>[a("4.2 Calico 架构")]),_:1})]),n("li",null,[s(e,{to:"#_4-3-calico-部署步骤过程"},{default:l(()=>[a("4.3 Calico 部署步骤过程")]),_:1})]),n("li",null,[s(e,{to:"#_4-4-部署-calico"},{default:l(()=>[a("4.4 部署 calico")]),_:1})])])]),n("li",null,[s(e,{to:"#_5-通过系统服务-docker方式部署"},{default:l(()=>[a("5. 通过系统服务+Docker方式部署")]),_:1}),n("ul",null,[n("li",null,[s(e,{to:"#_5-1-配置-service-文件"},{default:l(()=>[a("5.1 配置 service 文件")]),_:1})]),n("li",null,[s(e,{to:"#_5-2-启动-kube-calico-服务"},{default:l(()=>[a("5.2 启动 kube-calico 服务")]),_:1})]),n("li",null,[s(e,{to:"#_5-3-calico-客户端工具-calicoctl"},{default:l(()=>[a("5.3 calico 客户端工具 calicoctl")]),_:1})]),n("li",null,[s(e,{to:"#_5-4-查看节点运行情况"},{default:l(()=>[a("5.4 查看节点运行情况")]),_:1})]),n("li",null,[s(e,{to:"#_5-5-配置-ip-pool"},{default:l(()=>[a("5.5 配置 IP Pool")]),_:1})])])]),n("li",null,[s(e,{to:"#_6-授权apiserver访问kubelet"},{default:l(()=>[a("6. 授权Apiserver访问kubelet")]),_:1})])])]),P,I,n("p",null,[a("下载地址："),n("a",C,[a("https://github.com/containernetworking/plugins/releases"),s(t)])]),E,n("blockquote",null,[n("p",null,[a("以下内容转载自："),n("a",q,[a("https://www.cnblogs.com/itzgr/p/12558767.html#_label0"),s(t)])])]),N,n("div",O,[x,n("p",null,[a("注：如果Node有多个网卡的话，参考 "),n("a",L,[a("flannel issues39701"),s(t)]),a("， 目前需要在kube-flannel.yml中使用--iface参数指定集群主机内网网卡的名称， 否则可能会出现dns无法解析。容器无法通信的情况，需要将kube-flannel.yml下载到本地， flanneld启动参数加上--iface=iface-name")])]),A,n("p",null,[n("strong",null,[a("下载 calicoctl 二进制文件, 下载地址："),n("a",T,[a("https://github.com/projectcalico/calicoctl/releases"),s(t)])])]),S,n("div",D,[w,n("p",null,[a("注：请看官方配置文件："),n("a",F,[a("https://docs.projectcalico.org/getting-started/clis/calicoctl/configure/overview"),s(t)])])]),R])}const U=o(u,[["render",V],["__file","06.部署CNI网络.html.vue"]]);export{U as default};
