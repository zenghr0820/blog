import{_ as t,r as o,o as c,c as l,d as n,e as s,b as e,a as p}from"./app-d6e30719.js";const i={},u={href:"https://juejin.im/post/5ca4239ef265da30807fea48",target:"_blank",rel:"noopener noreferrer"},r={href:"https://studygolang.com/articles/15786",target:"_blank",rel:"noopener noreferrer"},d=p(`<div class="hint-container tip"><p class="hint-container-title">提示</p><p><code>slice</code> 使用时可以不用指定数组长度，超出长度也可以继续添加元素</p></div><h2 id="引起注意" tabindex="-1"><a class="header-anchor" href="#引起注意" aria-hidden="true">#</a> 引起注意</h2><p>之前使用<code>slice</code>时一直以为当cap小于1024时每次都是翻倍，大于1024时就是添加 0.25(1.25倍)</p><p>直到遇到下面的场景引起我的注意：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    a <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span>
    a <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;a.cap = &quot;</span><span class="token punctuation">,</span><span class="token function">cap</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span>
    b <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;b.cap = &quot;</span><span class="token punctuation">,</span><span class="token function">cap</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="分析源码" tabindex="-1"><a class="header-anchor" href="#分析源码" aria-hidden="true">#</a> 分析源码</h2><p>以我之前的翻倍的理解，cap应该都是8才对，但结果让我意外：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>a.cap = 16
b.cap =  10
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,8),k={href:"https://github.com/golang/go/blob/master/src/runtime/slice.go",target:"_blank",rel:"noopener noreferrer"},m=p(`<p>发现涉及扩容的方法是<code>growslice</code>，下面贴出一部分代码</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>newcap <span class="token operator">:=</span> old<span class="token punctuation">.</span><span class="token builtin">cap</span>
doublecap <span class="token operator">:=</span> newcap <span class="token operator">+</span> newcap
<span class="token keyword">if</span> <span class="token builtin">cap</span> <span class="token operator">&gt;</span> doublecap <span class="token punctuation">{</span>
    newcap <span class="token operator">=</span> <span class="token builtin">cap</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> old<span class="token punctuation">.</span><span class="token builtin">len</span> <span class="token operator">&lt;</span> <span class="token number">1024</span> <span class="token punctuation">{</span>
        newcap <span class="token operator">=</span> doublecap
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// Check 0 &lt; newcap to detect overflow</span>
        <span class="token comment">// and prevent an infinite loop.</span>
        <span class="token keyword">for</span> <span class="token number">0</span> <span class="token operator">&lt;</span> newcap <span class="token operator">&amp;&amp;</span> newcap <span class="token operator">&lt;</span> <span class="token builtin">cap</span> <span class="token punctuation">{</span>
            newcap <span class="token operator">+=</span> newcap <span class="token operator">/</span> <span class="token number">4</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// Set newcap to the requested cap when</span>
        <span class="token comment">// the newcap calculation overflowed.</span>
        <span class="token keyword">if</span> newcap <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
            newcap <span class="token operator">=</span> <span class="token builtin">cap</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看了源码才发现上面的代码append多个元素没走翻倍扩容流程，而是直接复制最新的长度作为cap长度：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>newcap <span class="token operator">=</span> <span class="token number">4</span>
doublecap <span class="token operator">=</span> <span class="token number">8</span>
cap <span class="token operator">=</span> <span class="token number">10</span>

cap <span class="token operator">&gt;</span> doublecap
newcap <span class="token operator">=</span> <span class="token number">10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以<code>b.cap = 10</code>也就说得通了，但是<code>a.cap = 16</code>这个就不对了，往下看源码：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// Specialize for common values of et.size.</span>
<span class="token comment">// For 1 we don&#39;t need any division/multiplication.</span>
<span class="token comment">// For sys.PtrSize, compiler will optimize division/multiplication into a shift by a constant.</span>
<span class="token comment">// For powers of 2, use a variable shift.</span>
<span class="token keyword">switch</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> et<span class="token punctuation">.</span>size <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
		lenmem <span class="token operator">=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>old<span class="token punctuation">.</span><span class="token builtin">len</span><span class="token punctuation">)</span>
		newlenmem <span class="token operator">=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span><span class="token builtin">cap</span><span class="token punctuation">)</span>
		capmem <span class="token operator">=</span> <span class="token function">roundupsize</span><span class="token punctuation">(</span><span class="token function">uintptr</span><span class="token punctuation">(</span>newcap<span class="token punctuation">)</span><span class="token punctuation">)</span>
		overflow <span class="token operator">=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>newcap<span class="token punctuation">)</span> <span class="token operator">&gt;</span> maxAlloc
		newcap <span class="token operator">=</span> <span class="token function">int</span><span class="token punctuation">(</span>capmem<span class="token punctuation">)</span>
	<span class="token keyword">case</span> et<span class="token punctuation">.</span>size <span class="token operator">==</span> sys<span class="token punctuation">.</span>PtrSize<span class="token punctuation">:</span>
		lenmem <span class="token operator">=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>old<span class="token punctuation">.</span><span class="token builtin">len</span><span class="token punctuation">)</span> <span class="token operator">*</span> sys<span class="token punctuation">.</span>PtrSize
		newlenmem <span class="token operator">=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span><span class="token builtin">cap</span><span class="token punctuation">)</span> <span class="token operator">*</span> sys<span class="token punctuation">.</span>PtrSize
		capmem <span class="token operator">=</span> <span class="token function">roundupsize</span><span class="token punctuation">(</span><span class="token function">uintptr</span><span class="token punctuation">(</span>newcap<span class="token punctuation">)</span> <span class="token operator">*</span> sys<span class="token punctuation">.</span>PtrSize<span class="token punctuation">)</span>
		overflow <span class="token operator">=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>newcap<span class="token punctuation">)</span> <span class="token operator">&gt;</span> maxAlloc<span class="token operator">/</span>sys<span class="token punctuation">.</span>PtrSize
		newcap <span class="token operator">=</span> <span class="token function">int</span><span class="token punctuation">(</span>capmem <span class="token operator">/</span> sys<span class="token punctuation">.</span>PtrSize<span class="token punctuation">)</span>
	<span class="token keyword">case</span> <span class="token function">isPowerOfTwo</span><span class="token punctuation">(</span>et<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">:</span>
		<span class="token comment">// ... 省略</span>
	<span class="token keyword">default</span><span class="token punctuation">:</span>
		<span class="token comment">// ... 省略</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查资料得知这里的<code>et.size</code>是指元素在计算机的字节大小，我用的是window 64位，所以int也就是int 64，大小位8字节，发现进行内存分配的是<code>capmem</code>:</p><p>a因为是byte类型，所以字节大小为 1，满足 <strong><code>et.size == 1</code></strong> =&gt; <strong><code>capmem = roundupsize(uintptr(newcap))</code></strong> =&gt; <strong><code>capmem = 10 ? 16</code></strong></p>`,8),b=n("code",null,"roundupsize",-1),v={href:"https://studygolang.com/articles/15786",target:"_blank",rel:"noopener noreferrer"},g=p(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># https://github.com/golang/go/blob/master/src/runtime/sizeclasses.go</span>
// class  bytes/obj  bytes/span  objects  <span class="token function">tail</span> waste  max waste
//     <span class="token number">1</span>          <span class="token number">8</span>        <span class="token number">8192</span>     <span class="token number">1024</span>           <span class="token number">0</span>     <span class="token number">87.50</span>%
//     <span class="token number">2</span>         <span class="token number">16</span>        <span class="token number">8192</span>      <span class="token number">512</span>           <span class="token number">0</span>     <span class="token number">43.75</span>%
//     <span class="token number">3</span>         <span class="token number">32</span>        <span class="token number">8192</span>      <span class="token number">256</span>           <span class="token number">0</span>     <span class="token number">46.88</span>%
//     <span class="token number">4</span>         <span class="token number">48</span>        <span class="token number">8192</span>      <span class="token number">170</span>          <span class="token number">32</span>     <span class="token number">31.52</span>%
//     <span class="token number">5</span>         <span class="token number">64</span>        <span class="token number">8192</span>      <span class="token number">128</span>           <span class="token number">0</span>     <span class="token number">23.44</span>%
//     <span class="token number">6</span>         <span class="token number">80</span>        <span class="token number">8192</span>      <span class="token number">102</span>          <span class="token number">32</span>     <span class="token number">19.07</span>%
//     <span class="token number">7</span>         <span class="token number">96</span>        <span class="token number">8192</span>       <span class="token number">85</span>          <span class="token number">32</span>     <span class="token number">15.95</span>%
//     <span class="token number">8</span>        <span class="token number">112</span>        <span class="token number">8192</span>       <span class="token number">73</span>          <span class="token number">16</span>     <span class="token number">13.56</span>%
//     <span class="token number">9</span>        <span class="token number">128</span>        <span class="token number">8192</span>       <span class="token number">64</span>           <span class="token number">0</span>     <span class="token number">11.72</span>%
//    <span class="token number">10</span>        <span class="token number">144</span>        <span class="token number">8192</span>       <span class="token number">56</span>         <span class="token number">128</span>     <span class="token number">11.82</span>%

//    <span class="token punctuation">..</span>.
//    <span class="token number">65</span>      <span class="token number">28672</span>       <span class="token number">57344</span>        <span class="token number">2</span>           <span class="token number">0</span>      <span class="token number">4.91</span>%
//    <span class="token number">66</span>      <span class="token number">32768</span>       <span class="token number">32768</span>        <span class="token number">1</span>           <span class="token number">0</span>     <span class="token number">12.50</span>%
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看<code>bytes/obj</code> 没有大小为10 的类型，所以向上取整得到的是：16。<strong><code>roundupsize</code></strong></p><p>b因为是int 64类型，所以字节大小为 8，满足 <strong><code>et.size == 8</code></strong> =&gt; <strong><code>capmem = roundupsize(uintptr(newcap) * sys.PtrSize)</code></strong> =&gt; <strong><code>capmem = 10 * 8 = 80</code></strong> =&gt; <strong><code>newcap = 80 / 8 = 10</code></strong></p><h2 id="结论" tabindex="-1"><a class="header-anchor" href="#结论" aria-hidden="true">#</a> 结论</h2><p>slice 扩容真相</p><ul><li>append单个元素，或者append多个元素，小于<code>doublecap</code>双倍容量，这样就会走以下扩容流程，不足1024，双倍扩容，超过1024的，1.25倍扩容。</li><li>若是append多个元素，且double后的容量不能容纳，直接使用预估的容量。</li></ul><p><strong>！！得到新容量后，都需要根据slice类型，算出新的容量所需的内存情况<code>capmem</code>，然后再进行<code>capmem</code>向上取整，得到新的所需内存，除上类型size，得到真正的最终容量,作为新的slice的容量。</strong></p>`,7),h={href:"https://juejin.im/post/5ca4239ef265da30807fea48",target:"_blank",rel:"noopener noreferrer"},f=n("p",{align:"right",style:{color:"gray"}},"END 二零二零年二月二十八日",-1);function w(_,y){const a=o("ExternalLinkIcon");return c(),l("div",null,[n("blockquote",null,[n("p",null,[s("转载自： "),n("a",u,[s("Go slice扩容深度分析"),e(a)])]),n("p",null,[s("参考资料："),n("a",r,[s("Go内存管理"),e(a)])])]),d,n("p",null,[s("这结果让我一头雾水，于是出于好奇去看了关于slice扩容的源代码"),n("a",k,[s("https://github.com/golang/go/blob/master/src/runtime/slice.go"),e(a)])]),m,n("p",null,[b,s(" 为什么会将 10 变为 16 呢，查了资料发现是go内存管理的原因："),n("a",v,[s("Go内存管理"),e(a)])]),g,n("blockquote",null,[n("p",null,[n("strong",null,[s("最后感谢"),n("a",h,[s("Go slice扩容深度分析"),e(a)]),s(" 的博客")])])]),f])}const x=t(i,[["render",w],["__file","01.记录Go中Slice扩容源码分析.html.vue"]]);export{x as default};
