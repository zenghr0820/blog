import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,a as h,b as s,i as a,d as e,w as k,r as p,o as r}from"./app-Dke27yvG.js";const B={};function d(g,i){const n=p("RouteLink");return r(),l("div",null,[i[2]||(i[2]=h(`<h1 id="装饰-decorator" tabindex="-1"><a class="header-anchor" href="#装饰-decorator"><span>装饰(Decorator)</span></a></h1><div class="hint-container tip"><p class="hint-container-title">提示</p><p>指在不改变现有对象结构的情况下，动态地给该对象增加一些职责（即增加其额外功能）的模式</p></div><h2 id="装饰器模式介绍" tabindex="-1"><a class="header-anchor" href="#装饰器模式介绍"><span>装饰器模式介绍</span></a></h2><p>装饰器器的核心就是在 <strong>不改变原有类</strong> 的基础上给类新增功能</p><p>通常情况下，扩展一个类的功能会使用继承方式来实现。但继承具有静态特征，耦合度高，并且随着扩展功能的增多，子类会过多等问题。但是使用装饰器模式会是另外一种思路更为灵活，可以避免继承导致的子类过多</p><h2 id="装饰器的结构" tabindex="-1"><a class="header-anchor" href="#装饰器的结构"><span>装饰器的结构</span></a></h2><p>装饰器器主要解决的是直接继承下因功能的不断横向扩展导致子类膨胀的问题，而使用装饰器模式后就会比直接继承显得更加灵活同时这样也就不再需要考虑子类的维护。</p><p>这种设计模式创建了一个装饰类，用来包装原有的类，并在保持类方法签名完整性的前提下，提供了额外的功能</p><p>装饰器模式主要包含以下角色：</p><ol><li>抽象构件（Component）角色：定义一个 抽象接口 以规范准备接收附加责任的对象。</li><li>具体构件（ConcreteComponent）角色：实现抽象构件，通过装饰角色为其添加一些职责。</li><li>抽象装饰（Decorator）角色：继承抽象构件，并包含具体构件的实例，可以通过其子类扩展具体构件的功能。</li><li>具体装饰（ConcreteDecorator）角色：实现抽象装饰的相关方法，并给具体构件对象添加附加的责任。</li></ol><p><img src="https://media.zenghr.cn/blog/img/20210507/44cmIa2m9SQd.png?imageslim" alt="mark"></p><h2 id="装饰器的案例模拟" tabindex="-1"><a class="header-anchor" href="#装饰器的案例模拟"><span>装饰器的案例模拟</span></a></h2><p>奶茶店中有各种各样的奶茶，珍珠奶茶、蓝莓奶茶，用户在购买时，店员会问是否要加 布丁、加糖、珍珠等配料，不同的奶茶配不同的材料，价格也不一致，使用装饰器模式设计实现。</p><p><strong>定义抽象构件角色（Component）- 奶茶（MilkTea）</strong></p><div class="language-java" data-highlighter="shiki" data-ext="java" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> interface</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> MilkTea</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /**</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     * 获取最终价格</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     *</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     * </span><span style="--shiki-light:#C678DD;--shiki-light-font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic;">@return</span><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> 返回价格</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     */</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> abstract</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> double</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> getPrice</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><p><strong>定义具体构件（ConcreteComponent）角色 - 珍珠奶茶(PearlTea)</strong></p><div class="language-java" data-highlighter="shiki" data-ext="java" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 珍珠奶茶</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> PearlTea</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> implements</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> MilkTea</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> double</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> getPrice</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;"> 20.0</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><p><strong>蓝莓奶茶(BlueberryTea)</strong></p><div class="language-java" data-highlighter="shiki" data-ext="java" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> BlueberryTea</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> implements</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> MilkTea</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> double</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> getPrice</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;"> 10.0</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><p><strong>定义抽象装饰（Decorator）角色 - 配料(Decorator)</strong></p><div class="language-java" data-highlighter="shiki" data-ext="java" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> abstract</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> BatchingDecorator</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> implements</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> MilkTea</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">    protected</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> MilkTea</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> milkTea</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><p><strong>具体装饰者 - 布丁(Pudding)</strong></p><div class="language-java" data-highlighter="shiki" data-ext="java" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> PuddingDecorator</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> extends</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> BatchingDecorator</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> PuddingDecorator</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">MilkTea</span><span style="--shiki-light:#E06C75;--shiki-light-font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> milkTea</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">       this</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">milkTea</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> milkTea;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> double</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> getPrice</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;"> 5.0</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> this</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">milkTea</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">getPrice</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><p><strong>具体装饰者 - 糖(Sugar)</strong></p><div class="language-java" data-highlighter="shiki" data-ext="java" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> SugarDecorator</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> extends</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> BatchingDecorator</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> SugarDecorator</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">MilkTea</span><span style="--shiki-light:#E06C75;--shiki-light-font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> milkTea</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">        this</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">milkTea</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> milkTea;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> double</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> getPrice</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;"> 3.0</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> this</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">milkTea</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">getPrice</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><p><strong>演示案例</strong></p><p>我们去奶茶店买一杯蓝莓奶茶，加糖+加布丁，请问需要多少钱？</p><div class="language-java" data-highlighter="shiki" data-ext="java" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> DecoratorExample</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#E06C75;--shiki-light-font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 蓝莓奶茶</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">        MilkTea</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> milkTea</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> BlueberryTea</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 布丁 包装类</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">        milkTea </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> PuddingDecorator</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(milkTea);</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 加糖 包装类</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">        milkTea </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> SugarDecorator</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(milkTea);</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 总价格 蓝莓10.0 + 布丁5.0 + 糖3.0 = 18.0</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">milkTea</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;">getPrice</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><h2 id="装饰器模式的应用场景" tabindex="-1"><a class="header-anchor" href="#装饰器模式的应用场景"><span>装饰器模式的应用场景</span></a></h2><p>装饰器模式通常在以下几种情况使用</p><ul><li>当需要给一个现有类添加附加职责，而又不能采用生成子类的方法进行扩充时。例如，该类被隐藏或者该类是终极类或者采用继承方式会产生大量的子类。</li><li>当需要通过对现有的一组基本功能进行排列组合而产生非常多的功能时，采用继承关系很难实现，而采用装饰器模式却很好实现。</li><li>当对象的功能要求可以动态地添加，也可以再动态地撤销时。</li></ul><p>装饰器模式在 Java 中的最著名的应用莫过于 Java I/O 标准库的设计了。例如：</p><ul><li>InputStream 的子类 FilterInputStream</li><li>OutputStream 的子类 FilterOutputStream</li><li>Reader 的子类 BufferedReader 以及 FilterReader</li><li>还有 Writer 的子类 BufferedWriter、FilterWriter 以及 PrintWriter 等，它们都是抽象装饰类</li></ul>`,33)),s("p",null,[i[1]||(i[1]=a("如需了解 I/O 类中的装饰器模式，请看👉 ")),e(n,{to:"/passages/2021-05-06-java-io-decorator-pattern.html"},{default:k(()=>i[0]||(i[0]=[a("Java - I/O 装饰器模式")])),_:1})]),i[3]||(i[3]=s("h2",{id:"参考资料",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#参考资料"},[s("span",null,"参考资料")])],-1)),i[4]||(i[4]=s("p",null,[s("a",{href:"https://www.pdai.tech/md/dev-spec/pattern/12_decorator.html",target:"_blank",rel:"noopener noreferrer"},"结构型 - 装饰(Decorator) - Java 全栈知识体系")],-1)),i[5]||(i[5]=s("p",null,[s("a",{href:"http://c.biancheng.net/view/1366.html",target:"_blank",rel:"noopener noreferrer"},"装饰器模式详解 - C语言中文网")],-1))])}const y=t(B,[["render",d]]),F=JSON.parse('{"path":"/dev-guide/design/11.%E7%BB%93%E6%9E%84%E5%9E%8B-%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F(Decorator).html","title":"结构型 - 装饰器模式(Decorator)","lang":"zh-CN","frontmatter":{"title":"结构型 - 装饰器模式(Decorator)","date":"2021-05-07T21:30:12.000Z","re":"dev-decorator-pattern","star":true,"tag":["设计模式"],"category":["设计模式"],"description":"装饰(Decorator) 提示 指在不改变现有对象结构的情况下，动态地给该对象增加一些职责（即增加其额外功能）的模式 装饰器模式介绍 装饰器器的核心就是在 不改变原有类 的基础上给类新增功能 通常情况下，扩展一个类的功能会使用继承方式来实现。但继承具有静态特征，耦合度高，并且随着扩展功能的增多，子类会过多等问题。但是使用装饰器模式会是另外一种思路更为...","permalink":"/passages/dev-decorator-pattern.html","head":[["meta",{"property":"og:url","content":"https://blog.zenghr.cn/passages/dev-decorator-pattern.html"}],["meta",{"property":"og:site_name","content":"Zenghr"}],["meta",{"property":"og:title","content":"结构型 - 装饰器模式(Decorator)"}],["meta",{"property":"og:description","content":"装饰(Decorator) 提示 指在不改变现有对象结构的情况下，动态地给该对象增加一些职责（即增加其额外功能）的模式 装饰器模式介绍 装饰器器的核心就是在 不改变原有类 的基础上给类新增功能 通常情况下，扩展一个类的功能会使用继承方式来实现。但继承具有静态特征，耦合度高，并且随着扩展功能的增多，子类会过多等问题。但是使用装饰器模式会是另外一种思路更为..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://media.zenghr.cn/blog/img/20210507/44cmIa2m9SQd.png?imageslim"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-07T20:17:18.000Z"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:published_time","content":"2021-05-07T21:30:12.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-07T20:17:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"结构型 - 装饰器模式(Decorator)\\",\\"image\\":[\\"https://media.zenghr.cn/blog/img/20210507/44cmIa2m9SQd.png?imageslim\\"],\\"datePublished\\":\\"2021-05-07T21:30:12.000Z\\",\\"dateModified\\":\\"2025-04-07T20:17:18.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Zenghr\\"}]}"]]},"git":{"createdTime":1744057038000,"updatedTime":1744057038000,"contributors":[{"name":"zenghr","username":"zenghr","email":"zenghr","commits":1,"url":"https://github.com/zenghr"}]},"readingTime":{"minutes":3.61,"words":1083},"filePathRelative":"dev-guide/design/11.结构型-装饰者模式(Decorator).md","localizedDate":"2021年5月7日","excerpt":"\\n<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">提示</p>\\n<p>指在不改变现有对象结构的情况下，动态地给该对象增加一些职责（即增加其额外功能）的模式</p>\\n</div>\\n<h2>装饰器模式介绍</h2>\\n<p>装饰器器的核心就是在 <strong>不改变原有类</strong> 的基础上给类新增功能</p>\\n<p>通常情况下，扩展一个类的功能会使用继承方式来实现。但继承具有静态特征，耦合度高，并且随着扩展功能的增多，子类会过多等问题。但是使用装饰器模式会是另外一种思路更为灵活，可以避免继承导致的子类过多</p>","autoDesc":true}');export{y as comp,F as data};
